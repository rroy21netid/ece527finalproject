// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module write_image (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        C_buffer_0_address0,
        C_buffer_0_ce0,
        C_buffer_0_q0,
        C_buffer_1_address0,
        C_buffer_1_ce0,
        C_buffer_1_q0,
        C_buffer_2_address0,
        C_buffer_2_ce0,
        C_buffer_2_q0,
        C_buffer_3_address0,
        C_buffer_3_ce0,
        C_buffer_3_q0,
        C_buffer_4_address0,
        C_buffer_4_ce0,
        C_buffer_4_q0,
        C_buffer_5_address0,
        C_buffer_5_ce0,
        C_buffer_5_q0,
        C_buffer_6_address0,
        C_buffer_6_ce0,
        C_buffer_6_q0,
        C_buffer_7_address0,
        C_buffer_7_ce0,
        C_buffer_7_q0,
        m_axi_c_AWVALID,
        m_axi_c_AWREADY,
        m_axi_c_AWADDR,
        m_axi_c_AWID,
        m_axi_c_AWLEN,
        m_axi_c_AWSIZE,
        m_axi_c_AWBURST,
        m_axi_c_AWLOCK,
        m_axi_c_AWCACHE,
        m_axi_c_AWPROT,
        m_axi_c_AWQOS,
        m_axi_c_AWREGION,
        m_axi_c_AWUSER,
        m_axi_c_WVALID,
        m_axi_c_WREADY,
        m_axi_c_WDATA,
        m_axi_c_WSTRB,
        m_axi_c_WLAST,
        m_axi_c_WID,
        m_axi_c_WUSER,
        m_axi_c_ARVALID,
        m_axi_c_ARREADY,
        m_axi_c_ARADDR,
        m_axi_c_ARID,
        m_axi_c_ARLEN,
        m_axi_c_ARSIZE,
        m_axi_c_ARBURST,
        m_axi_c_ARLOCK,
        m_axi_c_ARCACHE,
        m_axi_c_ARPROT,
        m_axi_c_ARQOS,
        m_axi_c_ARREGION,
        m_axi_c_ARUSER,
        m_axi_c_RVALID,
        m_axi_c_RREADY,
        m_axi_c_RDATA,
        m_axi_c_RLAST,
        m_axi_c_RID,
        m_axi_c_RUSER,
        m_axi_c_RRESP,
        m_axi_c_BVALID,
        m_axi_c_BREADY,
        m_axi_c_BRESP,
        m_axi_c_BID,
        m_axi_c_BUSER,
        c_offset
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] C_buffer_0_address0;
output   C_buffer_0_ce0;
input  [15:0] C_buffer_0_q0;
output  [11:0] C_buffer_1_address0;
output   C_buffer_1_ce0;
input  [15:0] C_buffer_1_q0;
output  [11:0] C_buffer_2_address0;
output   C_buffer_2_ce0;
input  [15:0] C_buffer_2_q0;
output  [11:0] C_buffer_3_address0;
output   C_buffer_3_ce0;
input  [15:0] C_buffer_3_q0;
output  [11:0] C_buffer_4_address0;
output   C_buffer_4_ce0;
input  [15:0] C_buffer_4_q0;
output  [11:0] C_buffer_5_address0;
output   C_buffer_5_ce0;
input  [15:0] C_buffer_5_q0;
output  [11:0] C_buffer_6_address0;
output   C_buffer_6_ce0;
input  [15:0] C_buffer_6_q0;
output  [11:0] C_buffer_7_address0;
output   C_buffer_7_ce0;
input  [15:0] C_buffer_7_q0;
output   m_axi_c_AWVALID;
input   m_axi_c_AWREADY;
output  [31:0] m_axi_c_AWADDR;
output  [0:0] m_axi_c_AWID;
output  [31:0] m_axi_c_AWLEN;
output  [2:0] m_axi_c_AWSIZE;
output  [1:0] m_axi_c_AWBURST;
output  [1:0] m_axi_c_AWLOCK;
output  [3:0] m_axi_c_AWCACHE;
output  [2:0] m_axi_c_AWPROT;
output  [3:0] m_axi_c_AWQOS;
output  [3:0] m_axi_c_AWREGION;
output  [0:0] m_axi_c_AWUSER;
output   m_axi_c_WVALID;
input   m_axi_c_WREADY;
output  [15:0] m_axi_c_WDATA;
output  [1:0] m_axi_c_WSTRB;
output   m_axi_c_WLAST;
output  [0:0] m_axi_c_WID;
output  [0:0] m_axi_c_WUSER;
output   m_axi_c_ARVALID;
input   m_axi_c_ARREADY;
output  [31:0] m_axi_c_ARADDR;
output  [0:0] m_axi_c_ARID;
output  [31:0] m_axi_c_ARLEN;
output  [2:0] m_axi_c_ARSIZE;
output  [1:0] m_axi_c_ARBURST;
output  [1:0] m_axi_c_ARLOCK;
output  [3:0] m_axi_c_ARCACHE;
output  [2:0] m_axi_c_ARPROT;
output  [3:0] m_axi_c_ARQOS;
output  [3:0] m_axi_c_ARREGION;
output  [0:0] m_axi_c_ARUSER;
input   m_axi_c_RVALID;
output   m_axi_c_RREADY;
input  [15:0] m_axi_c_RDATA;
input   m_axi_c_RLAST;
input  [0:0] m_axi_c_RID;
input  [0:0] m_axi_c_RUSER;
input  [1:0] m_axi_c_RRESP;
input   m_axi_c_BVALID;
output   m_axi_c_BREADY;
input  [1:0] m_axi_c_BRESP;
input  [0:0] m_axi_c_BID;
input  [0:0] m_axi_c_BUSER;
input  [30:0] c_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg C_buffer_0_ce0;
reg C_buffer_1_ce0;
reg C_buffer_2_ce0;
reg C_buffer_3_ce0;
reg C_buffer_4_ce0;
reg C_buffer_5_ce0;
reg C_buffer_6_ce0;
reg C_buffer_7_ce0;
reg m_axi_c_AWVALID;
reg m_axi_c_WVALID;
reg m_axi_c_BREADY;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    c_blk_n_AW;
wire    ap_CS_fsm_state3;
reg    c_blk_n_W;
wire    ap_CS_fsm_state6;
reg    c_blk_n_B;
wire    ap_CS_fsm_state11;
wire   [31:0] c_offset_cast_fu_239_p1;
reg   [31:0] c_offset_cast_reg_403;
wire   [2:0] trunc_ln35_fu_273_p1;
reg   [2:0] trunc_ln35_reg_408;
wire    ap_CS_fsm_state2;
reg   [3:0] lshr_ln_reg_413;
reg   [31:0] c_addr_reg_419;
wire   [6:0] add_ln35_fu_306_p2;
reg   [6:0] add_ln35_reg_425;
wire   [31:0] zext_ln35_2_fu_312_p1;
reg   [31:0] zext_ln35_2_reg_430;
wire   [11:0] add_ln35_3_fu_337_p2;
reg   [11:0] add_ln35_3_reg_435;
wire   [7:0] add_ln35_1_fu_343_p2;
reg   [7:0] add_ln35_1_reg_440;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln35_fu_370_p2;
reg   [0:0] icmp_ln35_reg_485;
wire   [15:0] tmp_fu_376_p10;
reg   [15:0] tmp_reg_489;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln35_1_fu_397_p2;
reg   [0:0] icmp_ln35_1_reg_494;
reg   [6:0] phi_ln35_reg_216;
reg   [7:0] phi_ln35_1_reg_228;
wire   [63:0] zext_ln35_8_fu_358_p1;
wire   [63:0] zext_ln35_6_fu_296_p1;
wire   [13:0] tmp_1_fu_243_p3;
wire   [11:0] tmp_2_fu_255_p3;
wire   [14:0] zext_ln35_fu_251_p1;
wire   [14:0] zext_ln35_1_fu_263_p1;
wire   [14:0] add_ln35_2_fu_267_p2;
wire   [31:0] zext_ln35_5_fu_287_p1;
wire   [31:0] add_ln35_5_fu_291_p2;
wire   [10:0] tmp_3_fu_315_p3;
wire   [8:0] tmp_4_fu_326_p3;
wire   [11:0] zext_ln35_3_fu_322_p1;
wire   [11:0] zext_ln35_4_fu_333_p1;
wire   [11:0] zext_ln35_7_fu_349_p1;
wire   [11:0] add_ln35_4_fu_353_p2;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

DWT_Accel_mux_832ibs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 32 ),
    .dout_WIDTH( 16 ))
DWT_Accel_mux_832ibs_U121(
    .din0(C_buffer_0_q0),
    .din1(C_buffer_1_q0),
    .din2(C_buffer_2_q0),
    .din3(C_buffer_3_q0),
    .din4(C_buffer_4_q0),
    .din5(C_buffer_5_q0),
    .din6(C_buffer_6_q0),
    .din7(C_buffer_7_q0),
    .din8(zext_ln35_2_reg_430),
    .dout(tmp_fu_376_p10)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_c_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln35_reg_485 == 1'd0))) begin
        phi_ln35_1_reg_228 <= add_ln35_1_reg_440;
    end else if (((m_axi_c_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_ln35_1_reg_228 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln35_1_reg_494 == 1'd0) & (m_axi_c_BVALID == 1'b1))) begin
        phi_ln35_reg_216 <= add_ln35_reg_425;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_ln35_reg_216 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln35_1_reg_440 <= add_ln35_1_fu_343_p2;
        icmp_ln35_reg_485 <= icmp_ln35_fu_370_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_c_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln35_3_reg_435[11 : 5] <= add_ln35_3_fu_337_p2[11 : 5];
        add_ln35_reg_425 <= add_ln35_fu_306_p2;
        zext_ln35_2_reg_430[2 : 0] <= zext_ln35_2_fu_312_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c_addr_reg_419 <= zext_ln35_6_fu_296_p1;
        lshr_ln_reg_413 <= {{phi_ln35_reg_216[6:3]}};
        trunc_ln35_reg_408 <= trunc_ln35_fu_273_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_offset_cast_reg_403[30 : 0] <= c_offset_cast_fu_239_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_c_WREADY == 1'b1) & (icmp_ln35_reg_485 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        icmp_ln35_1_reg_494 <= icmp_ln35_1_fu_397_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_reg_489 <= tmp_fu_376_p10;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        C_buffer_0_ce0 = 1'b1;
    end else begin
        C_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        C_buffer_1_ce0 = 1'b1;
    end else begin
        C_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        C_buffer_2_ce0 = 1'b1;
    end else begin
        C_buffer_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        C_buffer_3_ce0 = 1'b1;
    end else begin
        C_buffer_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        C_buffer_4_ce0 = 1'b1;
    end else begin
        C_buffer_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        C_buffer_5_ce0 = 1'b1;
    end else begin
        C_buffer_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        C_buffer_6_ce0 = 1'b1;
    end else begin
        C_buffer_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        C_buffer_7_ce0 = 1'b1;
    end else begin
        C_buffer_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln35_1_reg_494 == 1'd1) & (1'b1 == ap_CS_fsm_state11) & (m_axi_c_BVALID == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_1_reg_494 == 1'd1) & (1'b1 == ap_CS_fsm_state11) & (m_axi_c_BVALID == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_blk_n_AW = m_axi_c_AWREADY;
    end else begin
        c_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        c_blk_n_B = m_axi_c_BVALID;
    end else begin
        c_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        c_blk_n_W = m_axi_c_WREADY;
    end else begin
        c_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((m_axi_c_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_c_AWVALID = 1'b1;
    end else begin
        m_axi_c_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (m_axi_c_BVALID == 1'b1))) begin
        m_axi_c_BREADY = 1'b1;
    end else begin
        m_axi_c_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_c_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        m_axi_c_WVALID = 1'b1;
    end else begin
        m_axi_c_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((m_axi_c_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((m_axi_c_WREADY == 1'b1) & (icmp_ln35_reg_485 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if (((m_axi_c_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln35_reg_485 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((icmp_ln35_1_reg_494 == 1'd1) & (1'b1 == ap_CS_fsm_state11) & (m_axi_c_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln35_1_reg_494 == 1'd0) & (m_axi_c_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_buffer_0_address0 = zext_ln35_8_fu_358_p1;

assign C_buffer_1_address0 = zext_ln35_8_fu_358_p1;

assign C_buffer_2_address0 = zext_ln35_8_fu_358_p1;

assign C_buffer_3_address0 = zext_ln35_8_fu_358_p1;

assign C_buffer_4_address0 = zext_ln35_8_fu_358_p1;

assign C_buffer_5_address0 = zext_ln35_8_fu_358_p1;

assign C_buffer_6_address0 = zext_ln35_8_fu_358_p1;

assign C_buffer_7_address0 = zext_ln35_8_fu_358_p1;

assign add_ln35_1_fu_343_p2 = (phi_ln35_1_reg_228 + 8'd1);

assign add_ln35_2_fu_267_p2 = (zext_ln35_fu_251_p1 + zext_ln35_1_fu_263_p1);

assign add_ln35_3_fu_337_p2 = (zext_ln35_3_fu_322_p1 + zext_ln35_4_fu_333_p1);

assign add_ln35_4_fu_353_p2 = (add_ln35_3_reg_435 + zext_ln35_7_fu_349_p1);

assign add_ln35_5_fu_291_p2 = (zext_ln35_5_fu_287_p1 + c_offset_cast_reg_403);

assign add_ln35_fu_306_p2 = (7'd1 + phi_ln35_reg_216);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign c_offset_cast_fu_239_p1 = c_offset;

assign icmp_ln35_1_fu_397_p2 = ((phi_ln35_reg_216 == 7'd119) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_370_p2 = ((phi_ln35_1_reg_228 == 8'd159) ? 1'b1 : 1'b0);

assign m_axi_c_ARADDR = 32'd0;

assign m_axi_c_ARBURST = 2'd0;

assign m_axi_c_ARCACHE = 4'd0;

assign m_axi_c_ARID = 1'd0;

assign m_axi_c_ARLEN = 32'd0;

assign m_axi_c_ARLOCK = 2'd0;

assign m_axi_c_ARPROT = 3'd0;

assign m_axi_c_ARQOS = 4'd0;

assign m_axi_c_ARREGION = 4'd0;

assign m_axi_c_ARSIZE = 3'd0;

assign m_axi_c_ARUSER = 1'd0;

assign m_axi_c_ARVALID = 1'b0;

assign m_axi_c_AWADDR = c_addr_reg_419;

assign m_axi_c_AWBURST = 2'd0;

assign m_axi_c_AWCACHE = 4'd0;

assign m_axi_c_AWID = 1'd0;

assign m_axi_c_AWLEN = 32'd160;

assign m_axi_c_AWLOCK = 2'd0;

assign m_axi_c_AWPROT = 3'd0;

assign m_axi_c_AWQOS = 4'd0;

assign m_axi_c_AWREGION = 4'd0;

assign m_axi_c_AWSIZE = 3'd0;

assign m_axi_c_AWUSER = 1'd0;

assign m_axi_c_RREADY = 1'b0;

assign m_axi_c_WDATA = tmp_reg_489;

assign m_axi_c_WID = 1'd0;

assign m_axi_c_WLAST = 1'b0;

assign m_axi_c_WSTRB = 2'd3;

assign m_axi_c_WUSER = 1'd0;

assign tmp_1_fu_243_p3 = {{phi_ln35_reg_216}, {7'd0}};

assign tmp_2_fu_255_p3 = {{phi_ln35_reg_216}, {5'd0}};

assign tmp_3_fu_315_p3 = {{lshr_ln_reg_413}, {7'd0}};

assign tmp_4_fu_326_p3 = {{lshr_ln_reg_413}, {5'd0}};

assign trunc_ln35_fu_273_p1 = phi_ln35_reg_216[2:0];

assign zext_ln35_1_fu_263_p1 = tmp_2_fu_255_p3;

assign zext_ln35_2_fu_312_p1 = trunc_ln35_reg_408;

assign zext_ln35_3_fu_322_p1 = tmp_3_fu_315_p3;

assign zext_ln35_4_fu_333_p1 = tmp_4_fu_326_p3;

assign zext_ln35_5_fu_287_p1 = add_ln35_2_fu_267_p2;

assign zext_ln35_6_fu_296_p1 = add_ln35_5_fu_291_p2;

assign zext_ln35_7_fu_349_p1 = phi_ln35_1_reg_228;

assign zext_ln35_8_fu_358_p1 = add_ln35_4_fu_353_p2;

assign zext_ln35_fu_251_p1 = tmp_1_fu_243_p3;

always @ (posedge ap_clk) begin
    c_offset_cast_reg_403[31] <= 1'b0;
    zext_ln35_2_reg_430[31:3] <= 29'b00000000000000000000000000000;
    add_ln35_3_reg_435[4:0] <= 5'b00000;
end

endmodule //write_image
