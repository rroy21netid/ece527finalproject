// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aesl_mux_load_8_1_x_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_empty_15_AWVALID,
        m_axi_empty_15_AWREADY,
        m_axi_empty_15_AWADDR,
        m_axi_empty_15_AWID,
        m_axi_empty_15_AWLEN,
        m_axi_empty_15_AWSIZE,
        m_axi_empty_15_AWBURST,
        m_axi_empty_15_AWLOCK,
        m_axi_empty_15_AWCACHE,
        m_axi_empty_15_AWPROT,
        m_axi_empty_15_AWQOS,
        m_axi_empty_15_AWREGION,
        m_axi_empty_15_AWUSER,
        m_axi_empty_15_WVALID,
        m_axi_empty_15_WREADY,
        m_axi_empty_15_WDATA,
        m_axi_empty_15_WSTRB,
        m_axi_empty_15_WLAST,
        m_axi_empty_15_WID,
        m_axi_empty_15_WUSER,
        m_axi_empty_15_ARVALID,
        m_axi_empty_15_ARREADY,
        m_axi_empty_15_ARADDR,
        m_axi_empty_15_ARID,
        m_axi_empty_15_ARLEN,
        m_axi_empty_15_ARSIZE,
        m_axi_empty_15_ARBURST,
        m_axi_empty_15_ARLOCK,
        m_axi_empty_15_ARCACHE,
        m_axi_empty_15_ARPROT,
        m_axi_empty_15_ARQOS,
        m_axi_empty_15_ARREGION,
        m_axi_empty_15_ARUSER,
        m_axi_empty_15_RVALID,
        m_axi_empty_15_RREADY,
        m_axi_empty_15_RDATA,
        m_axi_empty_15_RLAST,
        m_axi_empty_15_RID,
        m_axi_empty_15_RUSER,
        m_axi_empty_15_RRESP,
        m_axi_empty_15_BVALID,
        m_axi_empty_15_BREADY,
        m_axi_empty_15_BRESP,
        m_axi_empty_15_BID,
        m_axi_empty_15_BUSER,
        p_offset,
        p_offset1,
        p_offset2,
        p_offset3,
        p_offset4,
        p_offset5,
        p_offset6,
        p_offset7,
        empty_16,
        empty_17,
        empty,
        ap_return
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_empty_15_AWVALID;
input   m_axi_empty_15_AWREADY;
output  [31:0] m_axi_empty_15_AWADDR;
output  [0:0] m_axi_empty_15_AWID;
output  [31:0] m_axi_empty_15_AWLEN;
output  [2:0] m_axi_empty_15_AWSIZE;
output  [1:0] m_axi_empty_15_AWBURST;
output  [1:0] m_axi_empty_15_AWLOCK;
output  [3:0] m_axi_empty_15_AWCACHE;
output  [2:0] m_axi_empty_15_AWPROT;
output  [3:0] m_axi_empty_15_AWQOS;
output  [3:0] m_axi_empty_15_AWREGION;
output  [0:0] m_axi_empty_15_AWUSER;
output   m_axi_empty_15_WVALID;
input   m_axi_empty_15_WREADY;
output  [7:0] m_axi_empty_15_WDATA;
output  [0:0] m_axi_empty_15_WSTRB;
output   m_axi_empty_15_WLAST;
output  [0:0] m_axi_empty_15_WID;
output  [0:0] m_axi_empty_15_WUSER;
output   m_axi_empty_15_ARVALID;
input   m_axi_empty_15_ARREADY;
output  [31:0] m_axi_empty_15_ARADDR;
output  [0:0] m_axi_empty_15_ARID;
output  [31:0] m_axi_empty_15_ARLEN;
output  [2:0] m_axi_empty_15_ARSIZE;
output  [1:0] m_axi_empty_15_ARBURST;
output  [1:0] m_axi_empty_15_ARLOCK;
output  [3:0] m_axi_empty_15_ARCACHE;
output  [2:0] m_axi_empty_15_ARPROT;
output  [3:0] m_axi_empty_15_ARQOS;
output  [3:0] m_axi_empty_15_ARREGION;
output  [0:0] m_axi_empty_15_ARUSER;
input   m_axi_empty_15_RVALID;
output   m_axi_empty_15_RREADY;
input  [7:0] m_axi_empty_15_RDATA;
input   m_axi_empty_15_RLAST;
input  [0:0] m_axi_empty_15_RID;
input  [0:0] m_axi_empty_15_RUSER;
input  [1:0] m_axi_empty_15_RRESP;
input   m_axi_empty_15_BVALID;
output   m_axi_empty_15_BREADY;
input  [1:0] m_axi_empty_15_BRESP;
input  [0:0] m_axi_empty_15_BID;
input  [0:0] m_axi_empty_15_BUSER;
input  [31:0] p_offset;
input  [31:0] p_offset1;
input  [31:0] p_offset2;
input  [31:0] p_offset3;
input  [31:0] p_offset4;
input  [31:0] p_offset5;
input  [31:0] p_offset6;
input  [31:0] p_offset7;
input  [3:0] empty_16;
input  [5:0] empty_17;
input  [9:0] empty;
output  [7:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_empty_15_ARVALID;
reg[31:0] m_axi_empty_15_ARADDR;
reg m_axi_empty_15_RREADY;
reg[7:0] ap_return;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    empty_15_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    empty_15_blk_n_R;
wire    ap_CS_fsm_state9;
reg   [31:0] p_addr_reg_431;
reg   [31:0] p_addr_1_reg_437;
reg   [31:0] p_addr_2_reg_443;
reg   [31:0] p_addr_3_reg_449;
reg   [31:0] p_addr_4_reg_455;
reg   [31:0] p_addr_5_reg_461;
reg   [31:0] p_addr_6_reg_467;
reg   [31:0] p_addr_7_reg_473;
reg   [7:0] p_addr_6_read_reg_479;
reg    ap_predicate_op125_read_state9;
reg    ap_block_state9;
reg   [7:0] p_addr_5_read_reg_484;
reg   [7:0] p_addr_4_read_reg_489;
reg   [7:0] p_addr_3_read_reg_494;
reg   [7:0] p_addr_2_read_reg_499;
reg   [7:0] p_addr_1_read_reg_504;
reg   [7:0] p_addr_read_reg_509;
reg   [7:0] p_addr_7_read_reg_514;
reg   [7:0] ap_phi_mux_UnifiedRetVal_phi_fu_241_p16;
wire    ap_CS_fsm_state10;
wire   [63:0] add_ln1_2_fu_303_p2;
wire   [63:0] add_ln4_fu_319_p2;
wire   [63:0] add_ln7_fu_335_p2;
wire   [63:0] add_ln10_fu_351_p2;
wire   [63:0] add_ln13_fu_367_p2;
wire   [63:0] add_ln16_fu_383_p2;
wire   [63:0] add_ln19_fu_399_p2;
wire   [63:0] add_ln22_fu_415_p2;
reg    ap_predicate_op69_readreq_state2;
reg    ap_block_state2_io;
wire   [14:0] tmp_fu_263_p3;
wire   [12:0] tmp_1_fu_275_p3;
wire   [63:0] zext_ln1_fu_271_p1;
wire   [63:0] zext_ln1_1_fu_283_p1;
wire   [63:0] p_cast2_fu_259_p1;
wire   [63:0] add_ln1_fu_287_p2;
wire   [63:0] add_ln1_1_fu_293_p2;
wire  signed [63:0] sext_ln1_fu_299_p1;
wire  signed [63:0] sext_ln4_fu_315_p1;
wire  signed [63:0] sext_ln7_fu_331_p1;
wire  signed [63:0] sext_ln10_fu_347_p1;
wire  signed [63:0] sext_ln13_fu_363_p1;
wire  signed [63:0] sext_ln16_fu_379_p1;
wire  signed [63:0] sext_ln19_fu_395_p1;
wire  signed [63:0] sext_ln22_fu_411_p1;
reg   [7:0] ap_return_preg;
reg   [9:0] ap_NS_fsm;
reg    ap_condition_162;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_return_preg = 8'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_241_p16;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~(((m_axi_empty_15_RVALID == 1'b0) & (ap_predicate_op125_read_state9 == 1'b1)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd6)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd5)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd4)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd3)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd2)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd1)) | ((empty_16 == 4'd0) & (m_axi_empty_15_RVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state9) & (empty_16 == 4'd1))) begin
        p_addr_1_read_reg_504 <= m_axi_empty_15_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_addr_1_reg_437 <= add_ln4_fu_319_p2;
        p_addr_2_reg_443 <= add_ln7_fu_335_p2;
        p_addr_3_reg_449 <= add_ln10_fu_351_p2;
        p_addr_4_reg_455 <= add_ln13_fu_367_p2;
        p_addr_5_reg_461 <= add_ln16_fu_383_p2;
        p_addr_6_reg_467 <= add_ln19_fu_399_p2;
        p_addr_7_reg_473 <= add_ln22_fu_415_p2;
        p_addr_reg_431 <= add_ln1_2_fu_303_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((m_axi_empty_15_RVALID == 1'b0) & (ap_predicate_op125_read_state9 == 1'b1)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd6)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd5)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd4)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd3)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd2)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd1)) | ((empty_16 == 4'd0) & (m_axi_empty_15_RVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state9) & (empty_16 == 4'd2))) begin
        p_addr_2_read_reg_499 <= m_axi_empty_15_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((m_axi_empty_15_RVALID == 1'b0) & (ap_predicate_op125_read_state9 == 1'b1)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd6)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd5)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd4)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd3)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd2)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd1)) | ((empty_16 == 4'd0) & (m_axi_empty_15_RVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state9) & (empty_16 == 4'd3))) begin
        p_addr_3_read_reg_494 <= m_axi_empty_15_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((m_axi_empty_15_RVALID == 1'b0) & (ap_predicate_op125_read_state9 == 1'b1)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd6)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd5)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd4)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd3)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd2)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd1)) | ((empty_16 == 4'd0) & (m_axi_empty_15_RVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state9) & (empty_16 == 4'd4))) begin
        p_addr_4_read_reg_489 <= m_axi_empty_15_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((m_axi_empty_15_RVALID == 1'b0) & (ap_predicate_op125_read_state9 == 1'b1)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd6)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd5)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd4)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd3)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd2)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd1)) | ((empty_16 == 4'd0) & (m_axi_empty_15_RVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state9) & (empty_16 == 4'd5))) begin
        p_addr_5_read_reg_484 <= m_axi_empty_15_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((m_axi_empty_15_RVALID == 1'b0) & (ap_predicate_op125_read_state9 == 1'b1)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd6)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd5)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd4)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd3)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd2)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd1)) | ((empty_16 == 4'd0) & (m_axi_empty_15_RVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state9) & (empty_16 == 4'd6))) begin
        p_addr_6_read_reg_479 <= m_axi_empty_15_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((m_axi_empty_15_RVALID == 1'b0) & (ap_predicate_op125_read_state9 == 1'b1)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd6)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd5)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd4)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd3)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd2)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd1)) | ((empty_16 == 4'd0) & (m_axi_empty_15_RVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state9) & (ap_predicate_op125_read_state9 == 1'b1))) begin
        p_addr_7_read_reg_514 <= m_axi_empty_15_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((m_axi_empty_15_RVALID == 1'b0) & (ap_predicate_op125_read_state9 == 1'b1)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd6)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd5)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd4)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd3)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd2)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd1)) | ((empty_16 == 4'd0) & (m_axi_empty_15_RVALID == 1'b0))) & (empty_16 == 4'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        p_addr_read_reg_509 <= m_axi_empty_15_RDATA;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        if ((1'b1 == ap_condition_162)) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_241_p16 = p_addr_7_read_reg_514;
        end else if ((empty_16 == 4'd6)) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_241_p16 = p_addr_6_read_reg_479;
        end else if ((empty_16 == 4'd5)) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_241_p16 = p_addr_5_read_reg_484;
        end else if ((empty_16 == 4'd4)) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_241_p16 = p_addr_4_read_reg_489;
        end else if ((empty_16 == 4'd3)) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_241_p16 = p_addr_3_read_reg_494;
        end else if ((empty_16 == 4'd2)) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_241_p16 = p_addr_2_read_reg_499;
        end else if ((empty_16 == 4'd1)) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_241_p16 = p_addr_1_read_reg_504;
        end else if ((empty_16 == 4'd0)) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_241_p16 = p_addr_read_reg_509;
        end else begin
            ap_phi_mux_UnifiedRetVal_phi_fu_241_p16 = 'bx;
        end
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_241_p16 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_241_p16;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((~(empty_16 == 4'd6) & ~(empty_16 == 4'd5) & ~(empty_16 == 4'd4) & ~(empty_16 == 4'd3) & ~(empty_16 == 4'd2) & ~(empty_16 == 4'd1) & ~(empty_16 == 4'd0) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state2) & (empty_16 == 4'd6)) | ((1'b1 == ap_CS_fsm_state2) & (empty_16 == 4'd5)) | ((1'b1 == ap_CS_fsm_state2) & (empty_16 == 4'd4)) | ((1'b1 == ap_CS_fsm_state2) & (empty_16 == 4'd3)) | ((1'b1 == ap_CS_fsm_state2) & (empty_16 == 4'd2)) | ((1'b1 == ap_CS_fsm_state2) & (empty_16 == 4'd1)) | ((empty_16 == 4'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        empty_15_blk_n_AR = m_axi_empty_15_ARREADY;
    end else begin
        empty_15_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((~(empty_16 == 4'd6) & ~(empty_16 == 4'd5) & ~(empty_16 == 4'd4) & ~(empty_16 == 4'd3) & ~(empty_16 == 4'd2) & ~(empty_16 == 4'd1) & ~(empty_16 == 4'd0) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == ap_CS_fsm_state9) & (empty_16 == 4'd6)) | ((1'b1 == ap_CS_fsm_state9) & (empty_16 == 4'd5)) | ((1'b1 == ap_CS_fsm_state9) & (empty_16 == 4'd4)) | ((1'b1 == ap_CS_fsm_state9) & (empty_16 == 4'd3)) | ((1'b1 == ap_CS_fsm_state9) & (empty_16 == 4'd2)) | ((1'b1 == ap_CS_fsm_state9) & (empty_16 == 4'd1)) | ((empty_16 == 4'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        empty_15_blk_n_R = m_axi_empty_15_RVALID;
    end else begin
        empty_15_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        if ((ap_predicate_op69_readreq_state2 == 1'b1)) begin
            m_axi_empty_15_ARADDR = p_addr_7_reg_473;
        end else if ((empty_16 == 4'd0)) begin
            m_axi_empty_15_ARADDR = p_addr_reg_431;
        end else if ((empty_16 == 4'd1)) begin
            m_axi_empty_15_ARADDR = p_addr_1_reg_437;
        end else if ((empty_16 == 4'd2)) begin
            m_axi_empty_15_ARADDR = p_addr_2_reg_443;
        end else if ((empty_16 == 4'd3)) begin
            m_axi_empty_15_ARADDR = p_addr_3_reg_449;
        end else if ((empty_16 == 4'd4)) begin
            m_axi_empty_15_ARADDR = p_addr_4_reg_455;
        end else if ((empty_16 == 4'd5)) begin
            m_axi_empty_15_ARADDR = p_addr_5_reg_461;
        end else if ((empty_16 == 4'd6)) begin
            m_axi_empty_15_ARADDR = p_addr_6_reg_467;
        end else begin
            m_axi_empty_15_ARADDR = 'bx;
        end
    end else begin
        m_axi_empty_15_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (ap_predicate_op69_readreq_state2 == 1'b1)) | ((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (empty_16 == 4'd6)) | ((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (empty_16 == 4'd5)) | ((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (empty_16 == 4'd4)) | ((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (empty_16 == 4'd3)) | ((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (empty_16 == 4'd2)) | ((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (empty_16 == 4'd1)) | ((empty_16 == 4'd0) & (1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2)))) begin
        m_axi_empty_15_ARVALID = 1'b1;
    end else begin
        m_axi_empty_15_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~(((m_axi_empty_15_RVALID == 1'b0) & (ap_predicate_op125_read_state9 == 1'b1)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd6)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd5)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd4)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd3)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd2)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd1)) | ((empty_16 == 4'd0) & (m_axi_empty_15_RVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state9) & (ap_predicate_op125_read_state9 == 1'b1)) | (~(((m_axi_empty_15_RVALID == 1'b0) & (ap_predicate_op125_read_state9 == 1'b1)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd6)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd5)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd4)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd3)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd2)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd1)) | ((empty_16 == 4'd0) & (m_axi_empty_15_RVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state9) & (empty_16 == 4'd6)) | (~(((m_axi_empty_15_RVALID == 1'b0) & (ap_predicate_op125_read_state9 == 1'b1)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd6)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd5)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd4)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd3)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd2)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd1)) | ((empty_16 == 4'd0) & (m_axi_empty_15_RVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state9) & (empty_16 == 4'd5)) | (~(((m_axi_empty_15_RVALID == 1'b0) & (ap_predicate_op125_read_state9 == 1'b1)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd6)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd5)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd4)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd3)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd2)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd1)) | ((empty_16 == 4'd0) & (m_axi_empty_15_RVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state9) & (empty_16 == 4'd4)) | (~(((m_axi_empty_15_RVALID == 1'b0) & (ap_predicate_op125_read_state9 == 1'b1)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd6)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd5)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd4)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd3)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd2)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd1)) | ((empty_16 == 4'd0) & (m_axi_empty_15_RVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state9) & (empty_16 == 4'd3)) | (~(((m_axi_empty_15_RVALID == 1'b0) & (ap_predicate_op125_read_state9 == 1'b1)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd6)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd5)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd4)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd3)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd2)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd1)) | ((empty_16 == 4'd0) & (m_axi_empty_15_RVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state9) & (empty_16 == 4'd2)) | (~(((m_axi_empty_15_RVALID == 1'b0) & (ap_predicate_op125_read_state9 == 1'b1)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd6)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd5)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd4)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd3)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd2)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd1)) | ((empty_16 == 4'd0) & (m_axi_empty_15_RVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state9) & (empty_16 == 4'd1)) | (~(((m_axi_empty_15_RVALID == 1'b0) & (ap_predicate_op125_read_state9 == 1'b1)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd6)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd5)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd4)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd3)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd2)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd1)) | ((empty_16 == 4'd0) & (m_axi_empty_15_RVALID == 1'b0))) & (empty_16 == 4'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        m_axi_empty_15_RREADY = 1'b1;
    end else begin
        m_axi_empty_15_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if ((~(((m_axi_empty_15_RVALID == 1'b0) & (ap_predicate_op125_read_state9 == 1'b1)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd6)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd5)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd4)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd3)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd2)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd1)) | ((empty_16 == 4'd0) & (m_axi_empty_15_RVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_351_p2 = ($signed(add_ln1_1_fu_293_p2) + $signed(sext_ln10_fu_347_p1));

assign add_ln13_fu_367_p2 = ($signed(add_ln1_1_fu_293_p2) + $signed(sext_ln13_fu_363_p1));

assign add_ln16_fu_383_p2 = ($signed(add_ln1_1_fu_293_p2) + $signed(sext_ln16_fu_379_p1));

assign add_ln19_fu_399_p2 = ($signed(add_ln1_1_fu_293_p2) + $signed(sext_ln19_fu_395_p1));

assign add_ln1_1_fu_293_p2 = (p_cast2_fu_259_p1 + add_ln1_fu_287_p2);

assign add_ln1_2_fu_303_p2 = ($signed(add_ln1_1_fu_293_p2) + $signed(sext_ln1_fu_299_p1));

assign add_ln1_fu_287_p2 = (zext_ln1_fu_271_p1 + zext_ln1_1_fu_283_p1);

assign add_ln22_fu_415_p2 = ($signed(add_ln1_1_fu_293_p2) + $signed(sext_ln22_fu_411_p1));

assign add_ln4_fu_319_p2 = ($signed(add_ln1_1_fu_293_p2) + $signed(sext_ln4_fu_315_p1));

assign add_ln7_fu_335_p2 = ($signed(add_ln1_1_fu_293_p2) + $signed(sext_ln7_fu_331_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state2_io = (((m_axi_empty_15_ARREADY == 1'b0) & (ap_predicate_op69_readreq_state2 == 1'b1)) | ((m_axi_empty_15_ARREADY == 1'b0) & (empty_16 == 4'd6)) | ((m_axi_empty_15_ARREADY == 1'b0) & (empty_16 == 4'd5)) | ((m_axi_empty_15_ARREADY == 1'b0) & (empty_16 == 4'd4)) | ((m_axi_empty_15_ARREADY == 1'b0) & (empty_16 == 4'd3)) | ((m_axi_empty_15_ARREADY == 1'b0) & (empty_16 == 4'd2)) | ((m_axi_empty_15_ARREADY == 1'b0) & (empty_16 == 4'd1)) | ((empty_16 == 4'd0) & (m_axi_empty_15_ARREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state9 = (((m_axi_empty_15_RVALID == 1'b0) & (ap_predicate_op125_read_state9 == 1'b1)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd6)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd5)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd4)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd3)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd2)) | ((m_axi_empty_15_RVALID == 1'b0) & (empty_16 == 4'd1)) | ((empty_16 == 4'd0) & (m_axi_empty_15_RVALID == 1'b0)));
end

always @ (*) begin
    ap_condition_162 = (~(empty_16 == 4'd6) & ~(empty_16 == 4'd5) & ~(empty_16 == 4'd4) & ~(empty_16 == 4'd3) & ~(empty_16 == 4'd2) & ~(empty_16 == 4'd1) & ~(empty_16 == 4'd0));
end

always @ (*) begin
    ap_predicate_op125_read_state9 = (~(empty_16 == 4'd6) & ~(empty_16 == 4'd5) & ~(empty_16 == 4'd4) & ~(empty_16 == 4'd3) & ~(empty_16 == 4'd2) & ~(empty_16 == 4'd1) & ~(empty_16 == 4'd0));
end

always @ (*) begin
    ap_predicate_op69_readreq_state2 = (~(empty_16 == 4'd6) & ~(empty_16 == 4'd5) & ~(empty_16 == 4'd4) & ~(empty_16 == 4'd3) & ~(empty_16 == 4'd2) & ~(empty_16 == 4'd1) & ~(empty_16 == 4'd0));
end

assign m_axi_empty_15_ARBURST = 2'd0;

assign m_axi_empty_15_ARCACHE = 4'd0;

assign m_axi_empty_15_ARID = 1'd0;

assign m_axi_empty_15_ARLEN = 32'd1;

assign m_axi_empty_15_ARLOCK = 2'd0;

assign m_axi_empty_15_ARPROT = 3'd0;

assign m_axi_empty_15_ARQOS = 4'd0;

assign m_axi_empty_15_ARREGION = 4'd0;

assign m_axi_empty_15_ARSIZE = 3'd0;

assign m_axi_empty_15_ARUSER = 1'd0;

assign m_axi_empty_15_AWADDR = 32'd0;

assign m_axi_empty_15_AWBURST = 2'd0;

assign m_axi_empty_15_AWCACHE = 4'd0;

assign m_axi_empty_15_AWID = 1'd0;

assign m_axi_empty_15_AWLEN = 32'd0;

assign m_axi_empty_15_AWLOCK = 2'd0;

assign m_axi_empty_15_AWPROT = 3'd0;

assign m_axi_empty_15_AWQOS = 4'd0;

assign m_axi_empty_15_AWREGION = 4'd0;

assign m_axi_empty_15_AWSIZE = 3'd0;

assign m_axi_empty_15_AWUSER = 1'd0;

assign m_axi_empty_15_AWVALID = 1'b0;

assign m_axi_empty_15_BREADY = 1'b0;

assign m_axi_empty_15_WDATA = 8'd0;

assign m_axi_empty_15_WID = 1'd0;

assign m_axi_empty_15_WLAST = 1'b0;

assign m_axi_empty_15_WSTRB = 1'd0;

assign m_axi_empty_15_WUSER = 1'd0;

assign m_axi_empty_15_WVALID = 1'b0;

assign p_cast2_fu_259_p1 = empty;

assign sext_ln10_fu_347_p1 = $signed(p_offset3);

assign sext_ln13_fu_363_p1 = $signed(p_offset4);

assign sext_ln16_fu_379_p1 = $signed(p_offset5);

assign sext_ln19_fu_395_p1 = $signed(p_offset6);

assign sext_ln1_fu_299_p1 = $signed(p_offset);

assign sext_ln22_fu_411_p1 = $signed(p_offset7);

assign sext_ln4_fu_315_p1 = $signed(p_offset1);

assign sext_ln7_fu_331_p1 = $signed(p_offset2);

assign tmp_1_fu_275_p3 = {{empty_17}, {7'd0}};

assign tmp_fu_263_p3 = {{empty_17}, {9'd0}};

assign zext_ln1_1_fu_283_p1 = tmp_1_fu_275_p3;

assign zext_ln1_fu_271_p1 = tmp_fu_263_p3;

endmodule //aesl_mux_load_8_1_x_s
