// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "write_image.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic write_image::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic write_image::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<11> write_image::ap_ST_fsm_state1 = "1";
const sc_lv<11> write_image::ap_ST_fsm_state2 = "10";
const sc_lv<11> write_image::ap_ST_fsm_state3 = "100";
const sc_lv<11> write_image::ap_ST_fsm_state4 = "1000";
const sc_lv<11> write_image::ap_ST_fsm_state5 = "10000";
const sc_lv<11> write_image::ap_ST_fsm_state6 = "100000";
const sc_lv<11> write_image::ap_ST_fsm_state7 = "1000000";
const sc_lv<11> write_image::ap_ST_fsm_state8 = "10000000";
const sc_lv<11> write_image::ap_ST_fsm_state9 = "100000000";
const sc_lv<11> write_image::ap_ST_fsm_state10 = "1000000000";
const sc_lv<11> write_image::ap_ST_fsm_state11 = "10000000000";
const sc_lv<32> write_image::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> write_image::ap_const_lv1_0 = "0";
const sc_lv<3> write_image::ap_const_lv3_0 = "000";
const sc_lv<2> write_image::ap_const_lv2_0 = "00";
const sc_lv<4> write_image::ap_const_lv4_0 = "0000";
const sc_lv<32> write_image::ap_const_lv32_2 = "10";
const sc_lv<32> write_image::ap_const_lv32_5 = "101";
const sc_lv<32> write_image::ap_const_lv32_A = "1010";
const sc_lv<32> write_image::ap_const_lv32_1 = "1";
const sc_lv<32> write_image::ap_const_lv32_3 = "11";
const sc_lv<32> write_image::ap_const_lv32_4 = "100";
const sc_lv<1> write_image::ap_const_lv1_1 = "1";
const sc_lv<7> write_image::ap_const_lv7_0 = "0000000";
const sc_lv<8> write_image::ap_const_lv8_0 = "00000000";
const sc_lv<32> write_image::ap_const_lv32_A0 = "10100000";
const sc_lv<2> write_image::ap_const_lv2_3 = "11";
const sc_lv<5> write_image::ap_const_lv5_0 = "00000";
const sc_lv<32> write_image::ap_const_lv32_6 = "110";
const sc_lv<7> write_image::ap_const_lv7_1 = "1";
const sc_lv<8> write_image::ap_const_lv8_1 = "1";
const sc_lv<8> write_image::ap_const_lv8_9F = "10011111";
const sc_lv<7> write_image::ap_const_lv7_77 = "1110111";
const bool write_image::ap_const_boolean_1 = true;

write_image::write_image(sc_module_name name) : sc_module(name), mVcdFile(0) {
    DWT_Accel_mux_832ibs_U121 = new DWT_Accel_mux_832ibs<1,1,16,16,16,16,16,16,16,16,32,16>("DWT_Accel_mux_832ibs_U121");
    DWT_Accel_mux_832ibs_U121->din0(C_buffer_0_q0);
    DWT_Accel_mux_832ibs_U121->din1(C_buffer_1_q0);
    DWT_Accel_mux_832ibs_U121->din2(C_buffer_2_q0);
    DWT_Accel_mux_832ibs_U121->din3(C_buffer_3_q0);
    DWT_Accel_mux_832ibs_U121->din4(C_buffer_4_q0);
    DWT_Accel_mux_832ibs_U121->din5(C_buffer_5_q0);
    DWT_Accel_mux_832ibs_U121->din6(C_buffer_6_q0);
    DWT_Accel_mux_832ibs_U121->din7(C_buffer_7_q0);
    DWT_Accel_mux_832ibs_U121->din8(zext_ln35_2_reg_430);
    DWT_Accel_mux_832ibs_U121->dout(tmp_fu_376_p10);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_C_buffer_0_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln35_8_fu_358_p1 );

    SC_METHOD(thread_C_buffer_0_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_C_buffer_1_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln35_8_fu_358_p1 );

    SC_METHOD(thread_C_buffer_1_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_C_buffer_2_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln35_8_fu_358_p1 );

    SC_METHOD(thread_C_buffer_2_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_C_buffer_3_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln35_8_fu_358_p1 );

    SC_METHOD(thread_C_buffer_3_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_C_buffer_4_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln35_8_fu_358_p1 );

    SC_METHOD(thread_C_buffer_4_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_C_buffer_5_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln35_8_fu_358_p1 );

    SC_METHOD(thread_C_buffer_5_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_C_buffer_6_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln35_8_fu_358_p1 );

    SC_METHOD(thread_C_buffer_6_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_C_buffer_7_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln35_8_fu_358_p1 );

    SC_METHOD(thread_C_buffer_7_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_add_ln35_1_fu_343_p2);
    sensitive << ( phi_ln35_1_reg_228 );

    SC_METHOD(thread_add_ln35_2_fu_267_p2);
    sensitive << ( zext_ln35_fu_251_p1 );
    sensitive << ( zext_ln35_1_fu_263_p1 );

    SC_METHOD(thread_add_ln35_3_fu_337_p2);
    sensitive << ( zext_ln35_3_fu_322_p1 );
    sensitive << ( zext_ln35_4_fu_333_p1 );

    SC_METHOD(thread_add_ln35_4_fu_353_p2);
    sensitive << ( add_ln35_3_reg_435 );
    sensitive << ( zext_ln35_7_fu_349_p1 );

    SC_METHOD(thread_add_ln35_5_fu_291_p2);
    sensitive << ( c_offset_cast_reg_403 );
    sensitive << ( zext_ln35_5_fu_287_p1 );

    SC_METHOD(thread_add_ln35_fu_306_p2);
    sensitive << ( phi_ln35_reg_216 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_c_BVALID );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( icmp_ln35_1_reg_494 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( m_axi_c_BVALID );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( icmp_ln35_1_reg_494 );

    SC_METHOD(thread_c_blk_n_AW);
    sensitive << ( m_axi_c_AWREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_c_blk_n_B);
    sensitive << ( m_axi_c_BVALID );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_c_blk_n_W);
    sensitive << ( m_axi_c_WREADY );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_c_offset_cast_fu_239_p1);
    sensitive << ( c_offset );

    SC_METHOD(thread_icmp_ln35_1_fu_397_p2);
    sensitive << ( m_axi_c_WREADY );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln35_reg_485 );
    sensitive << ( phi_ln35_reg_216 );

    SC_METHOD(thread_icmp_ln35_fu_370_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( phi_ln35_1_reg_228 );

    SC_METHOD(thread_m_axi_c_ARADDR);

    SC_METHOD(thread_m_axi_c_ARBURST);

    SC_METHOD(thread_m_axi_c_ARCACHE);

    SC_METHOD(thread_m_axi_c_ARID);

    SC_METHOD(thread_m_axi_c_ARLEN);

    SC_METHOD(thread_m_axi_c_ARLOCK);

    SC_METHOD(thread_m_axi_c_ARPROT);

    SC_METHOD(thread_m_axi_c_ARQOS);

    SC_METHOD(thread_m_axi_c_ARREGION);

    SC_METHOD(thread_m_axi_c_ARSIZE);

    SC_METHOD(thread_m_axi_c_ARUSER);

    SC_METHOD(thread_m_axi_c_ARVALID);

    SC_METHOD(thread_m_axi_c_AWADDR);
    sensitive << ( m_axi_c_AWREADY );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( c_addr_reg_419 );

    SC_METHOD(thread_m_axi_c_AWBURST);

    SC_METHOD(thread_m_axi_c_AWCACHE);

    SC_METHOD(thread_m_axi_c_AWID);

    SC_METHOD(thread_m_axi_c_AWLEN);
    sensitive << ( m_axi_c_AWREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_m_axi_c_AWLOCK);

    SC_METHOD(thread_m_axi_c_AWPROT);

    SC_METHOD(thread_m_axi_c_AWQOS);

    SC_METHOD(thread_m_axi_c_AWREGION);

    SC_METHOD(thread_m_axi_c_AWSIZE);

    SC_METHOD(thread_m_axi_c_AWUSER);

    SC_METHOD(thread_m_axi_c_AWVALID);
    sensitive << ( m_axi_c_AWREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_m_axi_c_BREADY);
    sensitive << ( m_axi_c_BVALID );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_m_axi_c_RREADY);

    SC_METHOD(thread_m_axi_c_WDATA);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_reg_489 );

    SC_METHOD(thread_m_axi_c_WID);

    SC_METHOD(thread_m_axi_c_WLAST);

    SC_METHOD(thread_m_axi_c_WSTRB);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_m_axi_c_WUSER);

    SC_METHOD(thread_m_axi_c_WVALID);
    sensitive << ( m_axi_c_WREADY );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_tmp_1_fu_243_p3);
    sensitive << ( phi_ln35_reg_216 );

    SC_METHOD(thread_tmp_2_fu_255_p3);
    sensitive << ( phi_ln35_reg_216 );

    SC_METHOD(thread_tmp_3_fu_315_p3);
    sensitive << ( lshr_ln_reg_413 );

    SC_METHOD(thread_tmp_4_fu_326_p3);
    sensitive << ( lshr_ln_reg_413 );

    SC_METHOD(thread_trunc_ln35_fu_273_p1);
    sensitive << ( phi_ln35_reg_216 );

    SC_METHOD(thread_zext_ln35_1_fu_263_p1);
    sensitive << ( tmp_2_fu_255_p3 );

    SC_METHOD(thread_zext_ln35_2_fu_312_p1);
    sensitive << ( trunc_ln35_reg_408 );

    SC_METHOD(thread_zext_ln35_3_fu_322_p1);
    sensitive << ( tmp_3_fu_315_p3 );

    SC_METHOD(thread_zext_ln35_4_fu_333_p1);
    sensitive << ( tmp_4_fu_326_p3 );

    SC_METHOD(thread_zext_ln35_5_fu_287_p1);
    sensitive << ( add_ln35_2_fu_267_p2 );

    SC_METHOD(thread_zext_ln35_6_fu_296_p1);
    sensitive << ( add_ln35_5_fu_291_p2 );

    SC_METHOD(thread_zext_ln35_7_fu_349_p1);
    sensitive << ( phi_ln35_1_reg_228 );

    SC_METHOD(thread_zext_ln35_8_fu_358_p1);
    sensitive << ( add_ln35_4_fu_353_p2 );

    SC_METHOD(thread_zext_ln35_fu_251_p1);
    sensitive << ( tmp_1_fu_243_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_c_AWREADY );
    sensitive << ( m_axi_c_WREADY );
    sensitive << ( m_axi_c_BVALID );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( icmp_ln35_reg_485 );
    sensitive << ( icmp_ln35_1_reg_494 );

    ap_CS_fsm = "00000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "write_image_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, C_buffer_0_address0, "(port)C_buffer_0_address0");
    sc_trace(mVcdFile, C_buffer_0_ce0, "(port)C_buffer_0_ce0");
    sc_trace(mVcdFile, C_buffer_0_q0, "(port)C_buffer_0_q0");
    sc_trace(mVcdFile, C_buffer_1_address0, "(port)C_buffer_1_address0");
    sc_trace(mVcdFile, C_buffer_1_ce0, "(port)C_buffer_1_ce0");
    sc_trace(mVcdFile, C_buffer_1_q0, "(port)C_buffer_1_q0");
    sc_trace(mVcdFile, C_buffer_2_address0, "(port)C_buffer_2_address0");
    sc_trace(mVcdFile, C_buffer_2_ce0, "(port)C_buffer_2_ce0");
    sc_trace(mVcdFile, C_buffer_2_q0, "(port)C_buffer_2_q0");
    sc_trace(mVcdFile, C_buffer_3_address0, "(port)C_buffer_3_address0");
    sc_trace(mVcdFile, C_buffer_3_ce0, "(port)C_buffer_3_ce0");
    sc_trace(mVcdFile, C_buffer_3_q0, "(port)C_buffer_3_q0");
    sc_trace(mVcdFile, C_buffer_4_address0, "(port)C_buffer_4_address0");
    sc_trace(mVcdFile, C_buffer_4_ce0, "(port)C_buffer_4_ce0");
    sc_trace(mVcdFile, C_buffer_4_q0, "(port)C_buffer_4_q0");
    sc_trace(mVcdFile, C_buffer_5_address0, "(port)C_buffer_5_address0");
    sc_trace(mVcdFile, C_buffer_5_ce0, "(port)C_buffer_5_ce0");
    sc_trace(mVcdFile, C_buffer_5_q0, "(port)C_buffer_5_q0");
    sc_trace(mVcdFile, C_buffer_6_address0, "(port)C_buffer_6_address0");
    sc_trace(mVcdFile, C_buffer_6_ce0, "(port)C_buffer_6_ce0");
    sc_trace(mVcdFile, C_buffer_6_q0, "(port)C_buffer_6_q0");
    sc_trace(mVcdFile, C_buffer_7_address0, "(port)C_buffer_7_address0");
    sc_trace(mVcdFile, C_buffer_7_ce0, "(port)C_buffer_7_ce0");
    sc_trace(mVcdFile, C_buffer_7_q0, "(port)C_buffer_7_q0");
    sc_trace(mVcdFile, m_axi_c_AWVALID, "(port)m_axi_c_AWVALID");
    sc_trace(mVcdFile, m_axi_c_AWREADY, "(port)m_axi_c_AWREADY");
    sc_trace(mVcdFile, m_axi_c_AWADDR, "(port)m_axi_c_AWADDR");
    sc_trace(mVcdFile, m_axi_c_AWID, "(port)m_axi_c_AWID");
    sc_trace(mVcdFile, m_axi_c_AWLEN, "(port)m_axi_c_AWLEN");
    sc_trace(mVcdFile, m_axi_c_AWSIZE, "(port)m_axi_c_AWSIZE");
    sc_trace(mVcdFile, m_axi_c_AWBURST, "(port)m_axi_c_AWBURST");
    sc_trace(mVcdFile, m_axi_c_AWLOCK, "(port)m_axi_c_AWLOCK");
    sc_trace(mVcdFile, m_axi_c_AWCACHE, "(port)m_axi_c_AWCACHE");
    sc_trace(mVcdFile, m_axi_c_AWPROT, "(port)m_axi_c_AWPROT");
    sc_trace(mVcdFile, m_axi_c_AWQOS, "(port)m_axi_c_AWQOS");
    sc_trace(mVcdFile, m_axi_c_AWREGION, "(port)m_axi_c_AWREGION");
    sc_trace(mVcdFile, m_axi_c_AWUSER, "(port)m_axi_c_AWUSER");
    sc_trace(mVcdFile, m_axi_c_WVALID, "(port)m_axi_c_WVALID");
    sc_trace(mVcdFile, m_axi_c_WREADY, "(port)m_axi_c_WREADY");
    sc_trace(mVcdFile, m_axi_c_WDATA, "(port)m_axi_c_WDATA");
    sc_trace(mVcdFile, m_axi_c_WSTRB, "(port)m_axi_c_WSTRB");
    sc_trace(mVcdFile, m_axi_c_WLAST, "(port)m_axi_c_WLAST");
    sc_trace(mVcdFile, m_axi_c_WID, "(port)m_axi_c_WID");
    sc_trace(mVcdFile, m_axi_c_WUSER, "(port)m_axi_c_WUSER");
    sc_trace(mVcdFile, m_axi_c_ARVALID, "(port)m_axi_c_ARVALID");
    sc_trace(mVcdFile, m_axi_c_ARREADY, "(port)m_axi_c_ARREADY");
    sc_trace(mVcdFile, m_axi_c_ARADDR, "(port)m_axi_c_ARADDR");
    sc_trace(mVcdFile, m_axi_c_ARID, "(port)m_axi_c_ARID");
    sc_trace(mVcdFile, m_axi_c_ARLEN, "(port)m_axi_c_ARLEN");
    sc_trace(mVcdFile, m_axi_c_ARSIZE, "(port)m_axi_c_ARSIZE");
    sc_trace(mVcdFile, m_axi_c_ARBURST, "(port)m_axi_c_ARBURST");
    sc_trace(mVcdFile, m_axi_c_ARLOCK, "(port)m_axi_c_ARLOCK");
    sc_trace(mVcdFile, m_axi_c_ARCACHE, "(port)m_axi_c_ARCACHE");
    sc_trace(mVcdFile, m_axi_c_ARPROT, "(port)m_axi_c_ARPROT");
    sc_trace(mVcdFile, m_axi_c_ARQOS, "(port)m_axi_c_ARQOS");
    sc_trace(mVcdFile, m_axi_c_ARREGION, "(port)m_axi_c_ARREGION");
    sc_trace(mVcdFile, m_axi_c_ARUSER, "(port)m_axi_c_ARUSER");
    sc_trace(mVcdFile, m_axi_c_RVALID, "(port)m_axi_c_RVALID");
    sc_trace(mVcdFile, m_axi_c_RREADY, "(port)m_axi_c_RREADY");
    sc_trace(mVcdFile, m_axi_c_RDATA, "(port)m_axi_c_RDATA");
    sc_trace(mVcdFile, m_axi_c_RLAST, "(port)m_axi_c_RLAST");
    sc_trace(mVcdFile, m_axi_c_RID, "(port)m_axi_c_RID");
    sc_trace(mVcdFile, m_axi_c_RUSER, "(port)m_axi_c_RUSER");
    sc_trace(mVcdFile, m_axi_c_RRESP, "(port)m_axi_c_RRESP");
    sc_trace(mVcdFile, m_axi_c_BVALID, "(port)m_axi_c_BVALID");
    sc_trace(mVcdFile, m_axi_c_BREADY, "(port)m_axi_c_BREADY");
    sc_trace(mVcdFile, m_axi_c_BRESP, "(port)m_axi_c_BRESP");
    sc_trace(mVcdFile, m_axi_c_BID, "(port)m_axi_c_BID");
    sc_trace(mVcdFile, m_axi_c_BUSER, "(port)m_axi_c_BUSER");
    sc_trace(mVcdFile, c_offset, "(port)c_offset");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, c_blk_n_AW, "c_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, c_blk_n_W, "c_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, c_blk_n_B, "c_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, c_offset_cast_fu_239_p1, "c_offset_cast_fu_239_p1");
    sc_trace(mVcdFile, c_offset_cast_reg_403, "c_offset_cast_reg_403");
    sc_trace(mVcdFile, trunc_ln35_fu_273_p1, "trunc_ln35_fu_273_p1");
    sc_trace(mVcdFile, trunc_ln35_reg_408, "trunc_ln35_reg_408");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, lshr_ln_reg_413, "lshr_ln_reg_413");
    sc_trace(mVcdFile, c_addr_reg_419, "c_addr_reg_419");
    sc_trace(mVcdFile, add_ln35_fu_306_p2, "add_ln35_fu_306_p2");
    sc_trace(mVcdFile, add_ln35_reg_425, "add_ln35_reg_425");
    sc_trace(mVcdFile, zext_ln35_2_fu_312_p1, "zext_ln35_2_fu_312_p1");
    sc_trace(mVcdFile, zext_ln35_2_reg_430, "zext_ln35_2_reg_430");
    sc_trace(mVcdFile, add_ln35_3_fu_337_p2, "add_ln35_3_fu_337_p2");
    sc_trace(mVcdFile, add_ln35_3_reg_435, "add_ln35_3_reg_435");
    sc_trace(mVcdFile, add_ln35_1_fu_343_p2, "add_ln35_1_fu_343_p2");
    sc_trace(mVcdFile, add_ln35_1_reg_440, "add_ln35_1_reg_440");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, icmp_ln35_fu_370_p2, "icmp_ln35_fu_370_p2");
    sc_trace(mVcdFile, icmp_ln35_reg_485, "icmp_ln35_reg_485");
    sc_trace(mVcdFile, tmp_fu_376_p10, "tmp_fu_376_p10");
    sc_trace(mVcdFile, tmp_reg_489, "tmp_reg_489");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, icmp_ln35_1_fu_397_p2, "icmp_ln35_1_fu_397_p2");
    sc_trace(mVcdFile, icmp_ln35_1_reg_494, "icmp_ln35_1_reg_494");
    sc_trace(mVcdFile, phi_ln35_reg_216, "phi_ln35_reg_216");
    sc_trace(mVcdFile, phi_ln35_1_reg_228, "phi_ln35_1_reg_228");
    sc_trace(mVcdFile, zext_ln35_8_fu_358_p1, "zext_ln35_8_fu_358_p1");
    sc_trace(mVcdFile, zext_ln35_6_fu_296_p1, "zext_ln35_6_fu_296_p1");
    sc_trace(mVcdFile, tmp_1_fu_243_p3, "tmp_1_fu_243_p3");
    sc_trace(mVcdFile, tmp_2_fu_255_p3, "tmp_2_fu_255_p3");
    sc_trace(mVcdFile, zext_ln35_fu_251_p1, "zext_ln35_fu_251_p1");
    sc_trace(mVcdFile, zext_ln35_1_fu_263_p1, "zext_ln35_1_fu_263_p1");
    sc_trace(mVcdFile, add_ln35_2_fu_267_p2, "add_ln35_2_fu_267_p2");
    sc_trace(mVcdFile, zext_ln35_5_fu_287_p1, "zext_ln35_5_fu_287_p1");
    sc_trace(mVcdFile, add_ln35_5_fu_291_p2, "add_ln35_5_fu_291_p2");
    sc_trace(mVcdFile, tmp_3_fu_315_p3, "tmp_3_fu_315_p3");
    sc_trace(mVcdFile, tmp_4_fu_326_p3, "tmp_4_fu_326_p3");
    sc_trace(mVcdFile, zext_ln35_3_fu_322_p1, "zext_ln35_3_fu_322_p1");
    sc_trace(mVcdFile, zext_ln35_4_fu_333_p1, "zext_ln35_4_fu_333_p1");
    sc_trace(mVcdFile, zext_ln35_7_fu_349_p1, "zext_ln35_7_fu_349_p1");
    sc_trace(mVcdFile, add_ln35_4_fu_353_p2, "add_ln35_4_fu_353_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

write_image::~write_image() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete DWT_Accel_mux_832ibs_U121;
}

void write_image::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(m_axi_c_WREADY.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln35_reg_485.read()))) {
        phi_ln35_1_reg_228 = add_ln35_1_reg_440.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(m_axi_c_AWREADY.read(), ap_const_logic_1))) {
        phi_ln35_1_reg_228 = ap_const_lv8_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(m_axi_c_BVALID.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln35_1_reg_494.read()))) {
        phi_ln35_reg_216 = add_ln35_reg_425.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        phi_ln35_reg_216 = ap_const_lv7_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        add_ln35_1_reg_440 = add_ln35_1_fu_343_p2.read();
        icmp_ln35_reg_485 = icmp_ln35_fu_370_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(m_axi_c_AWREADY.read(), ap_const_logic_1))) {
        add_ln35_3_reg_435 = add_ln35_3_fu_337_p2.read();
        add_ln35_reg_425 = add_ln35_fu_306_p2.read();
        zext_ln35_2_reg_430 = zext_ln35_2_fu_312_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        c_addr_reg_419 =  (sc_lv<32>) (zext_ln35_6_fu_296_p1.read());
        lshr_ln_reg_413 = phi_ln35_reg_216.read().range(6, 3);
        trunc_ln35_reg_408 = trunc_ln35_fu_273_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        c_offset_cast_reg_403 = c_offset_cast_fu_239_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(m_axi_c_WREADY.read(), ap_const_logic_1) && esl_seteq<1,1,1>(icmp_ln35_reg_485.read(), ap_const_lv1_1))) {
        icmp_ln35_1_reg_494 = icmp_ln35_1_fu_397_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        tmp_reg_489 = tmp_fu_376_p10.read();
    }
}

void write_image::thread_C_buffer_0_address0() {
    C_buffer_0_address0 =  (sc_lv<12>) (zext_ln35_8_fu_358_p1.read());
}

void write_image::thread_C_buffer_0_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        C_buffer_0_ce0 = ap_const_logic_1;
    } else {
        C_buffer_0_ce0 = ap_const_logic_0;
    }
}

void write_image::thread_C_buffer_1_address0() {
    C_buffer_1_address0 =  (sc_lv<12>) (zext_ln35_8_fu_358_p1.read());
}

void write_image::thread_C_buffer_1_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        C_buffer_1_ce0 = ap_const_logic_1;
    } else {
        C_buffer_1_ce0 = ap_const_logic_0;
    }
}

void write_image::thread_C_buffer_2_address0() {
    C_buffer_2_address0 =  (sc_lv<12>) (zext_ln35_8_fu_358_p1.read());
}

void write_image::thread_C_buffer_2_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        C_buffer_2_ce0 = ap_const_logic_1;
    } else {
        C_buffer_2_ce0 = ap_const_logic_0;
    }
}

void write_image::thread_C_buffer_3_address0() {
    C_buffer_3_address0 =  (sc_lv<12>) (zext_ln35_8_fu_358_p1.read());
}

void write_image::thread_C_buffer_3_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        C_buffer_3_ce0 = ap_const_logic_1;
    } else {
        C_buffer_3_ce0 = ap_const_logic_0;
    }
}

void write_image::thread_C_buffer_4_address0() {
    C_buffer_4_address0 =  (sc_lv<12>) (zext_ln35_8_fu_358_p1.read());
}

void write_image::thread_C_buffer_4_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        C_buffer_4_ce0 = ap_const_logic_1;
    } else {
        C_buffer_4_ce0 = ap_const_logic_0;
    }
}

void write_image::thread_C_buffer_5_address0() {
    C_buffer_5_address0 =  (sc_lv<12>) (zext_ln35_8_fu_358_p1.read());
}

void write_image::thread_C_buffer_5_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        C_buffer_5_ce0 = ap_const_logic_1;
    } else {
        C_buffer_5_ce0 = ap_const_logic_0;
    }
}

void write_image::thread_C_buffer_6_address0() {
    C_buffer_6_address0 =  (sc_lv<12>) (zext_ln35_8_fu_358_p1.read());
}

void write_image::thread_C_buffer_6_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        C_buffer_6_ce0 = ap_const_logic_1;
    } else {
        C_buffer_6_ce0 = ap_const_logic_0;
    }
}

void write_image::thread_C_buffer_7_address0() {
    C_buffer_7_address0 =  (sc_lv<12>) (zext_ln35_8_fu_358_p1.read());
}

void write_image::thread_C_buffer_7_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        C_buffer_7_ce0 = ap_const_logic_1;
    } else {
        C_buffer_7_ce0 = ap_const_logic_0;
    }
}

void write_image::thread_add_ln35_1_fu_343_p2() {
    add_ln35_1_fu_343_p2 = (!phi_ln35_1_reg_228.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(phi_ln35_1_reg_228.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void write_image::thread_add_ln35_2_fu_267_p2() {
    add_ln35_2_fu_267_p2 = (!zext_ln35_fu_251_p1.read().is_01() || !zext_ln35_1_fu_263_p1.read().is_01())? sc_lv<15>(): (sc_biguint<15>(zext_ln35_fu_251_p1.read()) + sc_biguint<15>(zext_ln35_1_fu_263_p1.read()));
}

void write_image::thread_add_ln35_3_fu_337_p2() {
    add_ln35_3_fu_337_p2 = (!zext_ln35_3_fu_322_p1.read().is_01() || !zext_ln35_4_fu_333_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(zext_ln35_3_fu_322_p1.read()) + sc_biguint<12>(zext_ln35_4_fu_333_p1.read()));
}

void write_image::thread_add_ln35_4_fu_353_p2() {
    add_ln35_4_fu_353_p2 = (!add_ln35_3_reg_435.read().is_01() || !zext_ln35_7_fu_349_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(add_ln35_3_reg_435.read()) + sc_biguint<12>(zext_ln35_7_fu_349_p1.read()));
}

void write_image::thread_add_ln35_5_fu_291_p2() {
    add_ln35_5_fu_291_p2 = (!zext_ln35_5_fu_287_p1.read().is_01() || !c_offset_cast_reg_403.read().is_01())? sc_lv<32>(): (sc_biguint<32>(zext_ln35_5_fu_287_p1.read()) + sc_biguint<32>(c_offset_cast_reg_403.read()));
}

void write_image::thread_add_ln35_fu_306_p2() {
    add_ln35_fu_306_p2 = (!ap_const_lv7_1.is_01() || !phi_ln35_reg_216.read().is_01())? sc_lv<7>(): (sc_biguint<7>(ap_const_lv7_1) + sc_biguint<7>(phi_ln35_reg_216.read()));
}

void write_image::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void write_image::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void write_image::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void write_image::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void write_image::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void write_image::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void write_image::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void write_image::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
          esl_seteq<1,1,1>(m_axi_c_BVALID.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(icmp_ln35_1_reg_494.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void write_image::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void write_image::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(m_axi_c_BVALID.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(icmp_ln35_1_reg_494.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void write_image::thread_c_blk_n_AW() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        c_blk_n_AW = m_axi_c_AWREADY.read();
    } else {
        c_blk_n_AW = ap_const_logic_1;
    }
}

void write_image::thread_c_blk_n_B() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        c_blk_n_B = m_axi_c_BVALID.read();
    } else {
        c_blk_n_B = ap_const_logic_1;
    }
}

void write_image::thread_c_blk_n_W() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        c_blk_n_W = m_axi_c_WREADY.read();
    } else {
        c_blk_n_W = ap_const_logic_1;
    }
}

void write_image::thread_c_offset_cast_fu_239_p1() {
    c_offset_cast_fu_239_p1 = esl_zext<32,31>(c_offset.read());
}

void write_image::thread_icmp_ln35_1_fu_397_p2() {
    icmp_ln35_1_fu_397_p2 = (!phi_ln35_reg_216.read().is_01() || !ap_const_lv7_77.is_01())? sc_lv<1>(): sc_lv<1>(phi_ln35_reg_216.read() == ap_const_lv7_77);
}

void write_image::thread_icmp_ln35_fu_370_p2() {
    icmp_ln35_fu_370_p2 = (!phi_ln35_1_reg_228.read().is_01() || !ap_const_lv8_9F.is_01())? sc_lv<1>(): sc_lv<1>(phi_ln35_1_reg_228.read() == ap_const_lv8_9F);
}

void write_image::thread_m_axi_c_ARADDR() {
    m_axi_c_ARADDR = ap_const_lv32_0;
}

void write_image::thread_m_axi_c_ARBURST() {
    m_axi_c_ARBURST = ap_const_lv2_0;
}

void write_image::thread_m_axi_c_ARCACHE() {
    m_axi_c_ARCACHE = ap_const_lv4_0;
}

void write_image::thread_m_axi_c_ARID() {
    m_axi_c_ARID = ap_const_lv1_0;
}

void write_image::thread_m_axi_c_ARLEN() {
    m_axi_c_ARLEN = ap_const_lv32_0;
}

void write_image::thread_m_axi_c_ARLOCK() {
    m_axi_c_ARLOCK = ap_const_lv2_0;
}

void write_image::thread_m_axi_c_ARPROT() {
    m_axi_c_ARPROT = ap_const_lv3_0;
}

void write_image::thread_m_axi_c_ARQOS() {
    m_axi_c_ARQOS = ap_const_lv4_0;
}

void write_image::thread_m_axi_c_ARREGION() {
    m_axi_c_ARREGION = ap_const_lv4_0;
}

void write_image::thread_m_axi_c_ARSIZE() {
    m_axi_c_ARSIZE = ap_const_lv3_0;
}

void write_image::thread_m_axi_c_ARUSER() {
    m_axi_c_ARUSER = ap_const_lv1_0;
}

void write_image::thread_m_axi_c_ARVALID() {
    m_axi_c_ARVALID = ap_const_logic_0;
}

void write_image::thread_m_axi_c_AWADDR() {
    m_axi_c_AWADDR = c_addr_reg_419.read();
}

void write_image::thread_m_axi_c_AWBURST() {
    m_axi_c_AWBURST = ap_const_lv2_0;
}

void write_image::thread_m_axi_c_AWCACHE() {
    m_axi_c_AWCACHE = ap_const_lv4_0;
}

void write_image::thread_m_axi_c_AWID() {
    m_axi_c_AWID = ap_const_lv1_0;
}

void write_image::thread_m_axi_c_AWLEN() {
    m_axi_c_AWLEN = ap_const_lv32_A0;
}

void write_image::thread_m_axi_c_AWLOCK() {
    m_axi_c_AWLOCK = ap_const_lv2_0;
}

void write_image::thread_m_axi_c_AWPROT() {
    m_axi_c_AWPROT = ap_const_lv3_0;
}

void write_image::thread_m_axi_c_AWQOS() {
    m_axi_c_AWQOS = ap_const_lv4_0;
}

void write_image::thread_m_axi_c_AWREGION() {
    m_axi_c_AWREGION = ap_const_lv4_0;
}

void write_image::thread_m_axi_c_AWSIZE() {
    m_axi_c_AWSIZE = ap_const_lv3_0;
}

void write_image::thread_m_axi_c_AWUSER() {
    m_axi_c_AWUSER = ap_const_lv1_0;
}

void write_image::thread_m_axi_c_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(m_axi_c_AWREADY.read(), ap_const_logic_1))) {
        m_axi_c_AWVALID = ap_const_logic_1;
    } else {
        m_axi_c_AWVALID = ap_const_logic_0;
    }
}

void write_image::thread_m_axi_c_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(m_axi_c_BVALID.read(), ap_const_logic_1))) {
        m_axi_c_BREADY = ap_const_logic_1;
    } else {
        m_axi_c_BREADY = ap_const_logic_0;
    }
}

void write_image::thread_m_axi_c_RREADY() {
    m_axi_c_RREADY = ap_const_logic_0;
}

void write_image::thread_m_axi_c_WDATA() {
    m_axi_c_WDATA = tmp_reg_489.read();
}

void write_image::thread_m_axi_c_WID() {
    m_axi_c_WID = ap_const_lv1_0;
}

void write_image::thread_m_axi_c_WLAST() {
    m_axi_c_WLAST = ap_const_logic_0;
}

void write_image::thread_m_axi_c_WSTRB() {
    m_axi_c_WSTRB = ap_const_lv2_3;
}

void write_image::thread_m_axi_c_WUSER() {
    m_axi_c_WUSER = ap_const_lv1_0;
}

void write_image::thread_m_axi_c_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(m_axi_c_WREADY.read(), ap_const_logic_1))) {
        m_axi_c_WVALID = ap_const_logic_1;
    } else {
        m_axi_c_WVALID = ap_const_logic_0;
    }
}

void write_image::thread_tmp_1_fu_243_p3() {
    tmp_1_fu_243_p3 = esl_concat<7,7>(phi_ln35_reg_216.read(), ap_const_lv7_0);
}

void write_image::thread_tmp_2_fu_255_p3() {
    tmp_2_fu_255_p3 = esl_concat<7,5>(phi_ln35_reg_216.read(), ap_const_lv5_0);
}

void write_image::thread_tmp_3_fu_315_p3() {
    tmp_3_fu_315_p3 = esl_concat<4,7>(lshr_ln_reg_413.read(), ap_const_lv7_0);
}

void write_image::thread_tmp_4_fu_326_p3() {
    tmp_4_fu_326_p3 = esl_concat<4,5>(lshr_ln_reg_413.read(), ap_const_lv5_0);
}

void write_image::thread_trunc_ln35_fu_273_p1() {
    trunc_ln35_fu_273_p1 = phi_ln35_reg_216.read().range(3-1, 0);
}

void write_image::thread_zext_ln35_1_fu_263_p1() {
    zext_ln35_1_fu_263_p1 = esl_zext<15,12>(tmp_2_fu_255_p3.read());
}

void write_image::thread_zext_ln35_2_fu_312_p1() {
    zext_ln35_2_fu_312_p1 = esl_zext<32,3>(trunc_ln35_reg_408.read());
}

void write_image::thread_zext_ln35_3_fu_322_p1() {
    zext_ln35_3_fu_322_p1 = esl_zext<12,11>(tmp_3_fu_315_p3.read());
}

void write_image::thread_zext_ln35_4_fu_333_p1() {
    zext_ln35_4_fu_333_p1 = esl_zext<12,9>(tmp_4_fu_326_p3.read());
}

void write_image::thread_zext_ln35_5_fu_287_p1() {
    zext_ln35_5_fu_287_p1 = esl_zext<32,15>(add_ln35_2_fu_267_p2.read());
}

void write_image::thread_zext_ln35_6_fu_296_p1() {
    zext_ln35_6_fu_296_p1 = esl_zext<64,32>(add_ln35_5_fu_291_p2.read());
}

void write_image::thread_zext_ln35_7_fu_349_p1() {
    zext_ln35_7_fu_349_p1 = esl_zext<12,8>(phi_ln35_1_reg_228.read());
}

void write_image::thread_zext_ln35_8_fu_358_p1() {
    zext_ln35_8_fu_358_p1 = esl_zext<64,12>(add_ln35_4_fu_353_p2.read());
}

void write_image::thread_zext_ln35_fu_251_p1() {
    zext_ln35_fu_251_p1 = esl_zext<15,14>(tmp_1_fu_243_p3.read());
}

void write_image::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(m_axi_c_AWREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(m_axi_c_WREADY.read(), ap_const_logic_1) && esl_seteq<1,1,1>(icmp_ln35_reg_485.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(m_axi_c_WREADY.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln35_reg_485.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(m_axi_c_BVALID.read(), ap_const_logic_1) && esl_seteq<1,1,1>(icmp_ln35_1_reg_494.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(m_axi_c_BVALID.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln35_1_reg_494.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXX";
            break;
    }
}

}

