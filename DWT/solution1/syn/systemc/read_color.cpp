// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "read_color.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic read_color::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic read_color::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<12> read_color::ap_ST_fsm_state1 = "1";
const sc_lv<12> read_color::ap_ST_fsm_state2 = "10";
const sc_lv<12> read_color::ap_ST_fsm_state3 = "100";
const sc_lv<12> read_color::ap_ST_fsm_state4 = "1000";
const sc_lv<12> read_color::ap_ST_fsm_state5 = "10000";
const sc_lv<12> read_color::ap_ST_fsm_state6 = "100000";
const sc_lv<12> read_color::ap_ST_fsm_state7 = "1000000";
const sc_lv<12> read_color::ap_ST_fsm_state8 = "10000000";
const sc_lv<12> read_color::ap_ST_fsm_state9 = "100000000";
const sc_lv<12> read_color::ap_ST_fsm_state10 = "1000000000";
const sc_lv<12> read_color::ap_ST_fsm_state11 = "10000000000";
const sc_lv<12> read_color::ap_ST_fsm_state12 = "100000000000";
const sc_lv<32> read_color::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> read_color::ap_const_lv1_0 = "0";
const sc_lv<3> read_color::ap_const_lv3_0 = "000";
const sc_lv<2> read_color::ap_const_lv2_0 = "00";
const sc_lv<4> read_color::ap_const_lv4_0 = "0000";
const sc_lv<16> read_color::ap_const_lv16_0 = "0000000000000000";
const sc_lv<32> read_color::ap_const_lv32_3 = "11";
const sc_lv<32> read_color::ap_const_lv32_A = "1010";
const sc_lv<32> read_color::ap_const_lv32_1 = "1";
const sc_lv<32> read_color::ap_const_lv32_2 = "10";
const sc_lv<7> read_color::ap_const_lv7_0 = "0000000";
const sc_lv<32> read_color::ap_const_lv32_B = "1011";
const sc_lv<1> read_color::ap_const_lv1_1 = "1";
const sc_lv<8> read_color::ap_const_lv8_0 = "00000000";
const sc_lv<3> read_color::ap_const_lv3_6 = "110";
const sc_lv<3> read_color::ap_const_lv3_5 = "101";
const sc_lv<3> read_color::ap_const_lv3_4 = "100";
const sc_lv<3> read_color::ap_const_lv3_3 = "11";
const sc_lv<3> read_color::ap_const_lv3_2 = "10";
const sc_lv<3> read_color::ap_const_lv3_1 = "1";
const sc_lv<3> read_color::ap_const_lv3_7 = "111";
const sc_lv<7> read_color::ap_const_lv7_1 = "1";
const sc_lv<5> read_color::ap_const_lv5_0 = "00000";
const sc_lv<32> read_color::ap_const_lv32_6 = "110";
const sc_lv<8> read_color::ap_const_lv8_1 = "1";
const sc_lv<8> read_color::ap_const_lv8_9F = "10011111";
const sc_lv<7> read_color::ap_const_lv7_77 = "1110111";
const bool read_color::ap_const_boolean_1 = true;

read_color::read_color(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_buffer_0_address0);
    sensitive << ( A_buffer_0_addr_reg_422 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_A_buffer_0_ce0);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_A_buffer_0_d0);
    sensitive << ( a_addr_read_reg_462 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_A_buffer_0_we0);
    sensitive << ( trunc_ln25_reg_402 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_A_buffer_1_address0);
    sensitive << ( A_buffer_1_addr_reg_427 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_A_buffer_1_ce0);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_A_buffer_1_d0);
    sensitive << ( a_addr_read_reg_462 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_A_buffer_1_we0);
    sensitive << ( trunc_ln25_reg_402 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_A_buffer_2_address0);
    sensitive << ( A_buffer_2_addr_reg_432 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_A_buffer_2_ce0);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_A_buffer_2_d0);
    sensitive << ( a_addr_read_reg_462 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_A_buffer_2_we0);
    sensitive << ( trunc_ln25_reg_402 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_A_buffer_3_address0);
    sensitive << ( A_buffer_3_addr_reg_437 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_A_buffer_3_ce0);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_A_buffer_3_d0);
    sensitive << ( a_addr_read_reg_462 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_A_buffer_3_we0);
    sensitive << ( trunc_ln25_reg_402 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_A_buffer_4_address0);
    sensitive << ( A_buffer_4_addr_reg_442 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_A_buffer_4_ce0);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_A_buffer_4_d0);
    sensitive << ( a_addr_read_reg_462 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_A_buffer_4_we0);
    sensitive << ( trunc_ln25_reg_402 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_A_buffer_5_address0);
    sensitive << ( A_buffer_5_addr_reg_447 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_A_buffer_5_ce0);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_A_buffer_5_d0);
    sensitive << ( a_addr_read_reg_462 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_A_buffer_5_we0);
    sensitive << ( trunc_ln25_reg_402 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_A_buffer_6_address0);
    sensitive << ( A_buffer_6_addr_reg_452 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_A_buffer_6_ce0);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_A_buffer_6_d0);
    sensitive << ( a_addr_read_reg_462 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_A_buffer_6_we0);
    sensitive << ( trunc_ln25_reg_402 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_A_buffer_7_address0);
    sensitive << ( A_buffer_7_addr_reg_457 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_A_buffer_7_ce0);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_A_buffer_7_d0);
    sensitive << ( a_addr_read_reg_462 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_A_buffer_7_we0);
    sensitive << ( trunc_ln25_reg_402 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_a_blk_n_AR);
    sensitive << ( m_axi_a_ARREADY );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_a_blk_n_R);
    sensitive << ( m_axi_a_RVALID );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_a_offset_cast_fu_236_p1);
    sensitive << ( a_offset );

    SC_METHOD(thread_add_ln25_1_fu_348_p2);
    sensitive << ( phi_ln25_1_reg_224 );

    SC_METHOD(thread_add_ln25_2_fu_270_p2);
    sensitive << ( zext_ln25_fu_254_p1 );
    sensitive << ( zext_ln25_1_fu_266_p1 );

    SC_METHOD(thread_add_ln25_3_fu_314_p2);
    sensitive << ( zext_ln25_2_fu_298_p1 );
    sensitive << ( zext_ln25_3_fu_310_p1 );

    SC_METHOD(thread_add_ln25_4_fu_324_p2);
    sensitive << ( add_ln25_2_reg_397 );
    sensitive << ( zext_ln25_5_fu_320_p1 );

    SC_METHOD(thread_add_ln25_5_fu_333_p2);
    sensitive << ( a_offset_cast_reg_387 );
    sensitive << ( zext_ln25_6_fu_329_p1 );

    SC_METHOD(thread_add_ln25_6_fu_358_p2);
    sensitive << ( add_ln25_3_reg_406 );
    sensitive << ( zext_ln25_4_fu_354_p1 );

    SC_METHOD(thread_add_ln25_fu_240_p2);
    sensitive << ( phi_ln25_reg_212 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( icmp_ln25_fu_375_p2 );
    sensitive << ( icmp_ln25_1_fu_381_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( icmp_ln25_fu_375_p2 );
    sensitive << ( icmp_ln25_1_fu_381_p2 );

    SC_METHOD(thread_icmp_ln25_1_fu_381_p2);
    sensitive << ( phi_ln25_reg_212 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( icmp_ln25_fu_375_p2 );

    SC_METHOD(thread_icmp_ln25_fu_375_p2);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( phi_ln25_1_reg_224 );

    SC_METHOD(thread_lshr_ln_fu_280_p4);
    sensitive << ( phi_ln25_reg_212 );

    SC_METHOD(thread_m_axi_a_ARADDR);
    sensitive << ( m_axi_a_ARREADY );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( a_addr_reg_411 );

    SC_METHOD(thread_m_axi_a_ARBURST);

    SC_METHOD(thread_m_axi_a_ARCACHE);

    SC_METHOD(thread_m_axi_a_ARID);

    SC_METHOD(thread_m_axi_a_ARLEN);
    sensitive << ( m_axi_a_ARREADY );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_m_axi_a_ARLOCK);

    SC_METHOD(thread_m_axi_a_ARPROT);

    SC_METHOD(thread_m_axi_a_ARQOS);

    SC_METHOD(thread_m_axi_a_ARREGION);

    SC_METHOD(thread_m_axi_a_ARSIZE);

    SC_METHOD(thread_m_axi_a_ARUSER);

    SC_METHOD(thread_m_axi_a_ARVALID);
    sensitive << ( m_axi_a_ARREADY );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_m_axi_a_AWADDR);

    SC_METHOD(thread_m_axi_a_AWBURST);

    SC_METHOD(thread_m_axi_a_AWCACHE);

    SC_METHOD(thread_m_axi_a_AWID);

    SC_METHOD(thread_m_axi_a_AWLEN);

    SC_METHOD(thread_m_axi_a_AWLOCK);

    SC_METHOD(thread_m_axi_a_AWPROT);

    SC_METHOD(thread_m_axi_a_AWQOS);

    SC_METHOD(thread_m_axi_a_AWREGION);

    SC_METHOD(thread_m_axi_a_AWSIZE);

    SC_METHOD(thread_m_axi_a_AWUSER);

    SC_METHOD(thread_m_axi_a_AWVALID);

    SC_METHOD(thread_m_axi_a_BREADY);

    SC_METHOD(thread_m_axi_a_RREADY);
    sensitive << ( m_axi_a_RVALID );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_m_axi_a_WDATA);

    SC_METHOD(thread_m_axi_a_WID);

    SC_METHOD(thread_m_axi_a_WLAST);

    SC_METHOD(thread_m_axi_a_WSTRB);

    SC_METHOD(thread_m_axi_a_WUSER);

    SC_METHOD(thread_m_axi_a_WVALID);

    SC_METHOD(thread_tmp_5_fu_258_p3);
    sensitive << ( phi_ln25_reg_212 );

    SC_METHOD(thread_tmp_6_fu_290_p3);
    sensitive << ( lshr_ln_fu_280_p4 );

    SC_METHOD(thread_tmp_7_fu_302_p3);
    sensitive << ( lshr_ln_fu_280_p4 );

    SC_METHOD(thread_tmp_fu_246_p3);
    sensitive << ( phi_ln25_reg_212 );

    SC_METHOD(thread_trunc_ln25_fu_276_p1);
    sensitive << ( phi_ln25_reg_212 );

    SC_METHOD(thread_zext_ln25_1_fu_266_p1);
    sensitive << ( tmp_5_fu_258_p3 );

    SC_METHOD(thread_zext_ln25_2_fu_298_p1);
    sensitive << ( tmp_6_fu_290_p3 );

    SC_METHOD(thread_zext_ln25_3_fu_310_p1);
    sensitive << ( tmp_7_fu_302_p3 );

    SC_METHOD(thread_zext_ln25_4_fu_354_p1);
    sensitive << ( phi_ln25_1_reg_224 );

    SC_METHOD(thread_zext_ln25_5_fu_320_p1);
    sensitive << ( phi_ln25_1_reg_224 );

    SC_METHOD(thread_zext_ln25_6_fu_329_p1);
    sensitive << ( add_ln25_4_fu_324_p2 );

    SC_METHOD(thread_zext_ln25_7_fu_338_p1);
    sensitive << ( add_ln25_5_fu_333_p2 );

    SC_METHOD(thread_zext_ln25_8_fu_363_p1);
    sensitive << ( add_ln25_6_fu_358_p2 );

    SC_METHOD(thread_zext_ln25_fu_254_p1);
    sensitive << ( tmp_fu_246_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_a_ARREADY );
    sensitive << ( m_axi_a_RVALID );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( icmp_ln25_fu_375_p2 );
    sensitive << ( icmp_ln25_1_fu_381_p2 );

    ap_CS_fsm = "000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "read_color_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_a_AWVALID, "(port)m_axi_a_AWVALID");
    sc_trace(mVcdFile, m_axi_a_AWREADY, "(port)m_axi_a_AWREADY");
    sc_trace(mVcdFile, m_axi_a_AWADDR, "(port)m_axi_a_AWADDR");
    sc_trace(mVcdFile, m_axi_a_AWID, "(port)m_axi_a_AWID");
    sc_trace(mVcdFile, m_axi_a_AWLEN, "(port)m_axi_a_AWLEN");
    sc_trace(mVcdFile, m_axi_a_AWSIZE, "(port)m_axi_a_AWSIZE");
    sc_trace(mVcdFile, m_axi_a_AWBURST, "(port)m_axi_a_AWBURST");
    sc_trace(mVcdFile, m_axi_a_AWLOCK, "(port)m_axi_a_AWLOCK");
    sc_trace(mVcdFile, m_axi_a_AWCACHE, "(port)m_axi_a_AWCACHE");
    sc_trace(mVcdFile, m_axi_a_AWPROT, "(port)m_axi_a_AWPROT");
    sc_trace(mVcdFile, m_axi_a_AWQOS, "(port)m_axi_a_AWQOS");
    sc_trace(mVcdFile, m_axi_a_AWREGION, "(port)m_axi_a_AWREGION");
    sc_trace(mVcdFile, m_axi_a_AWUSER, "(port)m_axi_a_AWUSER");
    sc_trace(mVcdFile, m_axi_a_WVALID, "(port)m_axi_a_WVALID");
    sc_trace(mVcdFile, m_axi_a_WREADY, "(port)m_axi_a_WREADY");
    sc_trace(mVcdFile, m_axi_a_WDATA, "(port)m_axi_a_WDATA");
    sc_trace(mVcdFile, m_axi_a_WSTRB, "(port)m_axi_a_WSTRB");
    sc_trace(mVcdFile, m_axi_a_WLAST, "(port)m_axi_a_WLAST");
    sc_trace(mVcdFile, m_axi_a_WID, "(port)m_axi_a_WID");
    sc_trace(mVcdFile, m_axi_a_WUSER, "(port)m_axi_a_WUSER");
    sc_trace(mVcdFile, m_axi_a_ARVALID, "(port)m_axi_a_ARVALID");
    sc_trace(mVcdFile, m_axi_a_ARREADY, "(port)m_axi_a_ARREADY");
    sc_trace(mVcdFile, m_axi_a_ARADDR, "(port)m_axi_a_ARADDR");
    sc_trace(mVcdFile, m_axi_a_ARID, "(port)m_axi_a_ARID");
    sc_trace(mVcdFile, m_axi_a_ARLEN, "(port)m_axi_a_ARLEN");
    sc_trace(mVcdFile, m_axi_a_ARSIZE, "(port)m_axi_a_ARSIZE");
    sc_trace(mVcdFile, m_axi_a_ARBURST, "(port)m_axi_a_ARBURST");
    sc_trace(mVcdFile, m_axi_a_ARLOCK, "(port)m_axi_a_ARLOCK");
    sc_trace(mVcdFile, m_axi_a_ARCACHE, "(port)m_axi_a_ARCACHE");
    sc_trace(mVcdFile, m_axi_a_ARPROT, "(port)m_axi_a_ARPROT");
    sc_trace(mVcdFile, m_axi_a_ARQOS, "(port)m_axi_a_ARQOS");
    sc_trace(mVcdFile, m_axi_a_ARREGION, "(port)m_axi_a_ARREGION");
    sc_trace(mVcdFile, m_axi_a_ARUSER, "(port)m_axi_a_ARUSER");
    sc_trace(mVcdFile, m_axi_a_RVALID, "(port)m_axi_a_RVALID");
    sc_trace(mVcdFile, m_axi_a_RREADY, "(port)m_axi_a_RREADY");
    sc_trace(mVcdFile, m_axi_a_RDATA, "(port)m_axi_a_RDATA");
    sc_trace(mVcdFile, m_axi_a_RLAST, "(port)m_axi_a_RLAST");
    sc_trace(mVcdFile, m_axi_a_RID, "(port)m_axi_a_RID");
    sc_trace(mVcdFile, m_axi_a_RUSER, "(port)m_axi_a_RUSER");
    sc_trace(mVcdFile, m_axi_a_RRESP, "(port)m_axi_a_RRESP");
    sc_trace(mVcdFile, m_axi_a_BVALID, "(port)m_axi_a_BVALID");
    sc_trace(mVcdFile, m_axi_a_BREADY, "(port)m_axi_a_BREADY");
    sc_trace(mVcdFile, m_axi_a_BRESP, "(port)m_axi_a_BRESP");
    sc_trace(mVcdFile, m_axi_a_BID, "(port)m_axi_a_BID");
    sc_trace(mVcdFile, m_axi_a_BUSER, "(port)m_axi_a_BUSER");
    sc_trace(mVcdFile, a_offset, "(port)a_offset");
    sc_trace(mVcdFile, A_buffer_0_address0, "(port)A_buffer_0_address0");
    sc_trace(mVcdFile, A_buffer_0_ce0, "(port)A_buffer_0_ce0");
    sc_trace(mVcdFile, A_buffer_0_we0, "(port)A_buffer_0_we0");
    sc_trace(mVcdFile, A_buffer_0_d0, "(port)A_buffer_0_d0");
    sc_trace(mVcdFile, A_buffer_1_address0, "(port)A_buffer_1_address0");
    sc_trace(mVcdFile, A_buffer_1_ce0, "(port)A_buffer_1_ce0");
    sc_trace(mVcdFile, A_buffer_1_we0, "(port)A_buffer_1_we0");
    sc_trace(mVcdFile, A_buffer_1_d0, "(port)A_buffer_1_d0");
    sc_trace(mVcdFile, A_buffer_2_address0, "(port)A_buffer_2_address0");
    sc_trace(mVcdFile, A_buffer_2_ce0, "(port)A_buffer_2_ce0");
    sc_trace(mVcdFile, A_buffer_2_we0, "(port)A_buffer_2_we0");
    sc_trace(mVcdFile, A_buffer_2_d0, "(port)A_buffer_2_d0");
    sc_trace(mVcdFile, A_buffer_3_address0, "(port)A_buffer_3_address0");
    sc_trace(mVcdFile, A_buffer_3_ce0, "(port)A_buffer_3_ce0");
    sc_trace(mVcdFile, A_buffer_3_we0, "(port)A_buffer_3_we0");
    sc_trace(mVcdFile, A_buffer_3_d0, "(port)A_buffer_3_d0");
    sc_trace(mVcdFile, A_buffer_4_address0, "(port)A_buffer_4_address0");
    sc_trace(mVcdFile, A_buffer_4_ce0, "(port)A_buffer_4_ce0");
    sc_trace(mVcdFile, A_buffer_4_we0, "(port)A_buffer_4_we0");
    sc_trace(mVcdFile, A_buffer_4_d0, "(port)A_buffer_4_d0");
    sc_trace(mVcdFile, A_buffer_5_address0, "(port)A_buffer_5_address0");
    sc_trace(mVcdFile, A_buffer_5_ce0, "(port)A_buffer_5_ce0");
    sc_trace(mVcdFile, A_buffer_5_we0, "(port)A_buffer_5_we0");
    sc_trace(mVcdFile, A_buffer_5_d0, "(port)A_buffer_5_d0");
    sc_trace(mVcdFile, A_buffer_6_address0, "(port)A_buffer_6_address0");
    sc_trace(mVcdFile, A_buffer_6_ce0, "(port)A_buffer_6_ce0");
    sc_trace(mVcdFile, A_buffer_6_we0, "(port)A_buffer_6_we0");
    sc_trace(mVcdFile, A_buffer_6_d0, "(port)A_buffer_6_d0");
    sc_trace(mVcdFile, A_buffer_7_address0, "(port)A_buffer_7_address0");
    sc_trace(mVcdFile, A_buffer_7_ce0, "(port)A_buffer_7_ce0");
    sc_trace(mVcdFile, A_buffer_7_we0, "(port)A_buffer_7_we0");
    sc_trace(mVcdFile, A_buffer_7_d0, "(port)A_buffer_7_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, a_blk_n_AR, "a_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, a_blk_n_R, "a_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, a_offset_cast_fu_236_p1, "a_offset_cast_fu_236_p1");
    sc_trace(mVcdFile, a_offset_cast_reg_387, "a_offset_cast_reg_387");
    sc_trace(mVcdFile, add_ln25_fu_240_p2, "add_ln25_fu_240_p2");
    sc_trace(mVcdFile, add_ln25_reg_392, "add_ln25_reg_392");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, add_ln25_2_fu_270_p2, "add_ln25_2_fu_270_p2");
    sc_trace(mVcdFile, add_ln25_2_reg_397, "add_ln25_2_reg_397");
    sc_trace(mVcdFile, trunc_ln25_fu_276_p1, "trunc_ln25_fu_276_p1");
    sc_trace(mVcdFile, trunc_ln25_reg_402, "trunc_ln25_reg_402");
    sc_trace(mVcdFile, add_ln25_3_fu_314_p2, "add_ln25_3_fu_314_p2");
    sc_trace(mVcdFile, add_ln25_3_reg_406, "add_ln25_3_reg_406");
    sc_trace(mVcdFile, a_addr_reg_411, "a_addr_reg_411");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, add_ln25_1_fu_348_p2, "add_ln25_1_fu_348_p2");
    sc_trace(mVcdFile, add_ln25_1_reg_417, "add_ln25_1_reg_417");
    sc_trace(mVcdFile, A_buffer_0_addr_reg_422, "A_buffer_0_addr_reg_422");
    sc_trace(mVcdFile, A_buffer_1_addr_reg_427, "A_buffer_1_addr_reg_427");
    sc_trace(mVcdFile, A_buffer_2_addr_reg_432, "A_buffer_2_addr_reg_432");
    sc_trace(mVcdFile, A_buffer_3_addr_reg_437, "A_buffer_3_addr_reg_437");
    sc_trace(mVcdFile, A_buffer_4_addr_reg_442, "A_buffer_4_addr_reg_442");
    sc_trace(mVcdFile, A_buffer_5_addr_reg_447, "A_buffer_5_addr_reg_447");
    sc_trace(mVcdFile, A_buffer_6_addr_reg_452, "A_buffer_6_addr_reg_452");
    sc_trace(mVcdFile, A_buffer_7_addr_reg_457, "A_buffer_7_addr_reg_457");
    sc_trace(mVcdFile, a_addr_read_reg_462, "a_addr_read_reg_462");
    sc_trace(mVcdFile, phi_ln25_reg_212, "phi_ln25_reg_212");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, icmp_ln25_fu_375_p2, "icmp_ln25_fu_375_p2");
    sc_trace(mVcdFile, icmp_ln25_1_fu_381_p2, "icmp_ln25_1_fu_381_p2");
    sc_trace(mVcdFile, phi_ln25_1_reg_224, "phi_ln25_1_reg_224");
    sc_trace(mVcdFile, zext_ln25_8_fu_363_p1, "zext_ln25_8_fu_363_p1");
    sc_trace(mVcdFile, zext_ln25_7_fu_338_p1, "zext_ln25_7_fu_338_p1");
    sc_trace(mVcdFile, tmp_fu_246_p3, "tmp_fu_246_p3");
    sc_trace(mVcdFile, tmp_5_fu_258_p3, "tmp_5_fu_258_p3");
    sc_trace(mVcdFile, zext_ln25_fu_254_p1, "zext_ln25_fu_254_p1");
    sc_trace(mVcdFile, zext_ln25_1_fu_266_p1, "zext_ln25_1_fu_266_p1");
    sc_trace(mVcdFile, lshr_ln_fu_280_p4, "lshr_ln_fu_280_p4");
    sc_trace(mVcdFile, tmp_6_fu_290_p3, "tmp_6_fu_290_p3");
    sc_trace(mVcdFile, tmp_7_fu_302_p3, "tmp_7_fu_302_p3");
    sc_trace(mVcdFile, zext_ln25_2_fu_298_p1, "zext_ln25_2_fu_298_p1");
    sc_trace(mVcdFile, zext_ln25_3_fu_310_p1, "zext_ln25_3_fu_310_p1");
    sc_trace(mVcdFile, zext_ln25_5_fu_320_p1, "zext_ln25_5_fu_320_p1");
    sc_trace(mVcdFile, add_ln25_4_fu_324_p2, "add_ln25_4_fu_324_p2");
    sc_trace(mVcdFile, zext_ln25_6_fu_329_p1, "zext_ln25_6_fu_329_p1");
    sc_trace(mVcdFile, add_ln25_5_fu_333_p2, "add_ln25_5_fu_333_p2");
    sc_trace(mVcdFile, zext_ln25_4_fu_354_p1, "zext_ln25_4_fu_354_p1");
    sc_trace(mVcdFile, add_ln25_6_fu_358_p2, "add_ln25_6_fu_358_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

read_color::~read_color() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void read_color::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_fu_375_p2.read()))) {
        phi_ln25_1_reg_224 = add_ln25_1_reg_417.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        phi_ln25_1_reg_224 = ap_const_lv8_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,1,1>(icmp_ln25_fu_375_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_1_fu_381_p2.read()))) {
        phi_ln25_reg_212 = add_ln25_reg_392.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        phi_ln25_reg_212 = ap_const_lv7_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(m_axi_a_RVALID.read(), ap_const_logic_1))) {
        A_buffer_0_addr_reg_422 =  (sc_lv<12>) (zext_ln25_8_fu_363_p1.read());
        A_buffer_1_addr_reg_427 =  (sc_lv<12>) (zext_ln25_8_fu_363_p1.read());
        A_buffer_2_addr_reg_432 =  (sc_lv<12>) (zext_ln25_8_fu_363_p1.read());
        A_buffer_3_addr_reg_437 =  (sc_lv<12>) (zext_ln25_8_fu_363_p1.read());
        A_buffer_4_addr_reg_442 =  (sc_lv<12>) (zext_ln25_8_fu_363_p1.read());
        A_buffer_5_addr_reg_447 =  (sc_lv<12>) (zext_ln25_8_fu_363_p1.read());
        A_buffer_6_addr_reg_452 =  (sc_lv<12>) (zext_ln25_8_fu_363_p1.read());
        A_buffer_7_addr_reg_457 =  (sc_lv<12>) (zext_ln25_8_fu_363_p1.read());
        a_addr_read_reg_462 = m_axi_a_RDATA.read();
        add_ln25_1_reg_417 = add_ln25_1_fu_348_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        a_addr_reg_411 =  (sc_lv<32>) (zext_ln25_7_fu_338_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        a_offset_cast_reg_387 = a_offset_cast_fu_236_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        add_ln25_2_reg_397 = add_ln25_2_fu_270_p2.read();
        add_ln25_3_reg_406 = add_ln25_3_fu_314_p2.read();
        add_ln25_reg_392 = add_ln25_fu_240_p2.read();
        trunc_ln25_reg_402 = trunc_ln25_fu_276_p1.read();
    }
}

void read_color::thread_A_buffer_0_address0() {
    A_buffer_0_address0 = A_buffer_0_addr_reg_422.read();
}

void read_color::thread_A_buffer_0_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        A_buffer_0_ce0 = ap_const_logic_1;
    } else {
        A_buffer_0_ce0 = ap_const_logic_0;
    }
}

void read_color::thread_A_buffer_0_d0() {
    A_buffer_0_d0 = a_addr_read_reg_462.read();
}

void read_color::thread_A_buffer_0_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,3,3>(ap_const_lv3_0, trunc_ln25_reg_402.read()))) {
        A_buffer_0_we0 = ap_const_logic_1;
    } else {
        A_buffer_0_we0 = ap_const_logic_0;
    }
}

void read_color::thread_A_buffer_1_address0() {
    A_buffer_1_address0 = A_buffer_1_addr_reg_427.read();
}

void read_color::thread_A_buffer_1_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        A_buffer_1_ce0 = ap_const_logic_1;
    } else {
        A_buffer_1_ce0 = ap_const_logic_0;
    }
}

void read_color::thread_A_buffer_1_d0() {
    A_buffer_1_d0 = a_addr_read_reg_462.read();
}

void read_color::thread_A_buffer_1_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,3,3>(trunc_ln25_reg_402.read(), ap_const_lv3_1))) {
        A_buffer_1_we0 = ap_const_logic_1;
    } else {
        A_buffer_1_we0 = ap_const_logic_0;
    }
}

void read_color::thread_A_buffer_2_address0() {
    A_buffer_2_address0 = A_buffer_2_addr_reg_432.read();
}

void read_color::thread_A_buffer_2_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        A_buffer_2_ce0 = ap_const_logic_1;
    } else {
        A_buffer_2_ce0 = ap_const_logic_0;
    }
}

void read_color::thread_A_buffer_2_d0() {
    A_buffer_2_d0 = a_addr_read_reg_462.read();
}

void read_color::thread_A_buffer_2_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,3,3>(trunc_ln25_reg_402.read(), ap_const_lv3_2))) {
        A_buffer_2_we0 = ap_const_logic_1;
    } else {
        A_buffer_2_we0 = ap_const_logic_0;
    }
}

void read_color::thread_A_buffer_3_address0() {
    A_buffer_3_address0 = A_buffer_3_addr_reg_437.read();
}

void read_color::thread_A_buffer_3_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        A_buffer_3_ce0 = ap_const_logic_1;
    } else {
        A_buffer_3_ce0 = ap_const_logic_0;
    }
}

void read_color::thread_A_buffer_3_d0() {
    A_buffer_3_d0 = a_addr_read_reg_462.read();
}

void read_color::thread_A_buffer_3_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,3,3>(trunc_ln25_reg_402.read(), ap_const_lv3_3))) {
        A_buffer_3_we0 = ap_const_logic_1;
    } else {
        A_buffer_3_we0 = ap_const_logic_0;
    }
}

void read_color::thread_A_buffer_4_address0() {
    A_buffer_4_address0 = A_buffer_4_addr_reg_442.read();
}

void read_color::thread_A_buffer_4_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        A_buffer_4_ce0 = ap_const_logic_1;
    } else {
        A_buffer_4_ce0 = ap_const_logic_0;
    }
}

void read_color::thread_A_buffer_4_d0() {
    A_buffer_4_d0 = a_addr_read_reg_462.read();
}

void read_color::thread_A_buffer_4_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,3,3>(trunc_ln25_reg_402.read(), ap_const_lv3_4))) {
        A_buffer_4_we0 = ap_const_logic_1;
    } else {
        A_buffer_4_we0 = ap_const_logic_0;
    }
}

void read_color::thread_A_buffer_5_address0() {
    A_buffer_5_address0 = A_buffer_5_addr_reg_447.read();
}

void read_color::thread_A_buffer_5_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        A_buffer_5_ce0 = ap_const_logic_1;
    } else {
        A_buffer_5_ce0 = ap_const_logic_0;
    }
}

void read_color::thread_A_buffer_5_d0() {
    A_buffer_5_d0 = a_addr_read_reg_462.read();
}

void read_color::thread_A_buffer_5_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,3,3>(trunc_ln25_reg_402.read(), ap_const_lv3_5))) {
        A_buffer_5_we0 = ap_const_logic_1;
    } else {
        A_buffer_5_we0 = ap_const_logic_0;
    }
}

void read_color::thread_A_buffer_6_address0() {
    A_buffer_6_address0 = A_buffer_6_addr_reg_452.read();
}

void read_color::thread_A_buffer_6_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        A_buffer_6_ce0 = ap_const_logic_1;
    } else {
        A_buffer_6_ce0 = ap_const_logic_0;
    }
}

void read_color::thread_A_buffer_6_d0() {
    A_buffer_6_d0 = a_addr_read_reg_462.read();
}

void read_color::thread_A_buffer_6_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,3,3>(trunc_ln25_reg_402.read(), ap_const_lv3_6))) {
        A_buffer_6_we0 = ap_const_logic_1;
    } else {
        A_buffer_6_we0 = ap_const_logic_0;
    }
}

void read_color::thread_A_buffer_7_address0() {
    A_buffer_7_address0 = A_buffer_7_addr_reg_457.read();
}

void read_color::thread_A_buffer_7_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        A_buffer_7_ce0 = ap_const_logic_1;
    } else {
        A_buffer_7_ce0 = ap_const_logic_0;
    }
}

void read_color::thread_A_buffer_7_d0() {
    A_buffer_7_d0 = a_addr_read_reg_462.read();
}

void read_color::thread_A_buffer_7_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,3,3>(trunc_ln25_reg_402.read(), ap_const_lv3_7))) {
        A_buffer_7_we0 = ap_const_logic_1;
    } else {
        A_buffer_7_we0 = ap_const_logic_0;
    }
}

void read_color::thread_a_blk_n_AR() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        a_blk_n_AR = m_axi_a_ARREADY.read();
    } else {
        a_blk_n_AR = ap_const_logic_1;
    }
}

void read_color::thread_a_blk_n_R() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        a_blk_n_R = m_axi_a_RVALID.read();
    } else {
        a_blk_n_R = ap_const_logic_1;
    }
}

void read_color::thread_a_offset_cast_fu_236_p1() {
    a_offset_cast_fu_236_p1 = esl_zext<32,31>(a_offset.read());
}

void read_color::thread_add_ln25_1_fu_348_p2() {
    add_ln25_1_fu_348_p2 = (!phi_ln25_1_reg_224.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(phi_ln25_1_reg_224.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void read_color::thread_add_ln25_2_fu_270_p2() {
    add_ln25_2_fu_270_p2 = (!zext_ln25_fu_254_p1.read().is_01() || !zext_ln25_1_fu_266_p1.read().is_01())? sc_lv<15>(): (sc_biguint<15>(zext_ln25_fu_254_p1.read()) + sc_biguint<15>(zext_ln25_1_fu_266_p1.read()));
}

void read_color::thread_add_ln25_3_fu_314_p2() {
    add_ln25_3_fu_314_p2 = (!zext_ln25_2_fu_298_p1.read().is_01() || !zext_ln25_3_fu_310_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(zext_ln25_2_fu_298_p1.read()) + sc_biguint<12>(zext_ln25_3_fu_310_p1.read()));
}

void read_color::thread_add_ln25_4_fu_324_p2() {
    add_ln25_4_fu_324_p2 = (!add_ln25_2_reg_397.read().is_01() || !zext_ln25_5_fu_320_p1.read().is_01())? sc_lv<15>(): (sc_biguint<15>(add_ln25_2_reg_397.read()) + sc_biguint<15>(zext_ln25_5_fu_320_p1.read()));
}

void read_color::thread_add_ln25_5_fu_333_p2() {
    add_ln25_5_fu_333_p2 = (!a_offset_cast_reg_387.read().is_01() || !zext_ln25_6_fu_329_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(a_offset_cast_reg_387.read()) + sc_biguint<32>(zext_ln25_6_fu_329_p1.read()));
}

void read_color::thread_add_ln25_6_fu_358_p2() {
    add_ln25_6_fu_358_p2 = (!add_ln25_3_reg_406.read().is_01() || !zext_ln25_4_fu_354_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(add_ln25_3_reg_406.read()) + sc_biguint<12>(zext_ln25_4_fu_354_p1.read()));
}

void read_color::thread_add_ln25_fu_240_p2() {
    add_ln25_fu_240_p2 = (!ap_const_lv7_1.is_01() || !phi_ln25_reg_212.read().is_01())? sc_lv<7>(): (sc_biguint<7>(ap_const_lv7_1) + sc_biguint<7>(phi_ln25_reg_212.read()));
}

void read_color::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void read_color::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void read_color::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void read_color::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void read_color::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void read_color::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void read_color::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
          esl_seteq<1,1,1>(icmp_ln25_fu_375_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln25_1_fu_381_p2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void read_color::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void read_color::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,1,1>(icmp_ln25_fu_375_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln25_1_fu_381_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void read_color::thread_icmp_ln25_1_fu_381_p2() {
    icmp_ln25_1_fu_381_p2 = (!phi_ln25_reg_212.read().is_01() || !ap_const_lv7_77.is_01())? sc_lv<1>(): sc_lv<1>(phi_ln25_reg_212.read() == ap_const_lv7_77);
}

void read_color::thread_icmp_ln25_fu_375_p2() {
    icmp_ln25_fu_375_p2 = (!phi_ln25_1_reg_224.read().is_01() || !ap_const_lv8_9F.is_01())? sc_lv<1>(): sc_lv<1>(phi_ln25_1_reg_224.read() == ap_const_lv8_9F);
}

void read_color::thread_lshr_ln_fu_280_p4() {
    lshr_ln_fu_280_p4 = phi_ln25_reg_212.read().range(6, 3);
}

void read_color::thread_m_axi_a_ARADDR() {
    m_axi_a_ARADDR = a_addr_reg_411.read();
}

void read_color::thread_m_axi_a_ARBURST() {
    m_axi_a_ARBURST = ap_const_lv2_0;
}

void read_color::thread_m_axi_a_ARCACHE() {
    m_axi_a_ARCACHE = ap_const_lv4_0;
}

void read_color::thread_m_axi_a_ARID() {
    m_axi_a_ARID = ap_const_lv1_0;
}

void read_color::thread_m_axi_a_ARLEN() {
    m_axi_a_ARLEN = ap_const_lv32_1;
}

void read_color::thread_m_axi_a_ARLOCK() {
    m_axi_a_ARLOCK = ap_const_lv2_0;
}

void read_color::thread_m_axi_a_ARPROT() {
    m_axi_a_ARPROT = ap_const_lv3_0;
}

void read_color::thread_m_axi_a_ARQOS() {
    m_axi_a_ARQOS = ap_const_lv4_0;
}

void read_color::thread_m_axi_a_ARREGION() {
    m_axi_a_ARREGION = ap_const_lv4_0;
}

void read_color::thread_m_axi_a_ARSIZE() {
    m_axi_a_ARSIZE = ap_const_lv3_0;
}

void read_color::thread_m_axi_a_ARUSER() {
    m_axi_a_ARUSER = ap_const_lv1_0;
}

void read_color::thread_m_axi_a_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(m_axi_a_ARREADY.read(), ap_const_logic_1))) {
        m_axi_a_ARVALID = ap_const_logic_1;
    } else {
        m_axi_a_ARVALID = ap_const_logic_0;
    }
}

void read_color::thread_m_axi_a_AWADDR() {
    m_axi_a_AWADDR = ap_const_lv32_0;
}

void read_color::thread_m_axi_a_AWBURST() {
    m_axi_a_AWBURST = ap_const_lv2_0;
}

void read_color::thread_m_axi_a_AWCACHE() {
    m_axi_a_AWCACHE = ap_const_lv4_0;
}

void read_color::thread_m_axi_a_AWID() {
    m_axi_a_AWID = ap_const_lv1_0;
}

void read_color::thread_m_axi_a_AWLEN() {
    m_axi_a_AWLEN = ap_const_lv32_0;
}

void read_color::thread_m_axi_a_AWLOCK() {
    m_axi_a_AWLOCK = ap_const_lv2_0;
}

void read_color::thread_m_axi_a_AWPROT() {
    m_axi_a_AWPROT = ap_const_lv3_0;
}

void read_color::thread_m_axi_a_AWQOS() {
    m_axi_a_AWQOS = ap_const_lv4_0;
}

void read_color::thread_m_axi_a_AWREGION() {
    m_axi_a_AWREGION = ap_const_lv4_0;
}

void read_color::thread_m_axi_a_AWSIZE() {
    m_axi_a_AWSIZE = ap_const_lv3_0;
}

void read_color::thread_m_axi_a_AWUSER() {
    m_axi_a_AWUSER = ap_const_lv1_0;
}

void read_color::thread_m_axi_a_AWVALID() {
    m_axi_a_AWVALID = ap_const_logic_0;
}

void read_color::thread_m_axi_a_BREADY() {
    m_axi_a_BREADY = ap_const_logic_0;
}

void read_color::thread_m_axi_a_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(m_axi_a_RVALID.read(), ap_const_logic_1))) {
        m_axi_a_RREADY = ap_const_logic_1;
    } else {
        m_axi_a_RREADY = ap_const_logic_0;
    }
}

void read_color::thread_m_axi_a_WDATA() {
    m_axi_a_WDATA = ap_const_lv16_0;
}

void read_color::thread_m_axi_a_WID() {
    m_axi_a_WID = ap_const_lv1_0;
}

void read_color::thread_m_axi_a_WLAST() {
    m_axi_a_WLAST = ap_const_logic_0;
}

void read_color::thread_m_axi_a_WSTRB() {
    m_axi_a_WSTRB = ap_const_lv2_0;
}

void read_color::thread_m_axi_a_WUSER() {
    m_axi_a_WUSER = ap_const_lv1_0;
}

void read_color::thread_m_axi_a_WVALID() {
    m_axi_a_WVALID = ap_const_logic_0;
}

void read_color::thread_tmp_5_fu_258_p3() {
    tmp_5_fu_258_p3 = esl_concat<7,5>(phi_ln25_reg_212.read(), ap_const_lv5_0);
}

void read_color::thread_tmp_6_fu_290_p3() {
    tmp_6_fu_290_p3 = esl_concat<4,7>(lshr_ln_fu_280_p4.read(), ap_const_lv7_0);
}

void read_color::thread_tmp_7_fu_302_p3() {
    tmp_7_fu_302_p3 = esl_concat<4,5>(lshr_ln_fu_280_p4.read(), ap_const_lv5_0);
}

void read_color::thread_tmp_fu_246_p3() {
    tmp_fu_246_p3 = esl_concat<7,7>(phi_ln25_reg_212.read(), ap_const_lv7_0);
}

void read_color::thread_trunc_ln25_fu_276_p1() {
    trunc_ln25_fu_276_p1 = phi_ln25_reg_212.read().range(3-1, 0);
}

void read_color::thread_zext_ln25_1_fu_266_p1() {
    zext_ln25_1_fu_266_p1 = esl_zext<15,12>(tmp_5_fu_258_p3.read());
}

void read_color::thread_zext_ln25_2_fu_298_p1() {
    zext_ln25_2_fu_298_p1 = esl_zext<12,11>(tmp_6_fu_290_p3.read());
}

void read_color::thread_zext_ln25_3_fu_310_p1() {
    zext_ln25_3_fu_310_p1 = esl_zext<12,9>(tmp_7_fu_302_p3.read());
}

void read_color::thread_zext_ln25_4_fu_354_p1() {
    zext_ln25_4_fu_354_p1 = esl_zext<12,8>(phi_ln25_1_reg_224.read());
}

void read_color::thread_zext_ln25_5_fu_320_p1() {
    zext_ln25_5_fu_320_p1 = esl_zext<15,8>(phi_ln25_1_reg_224.read());
}

void read_color::thread_zext_ln25_6_fu_329_p1() {
    zext_ln25_6_fu_329_p1 = esl_zext<32,15>(add_ln25_4_fu_324_p2.read());
}

void read_color::thread_zext_ln25_7_fu_338_p1() {
    zext_ln25_7_fu_338_p1 = esl_zext<64,32>(add_ln25_5_fu_333_p2.read());
}

void read_color::thread_zext_ln25_8_fu_363_p1() {
    zext_ln25_8_fu_363_p1 = esl_zext<64,12>(add_ln25_6_fu_358_p2.read());
}

void read_color::thread_zext_ln25_fu_254_p1() {
    zext_ln25_fu_254_p1 = esl_zext<15,14>(tmp_fu_246_p3.read());
}

void read_color::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(m_axi_a_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(m_axi_a_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(icmp_ln25_fu_375_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln25_1_fu_381_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(icmp_ln25_fu_375_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_1_fu_381_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXX";
            break;
    }
}

}

