// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _write_image_HH_
#define _write_image_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "DWT_Accel_mux_832ibs.h"

namespace ap_rtl {

struct write_image : public sc_module {
    // Port declarations 76
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<12> > C_buffer_0_address0;
    sc_out< sc_logic > C_buffer_0_ce0;
    sc_in< sc_lv<16> > C_buffer_0_q0;
    sc_out< sc_lv<12> > C_buffer_1_address0;
    sc_out< sc_logic > C_buffer_1_ce0;
    sc_in< sc_lv<16> > C_buffer_1_q0;
    sc_out< sc_lv<12> > C_buffer_2_address0;
    sc_out< sc_logic > C_buffer_2_ce0;
    sc_in< sc_lv<16> > C_buffer_2_q0;
    sc_out< sc_lv<12> > C_buffer_3_address0;
    sc_out< sc_logic > C_buffer_3_ce0;
    sc_in< sc_lv<16> > C_buffer_3_q0;
    sc_out< sc_lv<12> > C_buffer_4_address0;
    sc_out< sc_logic > C_buffer_4_ce0;
    sc_in< sc_lv<16> > C_buffer_4_q0;
    sc_out< sc_lv<12> > C_buffer_5_address0;
    sc_out< sc_logic > C_buffer_5_ce0;
    sc_in< sc_lv<16> > C_buffer_5_q0;
    sc_out< sc_lv<12> > C_buffer_6_address0;
    sc_out< sc_logic > C_buffer_6_ce0;
    sc_in< sc_lv<16> > C_buffer_6_q0;
    sc_out< sc_lv<12> > C_buffer_7_address0;
    sc_out< sc_logic > C_buffer_7_ce0;
    sc_in< sc_lv<16> > C_buffer_7_q0;
    sc_out< sc_logic > m_axi_c_AWVALID;
    sc_in< sc_logic > m_axi_c_AWREADY;
    sc_out< sc_lv<32> > m_axi_c_AWADDR;
    sc_out< sc_lv<1> > m_axi_c_AWID;
    sc_out< sc_lv<32> > m_axi_c_AWLEN;
    sc_out< sc_lv<3> > m_axi_c_AWSIZE;
    sc_out< sc_lv<2> > m_axi_c_AWBURST;
    sc_out< sc_lv<2> > m_axi_c_AWLOCK;
    sc_out< sc_lv<4> > m_axi_c_AWCACHE;
    sc_out< sc_lv<3> > m_axi_c_AWPROT;
    sc_out< sc_lv<4> > m_axi_c_AWQOS;
    sc_out< sc_lv<4> > m_axi_c_AWREGION;
    sc_out< sc_lv<1> > m_axi_c_AWUSER;
    sc_out< sc_logic > m_axi_c_WVALID;
    sc_in< sc_logic > m_axi_c_WREADY;
    sc_out< sc_lv<16> > m_axi_c_WDATA;
    sc_out< sc_lv<2> > m_axi_c_WSTRB;
    sc_out< sc_logic > m_axi_c_WLAST;
    sc_out< sc_lv<1> > m_axi_c_WID;
    sc_out< sc_lv<1> > m_axi_c_WUSER;
    sc_out< sc_logic > m_axi_c_ARVALID;
    sc_in< sc_logic > m_axi_c_ARREADY;
    sc_out< sc_lv<32> > m_axi_c_ARADDR;
    sc_out< sc_lv<1> > m_axi_c_ARID;
    sc_out< sc_lv<32> > m_axi_c_ARLEN;
    sc_out< sc_lv<3> > m_axi_c_ARSIZE;
    sc_out< sc_lv<2> > m_axi_c_ARBURST;
    sc_out< sc_lv<2> > m_axi_c_ARLOCK;
    sc_out< sc_lv<4> > m_axi_c_ARCACHE;
    sc_out< sc_lv<3> > m_axi_c_ARPROT;
    sc_out< sc_lv<4> > m_axi_c_ARQOS;
    sc_out< sc_lv<4> > m_axi_c_ARREGION;
    sc_out< sc_lv<1> > m_axi_c_ARUSER;
    sc_in< sc_logic > m_axi_c_RVALID;
    sc_out< sc_logic > m_axi_c_RREADY;
    sc_in< sc_lv<16> > m_axi_c_RDATA;
    sc_in< sc_logic > m_axi_c_RLAST;
    sc_in< sc_lv<1> > m_axi_c_RID;
    sc_in< sc_lv<1> > m_axi_c_RUSER;
    sc_in< sc_lv<2> > m_axi_c_RRESP;
    sc_in< sc_logic > m_axi_c_BVALID;
    sc_out< sc_logic > m_axi_c_BREADY;
    sc_in< sc_lv<2> > m_axi_c_BRESP;
    sc_in< sc_lv<1> > m_axi_c_BID;
    sc_in< sc_lv<1> > m_axi_c_BUSER;
    sc_in< sc_lv<31> > c_offset;


    // Module declarations
    write_image(sc_module_name name);
    SC_HAS_PROCESS(write_image);

    ~write_image();

    sc_trace_file* mVcdFile;

    DWT_Accel_mux_832ibs<1,1,16,16,16,16,16,16,16,16,32,16>* DWT_Accel_mux_832ibs_U121;
    sc_signal< sc_lv<11> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > c_blk_n_AW;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > c_blk_n_W;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > c_blk_n_B;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<32> > c_offset_cast_fu_239_p1;
    sc_signal< sc_lv<32> > c_offset_cast_reg_403;
    sc_signal< sc_lv<3> > trunc_ln35_fu_273_p1;
    sc_signal< sc_lv<3> > trunc_ln35_reg_408;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<4> > lshr_ln_reg_413;
    sc_signal< sc_lv<32> > c_addr_reg_419;
    sc_signal< sc_lv<7> > add_ln35_fu_306_p2;
    sc_signal< sc_lv<7> > add_ln35_reg_425;
    sc_signal< sc_lv<32> > zext_ln35_2_fu_312_p1;
    sc_signal< sc_lv<32> > zext_ln35_2_reg_430;
    sc_signal< sc_lv<12> > add_ln35_3_fu_337_p2;
    sc_signal< sc_lv<12> > add_ln35_3_reg_435;
    sc_signal< sc_lv<8> > add_ln35_1_fu_343_p2;
    sc_signal< sc_lv<8> > add_ln35_1_reg_440;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > icmp_ln35_fu_370_p2;
    sc_signal< sc_lv<1> > icmp_ln35_reg_485;
    sc_signal< sc_lv<16> > tmp_fu_376_p10;
    sc_signal< sc_lv<16> > tmp_reg_489;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > icmp_ln35_1_fu_397_p2;
    sc_signal< sc_lv<1> > icmp_ln35_1_reg_494;
    sc_signal< sc_lv<7> > phi_ln35_reg_216;
    sc_signal< sc_lv<8> > phi_ln35_1_reg_228;
    sc_signal< sc_lv<64> > zext_ln35_8_fu_358_p1;
    sc_signal< sc_lv<64> > zext_ln35_6_fu_296_p1;
    sc_signal< sc_lv<14> > tmp_1_fu_243_p3;
    sc_signal< sc_lv<12> > tmp_2_fu_255_p3;
    sc_signal< sc_lv<15> > zext_ln35_fu_251_p1;
    sc_signal< sc_lv<15> > zext_ln35_1_fu_263_p1;
    sc_signal< sc_lv<15> > add_ln35_2_fu_267_p2;
    sc_signal< sc_lv<32> > zext_ln35_5_fu_287_p1;
    sc_signal< sc_lv<32> > add_ln35_5_fu_291_p2;
    sc_signal< sc_lv<11> > tmp_3_fu_315_p3;
    sc_signal< sc_lv<9> > tmp_4_fu_326_p3;
    sc_signal< sc_lv<12> > zext_ln35_3_fu_322_p1;
    sc_signal< sc_lv<12> > zext_ln35_4_fu_333_p1;
    sc_signal< sc_lv<12> > zext_ln35_7_fu_349_p1;
    sc_signal< sc_lv<12> > add_ln35_4_fu_353_p2;
    sc_signal< sc_lv<11> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<11> ap_ST_fsm_state1;
    static const sc_lv<11> ap_ST_fsm_state2;
    static const sc_lv<11> ap_ST_fsm_state3;
    static const sc_lv<11> ap_ST_fsm_state4;
    static const sc_lv<11> ap_ST_fsm_state5;
    static const sc_lv<11> ap_ST_fsm_state6;
    static const sc_lv<11> ap_ST_fsm_state7;
    static const sc_lv<11> ap_ST_fsm_state8;
    static const sc_lv<11> ap_ST_fsm_state9;
    static const sc_lv<11> ap_ST_fsm_state10;
    static const sc_lv<11> ap_ST_fsm_state11;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_A0;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<8> ap_const_lv8_9F;
    static const sc_lv<7> ap_const_lv7_77;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_C_buffer_0_address0();
    void thread_C_buffer_0_ce0();
    void thread_C_buffer_1_address0();
    void thread_C_buffer_1_ce0();
    void thread_C_buffer_2_address0();
    void thread_C_buffer_2_ce0();
    void thread_C_buffer_3_address0();
    void thread_C_buffer_3_ce0();
    void thread_C_buffer_4_address0();
    void thread_C_buffer_4_ce0();
    void thread_C_buffer_5_address0();
    void thread_C_buffer_5_ce0();
    void thread_C_buffer_6_address0();
    void thread_C_buffer_6_ce0();
    void thread_C_buffer_7_address0();
    void thread_C_buffer_7_ce0();
    void thread_add_ln35_1_fu_343_p2();
    void thread_add_ln35_2_fu_267_p2();
    void thread_add_ln35_3_fu_337_p2();
    void thread_add_ln35_4_fu_353_p2();
    void thread_add_ln35_5_fu_291_p2();
    void thread_add_ln35_fu_306_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_c_blk_n_AW();
    void thread_c_blk_n_B();
    void thread_c_blk_n_W();
    void thread_c_offset_cast_fu_239_p1();
    void thread_icmp_ln35_1_fu_397_p2();
    void thread_icmp_ln35_fu_370_p2();
    void thread_m_axi_c_ARADDR();
    void thread_m_axi_c_ARBURST();
    void thread_m_axi_c_ARCACHE();
    void thread_m_axi_c_ARID();
    void thread_m_axi_c_ARLEN();
    void thread_m_axi_c_ARLOCK();
    void thread_m_axi_c_ARPROT();
    void thread_m_axi_c_ARQOS();
    void thread_m_axi_c_ARREGION();
    void thread_m_axi_c_ARSIZE();
    void thread_m_axi_c_ARUSER();
    void thread_m_axi_c_ARVALID();
    void thread_m_axi_c_AWADDR();
    void thread_m_axi_c_AWBURST();
    void thread_m_axi_c_AWCACHE();
    void thread_m_axi_c_AWID();
    void thread_m_axi_c_AWLEN();
    void thread_m_axi_c_AWLOCK();
    void thread_m_axi_c_AWPROT();
    void thread_m_axi_c_AWQOS();
    void thread_m_axi_c_AWREGION();
    void thread_m_axi_c_AWSIZE();
    void thread_m_axi_c_AWUSER();
    void thread_m_axi_c_AWVALID();
    void thread_m_axi_c_BREADY();
    void thread_m_axi_c_RREADY();
    void thread_m_axi_c_WDATA();
    void thread_m_axi_c_WID();
    void thread_m_axi_c_WLAST();
    void thread_m_axi_c_WSTRB();
    void thread_m_axi_c_WUSER();
    void thread_m_axi_c_WVALID();
    void thread_tmp_1_fu_243_p3();
    void thread_tmp_2_fu_255_p3();
    void thread_tmp_3_fu_315_p3();
    void thread_tmp_4_fu_326_p3();
    void thread_trunc_ln35_fu_273_p1();
    void thread_zext_ln35_1_fu_263_p1();
    void thread_zext_ln35_2_fu_312_p1();
    void thread_zext_ln35_3_fu_322_p1();
    void thread_zext_ln35_4_fu_333_p1();
    void thread_zext_ln35_5_fu_287_p1();
    void thread_zext_ln35_6_fu_296_p1();
    void thread_zext_ln35_7_fu_349_p1();
    void thread_zext_ln35_8_fu_358_p1();
    void thread_zext_ln35_fu_251_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
