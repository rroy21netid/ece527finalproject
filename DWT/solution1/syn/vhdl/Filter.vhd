-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Filter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    A_0_ce0 : OUT STD_LOGIC;
    A_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    A_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    A_1_ce0 : OUT STD_LOGIC;
    A_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    A_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    A_2_ce0 : OUT STD_LOGIC;
    A_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    A_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    A_3_ce0 : OUT STD_LOGIC;
    A_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    A_4_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    A_4_ce0 : OUT STD_LOGIC;
    A_4_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    A_5_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    A_5_ce0 : OUT STD_LOGIC;
    A_5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    A_6_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    A_6_ce0 : OUT STD_LOGIC;
    A_6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    A_7_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    A_7_ce0 : OUT STD_LOGIC;
    A_7_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    B_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    B_0_ce0 : OUT STD_LOGIC;
    B_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    B_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    B_1_ce0 : OUT STD_LOGIC;
    B_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    B_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    B_2_ce0 : OUT STD_LOGIC;
    B_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    B_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    B_3_ce0 : OUT STD_LOGIC;
    B_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    B_4_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    B_4_ce0 : OUT STD_LOGIC;
    B_4_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    B_5_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    B_5_ce0 : OUT STD_LOGIC;
    B_5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    B_6_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    B_6_ce0 : OUT STD_LOGIC;
    B_6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    B_7_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    B_7_ce0 : OUT STD_LOGIC;
    B_7_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    C_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    C_0_ce0 : OUT STD_LOGIC;
    C_0_we0 : OUT STD_LOGIC;
    C_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    C_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    C_1_ce0 : OUT STD_LOGIC;
    C_1_we0 : OUT STD_LOGIC;
    C_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    C_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    C_2_ce0 : OUT STD_LOGIC;
    C_2_we0 : OUT STD_LOGIC;
    C_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    C_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    C_3_ce0 : OUT STD_LOGIC;
    C_3_we0 : OUT STD_LOGIC;
    C_3_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    C_4_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    C_4_ce0 : OUT STD_LOGIC;
    C_4_we0 : OUT STD_LOGIC;
    C_4_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    C_5_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    C_5_ce0 : OUT STD_LOGIC;
    C_5_we0 : OUT STD_LOGIC;
    C_5_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    C_6_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    C_6_ce0 : OUT STD_LOGIC;
    C_6_we0 : OUT STD_LOGIC;
    C_6_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    C_7_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    C_7_ce0 : OUT STD_LOGIC;
    C_7_we0 : OUT STD_LOGIC;
    C_7_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of Filter is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv64_3FE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv8_A0 : STD_LOGIC_VECTOR (7 downto 0) := "10100000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_478_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_746 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln182_fu_484_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln182_reg_751 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln180_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_494_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_759 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln186_fu_500_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln186_reg_764 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln182_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln186_3_fu_549_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln186_3_reg_769 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_572_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_861 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_3_fu_594_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_866 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_466_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_881 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_469_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_reg_886 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_456_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_reg_891 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_461_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_reg_896 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_reg_901 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_V_4_fu_638_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_V_4_reg_907 : STD_LOGIC_VECTOR (51 downto 0);
    signal C_0_addr_reg_912 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal C_1_addr_reg_917 : STD_LOGIC_VECTOR (11 downto 0);
    signal C_2_addr_reg_922 : STD_LOGIC_VECTOR (11 downto 0);
    signal C_3_addr_reg_927 : STD_LOGIC_VECTOR (11 downto 0);
    signal C_4_addr_reg_932 : STD_LOGIC_VECTOR (11 downto 0);
    signal C_5_addr_reg_937 : STD_LOGIC_VECTOR (11 downto 0);
    signal C_6_addr_reg_942 : STD_LOGIC_VECTOR (11 downto 0);
    signal C_7_addr_reg_947 : STD_LOGIC_VECTOR (11 downto 0);
    signal val_V_fu_735_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal val_V_reg_952 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_0_reg_430 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_0_reg_441 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_466_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_469_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln_fu_504_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_34_fu_514_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_35_fu_526_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln186_1_fu_522_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln186_2_fu_534_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln186_fu_538_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln186_1_fu_544_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln186_fu_569_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_452_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_624_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mantissa_V_fu_642_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln502_fu_655_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln502_fu_658_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_fu_672_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_664_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_677_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_681_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1311_4_fu_689_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1285_fu_697_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln682_fu_651_p1 : STD_LOGIC_VECTOR (120 downto 0);
    signal zext_ln1287_fu_693_p1 : STD_LOGIC_VECTOR (120 downto 0);
    signal r_V_fu_701_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_39_fu_713_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_4_fu_707_p2 : STD_LOGIC_VECTOR (120 downto 0);
    signal zext_ln662_fu_721_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_fu_725_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);

    component DWT_Accel_dadd_64jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component DWT_Accel_dmul_64fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component DWT_Accel_sitodp_hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component DWT_Accel_mux_832ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    DWT_Accel_dadd_64jbC_U65 : component DWT_Accel_dadd_64jbC
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_23_reg_891,
        din1 => tmp_25_reg_896,
        ce => ap_const_logic_1,
        dout => grp_fu_452_p2);

    DWT_Accel_dmul_64fYi_U66 : component DWT_Accel_dmul_64fYi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_s_reg_881,
        din1 => ap_const_lv64_3FE0000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_456_p2);

    DWT_Accel_dmul_64fYi_U67 : component DWT_Accel_dmul_64fYi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_24_reg_886,
        din1 => ap_const_lv64_3FE0000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_461_p2);

    DWT_Accel_sitodp_hbi_U68 : component DWT_Accel_sitodp_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_466_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_466_p1);

    DWT_Accel_sitodp_hbi_U69 : component DWT_Accel_sitodp_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_469_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_469_p1);

    DWT_Accel_mux_832ibs_U70 : component DWT_Accel_mux_832ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 32,
        dout_WIDTH => 16)
    port map (
        din0 => A_0_q0,
        din1 => A_1_q0,
        din2 => A_2_q0,
        din3 => A_3_q0,
        din4 => A_4_q0,
        din5 => A_5_q0,
        din6 => A_6_q0,
        din7 => A_7_q0,
        din8 => zext_ln186_fu_569_p1,
        dout => tmp_fu_572_p10);

    DWT_Accel_mux_832ibs_U71 : component DWT_Accel_mux_832ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 32,
        dout_WIDTH => 16)
    port map (
        din0 => B_0_q0,
        din1 => B_1_q0,
        din2 => B_2_q0,
        din3 => B_3_q0,
        din4 => B_4_q0,
        din5 => B_5_q0,
        din6 => B_6_q0,
        din7 => B_7_q0,
        din8 => zext_ln186_fu_569_p1,
        dout => tmp_3_fu_594_p10);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_430_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln182_fu_488_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_430 <= i_reg_746;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_430 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    j_0_reg_441_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln180_fu_472_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_441 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                j_0_reg_441 <= j_reg_759;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                C_0_addr_reg_912 <= zext_ln186_3_reg_769(12 - 1 downto 0);
                C_1_addr_reg_917 <= zext_ln186_3_reg_769(12 - 1 downto 0);
                C_2_addr_reg_922 <= zext_ln186_3_reg_769(12 - 1 downto 0);
                C_3_addr_reg_927 <= zext_ln186_3_reg_769(12 - 1 downto 0);
                C_4_addr_reg_932 <= zext_ln186_3_reg_769(12 - 1 downto 0);
                C_5_addr_reg_937 <= zext_ln186_3_reg_769(12 - 1 downto 0);
                C_6_addr_reg_942 <= zext_ln186_3_reg_769(12 - 1 downto 0);
                C_7_addr_reg_947 <= zext_ln186_3_reg_769(12 - 1 downto 0);
                val_V_reg_952 <= val_V_fu_735_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_746 <= i_fu_478_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_759 <= j_fu_494_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp_23_reg_891 <= grp_fu_456_p2;
                tmp_25_reg_896 <= grp_fu_461_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_24_reg_886 <= grp_fu_469_p1;
                tmp_s_reg_881 <= grp_fu_466_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_3_reg_866 <= tmp_3_fu_594_p10;
                tmp_reg_861 <= tmp_fu_572_p10;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                tmp_V_4_reg_907 <= tmp_V_4_fu_638_p1;
                tmp_V_reg_901 <= p_Val2_s_fu_624_p1(62 downto 52);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln182_fu_488_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                trunc_ln186_reg_764 <= trunc_ln186_fu_500_p1;
                    zext_ln186_3_reg_769(11 downto 0) <= zext_ln186_3_fu_549_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln180_fu_472_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln182_reg_751(7 downto 0) <= zext_ln182_fu_484_p1(7 downto 0);
            end if;
        end if;
    end process;
    zext_ln182_reg_751(11 downto 8) <= "0000";
    zext_ln186_3_reg_769(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln180_fu_472_p2, ap_CS_fsm_state3, icmp_ln182_fu_488_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln180_fu_472_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln182_fu_488_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    A_0_address0 <= zext_ln186_3_fu_549_p1(12 - 1 downto 0);

    A_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_0_ce0 <= ap_const_logic_1;
        else 
            A_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_1_address0 <= zext_ln186_3_fu_549_p1(12 - 1 downto 0);

    A_1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_1_ce0 <= ap_const_logic_1;
        else 
            A_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_2_address0 <= zext_ln186_3_fu_549_p1(12 - 1 downto 0);

    A_2_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_2_ce0 <= ap_const_logic_1;
        else 
            A_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_3_address0 <= zext_ln186_3_fu_549_p1(12 - 1 downto 0);

    A_3_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_3_ce0 <= ap_const_logic_1;
        else 
            A_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_4_address0 <= zext_ln186_3_fu_549_p1(12 - 1 downto 0);

    A_4_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_4_ce0 <= ap_const_logic_1;
        else 
            A_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_5_address0 <= zext_ln186_3_fu_549_p1(12 - 1 downto 0);

    A_5_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_5_ce0 <= ap_const_logic_1;
        else 
            A_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_6_address0 <= zext_ln186_3_fu_549_p1(12 - 1 downto 0);

    A_6_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_6_ce0 <= ap_const_logic_1;
        else 
            A_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_7_address0 <= zext_ln186_3_fu_549_p1(12 - 1 downto 0);

    A_7_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_7_ce0 <= ap_const_logic_1;
        else 
            A_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_0_address0 <= zext_ln186_3_fu_549_p1(12 - 1 downto 0);

    B_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            B_0_ce0 <= ap_const_logic_1;
        else 
            B_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_1_address0 <= zext_ln186_3_fu_549_p1(12 - 1 downto 0);

    B_1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            B_1_ce0 <= ap_const_logic_1;
        else 
            B_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_2_address0 <= zext_ln186_3_fu_549_p1(12 - 1 downto 0);

    B_2_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            B_2_ce0 <= ap_const_logic_1;
        else 
            B_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_3_address0 <= zext_ln186_3_fu_549_p1(12 - 1 downto 0);

    B_3_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            B_3_ce0 <= ap_const_logic_1;
        else 
            B_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_4_address0 <= zext_ln186_3_fu_549_p1(12 - 1 downto 0);

    B_4_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            B_4_ce0 <= ap_const_logic_1;
        else 
            B_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_5_address0 <= zext_ln186_3_fu_549_p1(12 - 1 downto 0);

    B_5_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            B_5_ce0 <= ap_const_logic_1;
        else 
            B_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_6_address0 <= zext_ln186_3_fu_549_p1(12 - 1 downto 0);

    B_6_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            B_6_ce0 <= ap_const_logic_1;
        else 
            B_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_7_address0 <= zext_ln186_3_fu_549_p1(12 - 1 downto 0);

    B_7_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            B_7_ce0 <= ap_const_logic_1;
        else 
            B_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_0_address0 <= C_0_addr_reg_912;

    C_0_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            C_0_ce0 <= ap_const_logic_1;
        else 
            C_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_0_d0 <= val_V_reg_952;

    C_0_we0_assign_proc : process(trunc_ln186_reg_764, ap_CS_fsm_state23)
    begin
        if (((trunc_ln186_reg_764 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            C_0_we0 <= ap_const_logic_1;
        else 
            C_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_1_address0 <= C_1_addr_reg_917;

    C_1_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            C_1_ce0 <= ap_const_logic_1;
        else 
            C_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_1_d0 <= val_V_reg_952;

    C_1_we0_assign_proc : process(trunc_ln186_reg_764, ap_CS_fsm_state23)
    begin
        if (((trunc_ln186_reg_764 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            C_1_we0 <= ap_const_logic_1;
        else 
            C_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_2_address0 <= C_2_addr_reg_922;

    C_2_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            C_2_ce0 <= ap_const_logic_1;
        else 
            C_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_2_d0 <= val_V_reg_952;

    C_2_we0_assign_proc : process(trunc_ln186_reg_764, ap_CS_fsm_state23)
    begin
        if (((trunc_ln186_reg_764 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            C_2_we0 <= ap_const_logic_1;
        else 
            C_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_3_address0 <= C_3_addr_reg_927;

    C_3_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            C_3_ce0 <= ap_const_logic_1;
        else 
            C_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_3_d0 <= val_V_reg_952;

    C_3_we0_assign_proc : process(trunc_ln186_reg_764, ap_CS_fsm_state23)
    begin
        if (((trunc_ln186_reg_764 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            C_3_we0 <= ap_const_logic_1;
        else 
            C_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_4_address0 <= C_4_addr_reg_932;

    C_4_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            C_4_ce0 <= ap_const_logic_1;
        else 
            C_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_4_d0 <= val_V_reg_952;

    C_4_we0_assign_proc : process(trunc_ln186_reg_764, ap_CS_fsm_state23)
    begin
        if (((trunc_ln186_reg_764 = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            C_4_we0 <= ap_const_logic_1;
        else 
            C_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_5_address0 <= C_5_addr_reg_937;

    C_5_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            C_5_ce0 <= ap_const_logic_1;
        else 
            C_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_5_d0 <= val_V_reg_952;

    C_5_we0_assign_proc : process(trunc_ln186_reg_764, ap_CS_fsm_state23)
    begin
        if (((trunc_ln186_reg_764 = ap_const_lv3_5) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            C_5_we0 <= ap_const_logic_1;
        else 
            C_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_6_address0 <= C_6_addr_reg_942;

    C_6_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            C_6_ce0 <= ap_const_logic_1;
        else 
            C_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_6_d0 <= val_V_reg_952;

    C_6_we0_assign_proc : process(trunc_ln186_reg_764, ap_CS_fsm_state23)
    begin
        if (((trunc_ln186_reg_764 = ap_const_lv3_6) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            C_6_we0 <= ap_const_logic_1;
        else 
            C_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_7_address0 <= C_7_addr_reg_947;

    C_7_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            C_7_ce0 <= ap_const_logic_1;
        else 
            C_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_7_d0 <= val_V_reg_952;

    C_7_we0_assign_proc : process(trunc_ln186_reg_764, ap_CS_fsm_state23)
    begin
        if (((trunc_ln186_reg_764 = ap_const_lv3_7) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            C_7_we0 <= ap_const_logic_1;
        else 
            C_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln186_1_fu_544_p2 <= std_logic_vector(unsigned(zext_ln182_reg_751) + unsigned(add_ln186_fu_538_p2));
    add_ln186_fu_538_p2 <= std_logic_vector(unsigned(zext_ln186_1_fu_522_p1) + unsigned(zext_ln186_2_fu_534_p1));
    add_ln502_fu_658_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(zext_ln502_fu_655_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln180_fu_472_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln180_fu_472_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln180_fu_472_p2)
    begin
        if (((icmp_ln180_fu_472_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_466_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_861),32));
    grp_fu_469_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_reg_866),32));
    i_fu_478_p2 <= std_logic_vector(unsigned(i_0_reg_430) + unsigned(ap_const_lv8_1));
    icmp_ln180_fu_472_p2 <= "1" when (i_0_reg_430 = ap_const_lv8_A0) else "0";
    icmp_ln182_fu_488_p2 <= "1" when (j_0_reg_441 = ap_const_lv7_78) else "0";
    isNeg_fu_664_p3 <= add_ln502_fu_658_p2(11 downto 11);
    j_fu_494_p2 <= std_logic_vector(unsigned(j_0_reg_441) + unsigned(ap_const_lv7_1));
    lshr_ln_fu_504_p4 <= j_0_reg_441(6 downto 3);
    mantissa_V_fu_642_p4 <= ((ap_const_lv1_1 & tmp_V_4_reg_907) & ap_const_lv1_0);
    p_Val2_s_fu_624_p1 <= grp_fu_452_p2;
    r_V_4_fu_707_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_651_p1),to_integer(unsigned('0' & zext_ln1287_fu_693_p1(31-1 downto 0)))));
    r_V_fu_701_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_642_p4),to_integer(unsigned('0' & zext_ln1285_fu_697_p1(31-1 downto 0)))));
        sext_ln1311_4_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_681_p3),32));

        sext_ln1311_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_672_p2),12));

    sub_ln1311_fu_672_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_V_reg_901));
    tmp_34_fu_514_p3 <= (lshr_ln_fu_504_p4 & ap_const_lv7_0);
    tmp_35_fu_526_p3 <= (lshr_ln_fu_504_p4 & ap_const_lv5_0);
    tmp_36_fu_725_p4 <= r_V_4_fu_707_p2(68 downto 53);
    tmp_39_fu_713_p3 <= r_V_fu_701_p2(53 downto 53);
    tmp_V_4_fu_638_p1 <= p_Val2_s_fu_624_p1(52 - 1 downto 0);
    trunc_ln186_fu_500_p1 <= j_0_reg_441(3 - 1 downto 0);
    ush_fu_681_p3 <= 
        sext_ln1311_fu_677_p1 when (isNeg_fu_664_p3(0) = '1') else 
        add_ln502_fu_658_p2;
    val_V_fu_735_p3 <= 
        zext_ln662_fu_721_p1 when (isNeg_fu_664_p3(0) = '1') else 
        tmp_36_fu_725_p4;
    zext_ln1285_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_4_fu_689_p1),54));
    zext_ln1287_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_4_fu_689_p1),121));
    zext_ln182_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_430),12));
    zext_ln186_1_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_514_p3),12));
    zext_ln186_2_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_526_p3),12));
    zext_ln186_3_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln186_1_fu_544_p2),64));
    zext_ln186_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln186_reg_764),32));
    zext_ln502_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_reg_901),12));
    zext_ln662_fu_721_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_713_p3),16));
    zext_ln682_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_642_p4),121));
end behav;
