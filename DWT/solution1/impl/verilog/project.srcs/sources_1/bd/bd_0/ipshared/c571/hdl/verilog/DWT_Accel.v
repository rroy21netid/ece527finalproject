// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="DWT_Accel,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.348300,HLS_SYN_LAT=1550688,HLS_SYN_TPT=none,HLS_SYN_MEM=122,HLS_SYN_DSP=103,HLS_SYN_FF=22132,HLS_SYN_LUT=32650,HLS_VERSION=2019_1}" *)

module DWT_Accel (
        ap_clk,
        ap_rst_n,
        m_axi_DATA_A_AWVALID,
        m_axi_DATA_A_AWREADY,
        m_axi_DATA_A_AWADDR,
        m_axi_DATA_A_AWID,
        m_axi_DATA_A_AWLEN,
        m_axi_DATA_A_AWSIZE,
        m_axi_DATA_A_AWBURST,
        m_axi_DATA_A_AWLOCK,
        m_axi_DATA_A_AWCACHE,
        m_axi_DATA_A_AWPROT,
        m_axi_DATA_A_AWQOS,
        m_axi_DATA_A_AWREGION,
        m_axi_DATA_A_AWUSER,
        m_axi_DATA_A_WVALID,
        m_axi_DATA_A_WREADY,
        m_axi_DATA_A_WDATA,
        m_axi_DATA_A_WSTRB,
        m_axi_DATA_A_WLAST,
        m_axi_DATA_A_WID,
        m_axi_DATA_A_WUSER,
        m_axi_DATA_A_ARVALID,
        m_axi_DATA_A_ARREADY,
        m_axi_DATA_A_ARADDR,
        m_axi_DATA_A_ARID,
        m_axi_DATA_A_ARLEN,
        m_axi_DATA_A_ARSIZE,
        m_axi_DATA_A_ARBURST,
        m_axi_DATA_A_ARLOCK,
        m_axi_DATA_A_ARCACHE,
        m_axi_DATA_A_ARPROT,
        m_axi_DATA_A_ARQOS,
        m_axi_DATA_A_ARREGION,
        m_axi_DATA_A_ARUSER,
        m_axi_DATA_A_RVALID,
        m_axi_DATA_A_RREADY,
        m_axi_DATA_A_RDATA,
        m_axi_DATA_A_RLAST,
        m_axi_DATA_A_RID,
        m_axi_DATA_A_RUSER,
        m_axi_DATA_A_RRESP,
        m_axi_DATA_A_BVALID,
        m_axi_DATA_A_BREADY,
        m_axi_DATA_A_BRESP,
        m_axi_DATA_A_BID,
        m_axi_DATA_A_BUSER,
        m_axi_DATA_B_AWVALID,
        m_axi_DATA_B_AWREADY,
        m_axi_DATA_B_AWADDR,
        m_axi_DATA_B_AWID,
        m_axi_DATA_B_AWLEN,
        m_axi_DATA_B_AWSIZE,
        m_axi_DATA_B_AWBURST,
        m_axi_DATA_B_AWLOCK,
        m_axi_DATA_B_AWCACHE,
        m_axi_DATA_B_AWPROT,
        m_axi_DATA_B_AWQOS,
        m_axi_DATA_B_AWREGION,
        m_axi_DATA_B_AWUSER,
        m_axi_DATA_B_WVALID,
        m_axi_DATA_B_WREADY,
        m_axi_DATA_B_WDATA,
        m_axi_DATA_B_WSTRB,
        m_axi_DATA_B_WLAST,
        m_axi_DATA_B_WID,
        m_axi_DATA_B_WUSER,
        m_axi_DATA_B_ARVALID,
        m_axi_DATA_B_ARREADY,
        m_axi_DATA_B_ARADDR,
        m_axi_DATA_B_ARID,
        m_axi_DATA_B_ARLEN,
        m_axi_DATA_B_ARSIZE,
        m_axi_DATA_B_ARBURST,
        m_axi_DATA_B_ARLOCK,
        m_axi_DATA_B_ARCACHE,
        m_axi_DATA_B_ARPROT,
        m_axi_DATA_B_ARQOS,
        m_axi_DATA_B_ARREGION,
        m_axi_DATA_B_ARUSER,
        m_axi_DATA_B_RVALID,
        m_axi_DATA_B_RREADY,
        m_axi_DATA_B_RDATA,
        m_axi_DATA_B_RLAST,
        m_axi_DATA_B_RID,
        m_axi_DATA_B_RUSER,
        m_axi_DATA_B_RRESP,
        m_axi_DATA_B_BVALID,
        m_axi_DATA_B_BREADY,
        m_axi_DATA_B_BRESP,
        m_axi_DATA_B_BID,
        m_axi_DATA_B_BUSER,
        m_axi_DATA_C_AWVALID,
        m_axi_DATA_C_AWREADY,
        m_axi_DATA_C_AWADDR,
        m_axi_DATA_C_AWID,
        m_axi_DATA_C_AWLEN,
        m_axi_DATA_C_AWSIZE,
        m_axi_DATA_C_AWBURST,
        m_axi_DATA_C_AWLOCK,
        m_axi_DATA_C_AWCACHE,
        m_axi_DATA_C_AWPROT,
        m_axi_DATA_C_AWQOS,
        m_axi_DATA_C_AWREGION,
        m_axi_DATA_C_AWUSER,
        m_axi_DATA_C_WVALID,
        m_axi_DATA_C_WREADY,
        m_axi_DATA_C_WDATA,
        m_axi_DATA_C_WSTRB,
        m_axi_DATA_C_WLAST,
        m_axi_DATA_C_WID,
        m_axi_DATA_C_WUSER,
        m_axi_DATA_C_ARVALID,
        m_axi_DATA_C_ARREADY,
        m_axi_DATA_C_ARADDR,
        m_axi_DATA_C_ARID,
        m_axi_DATA_C_ARLEN,
        m_axi_DATA_C_ARSIZE,
        m_axi_DATA_C_ARBURST,
        m_axi_DATA_C_ARLOCK,
        m_axi_DATA_C_ARCACHE,
        m_axi_DATA_C_ARPROT,
        m_axi_DATA_C_ARQOS,
        m_axi_DATA_C_ARREGION,
        m_axi_DATA_C_ARUSER,
        m_axi_DATA_C_RVALID,
        m_axi_DATA_C_RREADY,
        m_axi_DATA_C_RDATA,
        m_axi_DATA_C_RLAST,
        m_axi_DATA_C_RID,
        m_axi_DATA_C_RUSER,
        m_axi_DATA_C_RRESP,
        m_axi_DATA_C_BVALID,
        m_axi_DATA_C_BREADY,
        m_axi_DATA_C_BRESP,
        m_axi_DATA_C_BID,
        m_axi_DATA_C_BUSER,
        s_axi_CTL_AWVALID,
        s_axi_CTL_AWREADY,
        s_axi_CTL_AWADDR,
        s_axi_CTL_WVALID,
        s_axi_CTL_WREADY,
        s_axi_CTL_WDATA,
        s_axi_CTL_WSTRB,
        s_axi_CTL_ARVALID,
        s_axi_CTL_ARREADY,
        s_axi_CTL_ARADDR,
        s_axi_CTL_RVALID,
        s_axi_CTL_RREADY,
        s_axi_CTL_RDATA,
        s_axi_CTL_RRESP,
        s_axi_CTL_BVALID,
        s_axi_CTL_BREADY,
        s_axi_CTL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;
parameter    C_S_AXI_CTL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_A_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_A_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_A_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_A_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_A_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_A_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_A_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_A_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_A_USER_VALUE = 0;
parameter    C_M_AXI_DATA_A_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_A_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_B_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_B_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_B_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_B_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_B_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_B_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_B_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_B_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_B_USER_VALUE = 0;
parameter    C_M_AXI_DATA_B_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_B_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_C_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_C_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_C_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_C_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C_USER_VALUE = 0;
parameter    C_M_AXI_DATA_C_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_C_CACHE_VALUE = 3;

parameter C_S_AXI_CTL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_A_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_B_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_C_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_DATA_A_AWVALID;
input   m_axi_DATA_A_AWREADY;
output  [C_M_AXI_DATA_A_ADDR_WIDTH - 1:0] m_axi_DATA_A_AWADDR;
output  [C_M_AXI_DATA_A_ID_WIDTH - 1:0] m_axi_DATA_A_AWID;
output  [7:0] m_axi_DATA_A_AWLEN;
output  [2:0] m_axi_DATA_A_AWSIZE;
output  [1:0] m_axi_DATA_A_AWBURST;
output  [1:0] m_axi_DATA_A_AWLOCK;
output  [3:0] m_axi_DATA_A_AWCACHE;
output  [2:0] m_axi_DATA_A_AWPROT;
output  [3:0] m_axi_DATA_A_AWQOS;
output  [3:0] m_axi_DATA_A_AWREGION;
output  [C_M_AXI_DATA_A_AWUSER_WIDTH - 1:0] m_axi_DATA_A_AWUSER;
output   m_axi_DATA_A_WVALID;
input   m_axi_DATA_A_WREADY;
output  [C_M_AXI_DATA_A_DATA_WIDTH - 1:0] m_axi_DATA_A_WDATA;
output  [C_M_AXI_DATA_A_WSTRB_WIDTH - 1:0] m_axi_DATA_A_WSTRB;
output   m_axi_DATA_A_WLAST;
output  [C_M_AXI_DATA_A_ID_WIDTH - 1:0] m_axi_DATA_A_WID;
output  [C_M_AXI_DATA_A_WUSER_WIDTH - 1:0] m_axi_DATA_A_WUSER;
output   m_axi_DATA_A_ARVALID;
input   m_axi_DATA_A_ARREADY;
output  [C_M_AXI_DATA_A_ADDR_WIDTH - 1:0] m_axi_DATA_A_ARADDR;
output  [C_M_AXI_DATA_A_ID_WIDTH - 1:0] m_axi_DATA_A_ARID;
output  [7:0] m_axi_DATA_A_ARLEN;
output  [2:0] m_axi_DATA_A_ARSIZE;
output  [1:0] m_axi_DATA_A_ARBURST;
output  [1:0] m_axi_DATA_A_ARLOCK;
output  [3:0] m_axi_DATA_A_ARCACHE;
output  [2:0] m_axi_DATA_A_ARPROT;
output  [3:0] m_axi_DATA_A_ARQOS;
output  [3:0] m_axi_DATA_A_ARREGION;
output  [C_M_AXI_DATA_A_ARUSER_WIDTH - 1:0] m_axi_DATA_A_ARUSER;
input   m_axi_DATA_A_RVALID;
output   m_axi_DATA_A_RREADY;
input  [C_M_AXI_DATA_A_DATA_WIDTH - 1:0] m_axi_DATA_A_RDATA;
input   m_axi_DATA_A_RLAST;
input  [C_M_AXI_DATA_A_ID_WIDTH - 1:0] m_axi_DATA_A_RID;
input  [C_M_AXI_DATA_A_RUSER_WIDTH - 1:0] m_axi_DATA_A_RUSER;
input  [1:0] m_axi_DATA_A_RRESP;
input   m_axi_DATA_A_BVALID;
output   m_axi_DATA_A_BREADY;
input  [1:0] m_axi_DATA_A_BRESP;
input  [C_M_AXI_DATA_A_ID_WIDTH - 1:0] m_axi_DATA_A_BID;
input  [C_M_AXI_DATA_A_BUSER_WIDTH - 1:0] m_axi_DATA_A_BUSER;
output   m_axi_DATA_B_AWVALID;
input   m_axi_DATA_B_AWREADY;
output  [C_M_AXI_DATA_B_ADDR_WIDTH - 1:0] m_axi_DATA_B_AWADDR;
output  [C_M_AXI_DATA_B_ID_WIDTH - 1:0] m_axi_DATA_B_AWID;
output  [7:0] m_axi_DATA_B_AWLEN;
output  [2:0] m_axi_DATA_B_AWSIZE;
output  [1:0] m_axi_DATA_B_AWBURST;
output  [1:0] m_axi_DATA_B_AWLOCK;
output  [3:0] m_axi_DATA_B_AWCACHE;
output  [2:0] m_axi_DATA_B_AWPROT;
output  [3:0] m_axi_DATA_B_AWQOS;
output  [3:0] m_axi_DATA_B_AWREGION;
output  [C_M_AXI_DATA_B_AWUSER_WIDTH - 1:0] m_axi_DATA_B_AWUSER;
output   m_axi_DATA_B_WVALID;
input   m_axi_DATA_B_WREADY;
output  [C_M_AXI_DATA_B_DATA_WIDTH - 1:0] m_axi_DATA_B_WDATA;
output  [C_M_AXI_DATA_B_WSTRB_WIDTH - 1:0] m_axi_DATA_B_WSTRB;
output   m_axi_DATA_B_WLAST;
output  [C_M_AXI_DATA_B_ID_WIDTH - 1:0] m_axi_DATA_B_WID;
output  [C_M_AXI_DATA_B_WUSER_WIDTH - 1:0] m_axi_DATA_B_WUSER;
output   m_axi_DATA_B_ARVALID;
input   m_axi_DATA_B_ARREADY;
output  [C_M_AXI_DATA_B_ADDR_WIDTH - 1:0] m_axi_DATA_B_ARADDR;
output  [C_M_AXI_DATA_B_ID_WIDTH - 1:0] m_axi_DATA_B_ARID;
output  [7:0] m_axi_DATA_B_ARLEN;
output  [2:0] m_axi_DATA_B_ARSIZE;
output  [1:0] m_axi_DATA_B_ARBURST;
output  [1:0] m_axi_DATA_B_ARLOCK;
output  [3:0] m_axi_DATA_B_ARCACHE;
output  [2:0] m_axi_DATA_B_ARPROT;
output  [3:0] m_axi_DATA_B_ARQOS;
output  [3:0] m_axi_DATA_B_ARREGION;
output  [C_M_AXI_DATA_B_ARUSER_WIDTH - 1:0] m_axi_DATA_B_ARUSER;
input   m_axi_DATA_B_RVALID;
output   m_axi_DATA_B_RREADY;
input  [C_M_AXI_DATA_B_DATA_WIDTH - 1:0] m_axi_DATA_B_RDATA;
input   m_axi_DATA_B_RLAST;
input  [C_M_AXI_DATA_B_ID_WIDTH - 1:0] m_axi_DATA_B_RID;
input  [C_M_AXI_DATA_B_RUSER_WIDTH - 1:0] m_axi_DATA_B_RUSER;
input  [1:0] m_axi_DATA_B_RRESP;
input   m_axi_DATA_B_BVALID;
output   m_axi_DATA_B_BREADY;
input  [1:0] m_axi_DATA_B_BRESP;
input  [C_M_AXI_DATA_B_ID_WIDTH - 1:0] m_axi_DATA_B_BID;
input  [C_M_AXI_DATA_B_BUSER_WIDTH - 1:0] m_axi_DATA_B_BUSER;
output   m_axi_DATA_C_AWVALID;
input   m_axi_DATA_C_AWREADY;
output  [C_M_AXI_DATA_C_ADDR_WIDTH - 1:0] m_axi_DATA_C_AWADDR;
output  [C_M_AXI_DATA_C_ID_WIDTH - 1:0] m_axi_DATA_C_AWID;
output  [7:0] m_axi_DATA_C_AWLEN;
output  [2:0] m_axi_DATA_C_AWSIZE;
output  [1:0] m_axi_DATA_C_AWBURST;
output  [1:0] m_axi_DATA_C_AWLOCK;
output  [3:0] m_axi_DATA_C_AWCACHE;
output  [2:0] m_axi_DATA_C_AWPROT;
output  [3:0] m_axi_DATA_C_AWQOS;
output  [3:0] m_axi_DATA_C_AWREGION;
output  [C_M_AXI_DATA_C_AWUSER_WIDTH - 1:0] m_axi_DATA_C_AWUSER;
output   m_axi_DATA_C_WVALID;
input   m_axi_DATA_C_WREADY;
output  [C_M_AXI_DATA_C_DATA_WIDTH - 1:0] m_axi_DATA_C_WDATA;
output  [C_M_AXI_DATA_C_WSTRB_WIDTH - 1:0] m_axi_DATA_C_WSTRB;
output   m_axi_DATA_C_WLAST;
output  [C_M_AXI_DATA_C_ID_WIDTH - 1:0] m_axi_DATA_C_WID;
output  [C_M_AXI_DATA_C_WUSER_WIDTH - 1:0] m_axi_DATA_C_WUSER;
output   m_axi_DATA_C_ARVALID;
input   m_axi_DATA_C_ARREADY;
output  [C_M_AXI_DATA_C_ADDR_WIDTH - 1:0] m_axi_DATA_C_ARADDR;
output  [C_M_AXI_DATA_C_ID_WIDTH - 1:0] m_axi_DATA_C_ARID;
output  [7:0] m_axi_DATA_C_ARLEN;
output  [2:0] m_axi_DATA_C_ARSIZE;
output  [1:0] m_axi_DATA_C_ARBURST;
output  [1:0] m_axi_DATA_C_ARLOCK;
output  [3:0] m_axi_DATA_C_ARCACHE;
output  [2:0] m_axi_DATA_C_ARPROT;
output  [3:0] m_axi_DATA_C_ARQOS;
output  [3:0] m_axi_DATA_C_ARREGION;
output  [C_M_AXI_DATA_C_ARUSER_WIDTH - 1:0] m_axi_DATA_C_ARUSER;
input   m_axi_DATA_C_RVALID;
output   m_axi_DATA_C_RREADY;
input  [C_M_AXI_DATA_C_DATA_WIDTH - 1:0] m_axi_DATA_C_RDATA;
input   m_axi_DATA_C_RLAST;
input  [C_M_AXI_DATA_C_ID_WIDTH - 1:0] m_axi_DATA_C_RID;
input  [C_M_AXI_DATA_C_RUSER_WIDTH - 1:0] m_axi_DATA_C_RUSER;
input  [1:0] m_axi_DATA_C_RRESP;
input   m_axi_DATA_C_BVALID;
output   m_axi_DATA_C_BREADY;
input  [1:0] m_axi_DATA_C_BRESP;
input  [C_M_AXI_DATA_C_ID_WIDTH - 1:0] m_axi_DATA_C_BID;
input  [C_M_AXI_DATA_C_BUSER_WIDTH - 1:0] m_axi_DATA_C_BUSER;
input   s_axi_CTL_AWVALID;
output   s_axi_CTL_AWREADY;
input  [C_S_AXI_CTL_ADDR_WIDTH - 1:0] s_axi_CTL_AWADDR;
input   s_axi_CTL_WVALID;
output   s_axi_CTL_WREADY;
input  [C_S_AXI_CTL_DATA_WIDTH - 1:0] s_axi_CTL_WDATA;
input  [C_S_AXI_CTL_WSTRB_WIDTH - 1:0] s_axi_CTL_WSTRB;
input   s_axi_CTL_ARVALID;
output   s_axi_CTL_ARREADY;
input  [C_S_AXI_CTL_ADDR_WIDTH - 1:0] s_axi_CTL_ARADDR;
output   s_axi_CTL_RVALID;
input   s_axi_CTL_RREADY;
output  [C_S_AXI_CTL_DATA_WIDTH - 1:0] s_axi_CTL_RDATA;
output  [1:0] s_axi_CTL_RRESP;
output   s_axi_CTL_BVALID;
input   s_axi_CTL_BREADY;
output  [1:0] s_axi_CTL_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] a;
wire   [31:0] b;
wire   [31:0] c;
wire    DATA_A_AWREADY;
wire    DATA_A_WREADY;
reg    DATA_A_ARVALID;
wire    DATA_A_ARREADY;
wire    DATA_A_RVALID;
reg    DATA_A_RREADY;
wire   [15:0] DATA_A_RDATA;
wire    DATA_A_RLAST;
wire   [0:0] DATA_A_RID;
wire   [0:0] DATA_A_RUSER;
wire   [1:0] DATA_A_RRESP;
wire    DATA_A_BVALID;
wire   [1:0] DATA_A_BRESP;
wire   [0:0] DATA_A_BID;
wire   [0:0] DATA_A_BUSER;
wire    DATA_B_AWREADY;
wire    DATA_B_WREADY;
reg    DATA_B_ARVALID;
wire    DATA_B_ARREADY;
wire    DATA_B_RVALID;
reg    DATA_B_RREADY;
wire   [15:0] DATA_B_RDATA;
wire    DATA_B_RLAST;
wire   [0:0] DATA_B_RID;
wire   [0:0] DATA_B_RUSER;
wire   [1:0] DATA_B_RRESP;
wire    DATA_B_BVALID;
wire   [1:0] DATA_B_BRESP;
wire   [0:0] DATA_B_BID;
wire   [0:0] DATA_B_BUSER;
reg    DATA_C_AWVALID;
wire    DATA_C_AWREADY;
reg    DATA_C_WVALID;
wire    DATA_C_WREADY;
wire    DATA_C_ARREADY;
wire    DATA_C_RVALID;
wire   [15:0] DATA_C_RDATA;
wire    DATA_C_RLAST;
wire   [0:0] DATA_C_RID;
wire   [0:0] DATA_C_RUSER;
wire   [1:0] DATA_C_RRESP;
wire    DATA_C_BVALID;
reg    DATA_C_BREADY;
wire   [1:0] DATA_C_BRESP;
wire   [0:0] DATA_C_BID;
wire   [0:0] DATA_C_BUSER;
reg   [30:0] c5_reg_349;
reg   [30:0] b3_reg_354;
reg   [30:0] a1_reg_359;
reg   [11:0] A_buffer_0_address0;
reg    A_buffer_0_ce0;
reg    A_buffer_0_we0;
reg   [15:0] A_buffer_0_d0;
wire   [15:0] A_buffer_0_q0;
reg   [11:0] A_buffer_1_address0;
reg    A_buffer_1_ce0;
reg    A_buffer_1_we0;
reg   [15:0] A_buffer_1_d0;
wire   [15:0] A_buffer_1_q0;
reg   [11:0] A_buffer_2_address0;
reg    A_buffer_2_ce0;
reg    A_buffer_2_we0;
reg   [15:0] A_buffer_2_d0;
wire   [15:0] A_buffer_2_q0;
reg   [11:0] A_buffer_3_address0;
reg    A_buffer_3_ce0;
reg    A_buffer_3_we0;
reg   [15:0] A_buffer_3_d0;
wire   [15:0] A_buffer_3_q0;
reg   [11:0] A_buffer_4_address0;
reg    A_buffer_4_ce0;
reg    A_buffer_4_we0;
reg   [15:0] A_buffer_4_d0;
wire   [15:0] A_buffer_4_q0;
reg   [11:0] A_buffer_5_address0;
reg    A_buffer_5_ce0;
reg    A_buffer_5_we0;
reg   [15:0] A_buffer_5_d0;
wire   [15:0] A_buffer_5_q0;
reg   [11:0] A_buffer_6_address0;
reg    A_buffer_6_ce0;
reg    A_buffer_6_we0;
reg   [15:0] A_buffer_6_d0;
wire   [15:0] A_buffer_6_q0;
reg   [11:0] A_buffer_7_address0;
reg    A_buffer_7_ce0;
reg    A_buffer_7_we0;
reg   [15:0] A_buffer_7_d0;
wire   [15:0] A_buffer_7_q0;
reg   [11:0] B_buffer_0_address0;
reg    B_buffer_0_ce0;
reg    B_buffer_0_we0;
reg   [15:0] B_buffer_0_d0;
wire   [15:0] B_buffer_0_q0;
reg   [11:0] B_buffer_1_address0;
reg    B_buffer_1_ce0;
reg    B_buffer_1_we0;
reg   [15:0] B_buffer_1_d0;
wire   [15:0] B_buffer_1_q0;
reg   [11:0] B_buffer_2_address0;
reg    B_buffer_2_ce0;
reg    B_buffer_2_we0;
reg   [15:0] B_buffer_2_d0;
wire   [15:0] B_buffer_2_q0;
reg   [11:0] B_buffer_3_address0;
reg    B_buffer_3_ce0;
reg    B_buffer_3_we0;
reg   [15:0] B_buffer_3_d0;
wire   [15:0] B_buffer_3_q0;
reg   [11:0] B_buffer_4_address0;
reg    B_buffer_4_ce0;
reg    B_buffer_4_we0;
reg   [15:0] B_buffer_4_d0;
wire   [15:0] B_buffer_4_q0;
reg   [11:0] B_buffer_5_address0;
reg    B_buffer_5_ce0;
reg    B_buffer_5_we0;
reg   [15:0] B_buffer_5_d0;
wire   [15:0] B_buffer_5_q0;
reg   [11:0] B_buffer_6_address0;
reg    B_buffer_6_ce0;
reg    B_buffer_6_we0;
reg   [15:0] B_buffer_6_d0;
wire   [15:0] B_buffer_6_q0;
reg   [11:0] B_buffer_7_address0;
reg    B_buffer_7_ce0;
reg    B_buffer_7_we0;
reg   [15:0] B_buffer_7_d0;
wire   [15:0] B_buffer_7_q0;
reg   [11:0] C_buffer_0_address0;
reg    C_buffer_0_ce0;
reg    C_buffer_0_we0;
reg   [15:0] C_buffer_0_d0;
wire   [15:0] C_buffer_0_q0;
reg   [11:0] C_buffer_1_address0;
reg    C_buffer_1_ce0;
reg    C_buffer_1_we0;
reg   [15:0] C_buffer_1_d0;
wire   [15:0] C_buffer_1_q0;
reg   [11:0] C_buffer_2_address0;
reg    C_buffer_2_ce0;
reg    C_buffer_2_we0;
reg   [15:0] C_buffer_2_d0;
wire   [15:0] C_buffer_2_q0;
reg   [11:0] C_buffer_3_address0;
reg    C_buffer_3_ce0;
reg    C_buffer_3_we0;
reg   [15:0] C_buffer_3_d0;
wire   [15:0] C_buffer_3_q0;
reg   [11:0] C_buffer_4_address0;
reg    C_buffer_4_ce0;
reg    C_buffer_4_we0;
reg   [15:0] C_buffer_4_d0;
wire   [15:0] C_buffer_4_q0;
reg   [11:0] C_buffer_5_address0;
reg    C_buffer_5_ce0;
reg    C_buffer_5_we0;
reg   [15:0] C_buffer_5_d0;
wire   [15:0] C_buffer_5_q0;
reg   [11:0] C_buffer_6_address0;
reg    C_buffer_6_ce0;
reg    C_buffer_6_we0;
reg   [15:0] C_buffer_6_d0;
wire   [15:0] C_buffer_6_q0;
reg   [11:0] C_buffer_7_address0;
reg    C_buffer_7_ce0;
reg    C_buffer_7_we0;
reg   [15:0] C_buffer_7_d0;
wire   [15:0] C_buffer_7_q0;
wire    grp_IDWT_fu_192_ap_start;
wire    grp_IDWT_fu_192_ap_done;
wire    grp_IDWT_fu_192_ap_idle;
wire    grp_IDWT_fu_192_ap_ready;
wire   [11:0] grp_IDWT_fu_192_C_0_address0;
wire    grp_IDWT_fu_192_C_0_ce0;
wire    grp_IDWT_fu_192_C_0_we0;
wire   [15:0] grp_IDWT_fu_192_C_0_d0;
wire   [11:0] grp_IDWT_fu_192_C_1_address0;
wire    grp_IDWT_fu_192_C_1_ce0;
wire    grp_IDWT_fu_192_C_1_we0;
wire   [15:0] grp_IDWT_fu_192_C_1_d0;
wire   [11:0] grp_IDWT_fu_192_C_2_address0;
wire    grp_IDWT_fu_192_C_2_ce0;
wire    grp_IDWT_fu_192_C_2_we0;
wire   [15:0] grp_IDWT_fu_192_C_2_d0;
wire   [11:0] grp_IDWT_fu_192_C_3_address0;
wire    grp_IDWT_fu_192_C_3_ce0;
wire    grp_IDWT_fu_192_C_3_we0;
wire   [15:0] grp_IDWT_fu_192_C_3_d0;
wire   [11:0] grp_IDWT_fu_192_C_4_address0;
wire    grp_IDWT_fu_192_C_4_ce0;
wire    grp_IDWT_fu_192_C_4_we0;
wire   [15:0] grp_IDWT_fu_192_C_4_d0;
wire   [11:0] grp_IDWT_fu_192_C_5_address0;
wire    grp_IDWT_fu_192_C_5_ce0;
wire    grp_IDWT_fu_192_C_5_we0;
wire   [15:0] grp_IDWT_fu_192_C_5_d0;
wire   [11:0] grp_IDWT_fu_192_C_6_address0;
wire    grp_IDWT_fu_192_C_6_ce0;
wire    grp_IDWT_fu_192_C_6_we0;
wire   [15:0] grp_IDWT_fu_192_C_6_d0;
wire   [11:0] grp_IDWT_fu_192_C_7_address0;
wire    grp_IDWT_fu_192_C_7_ce0;
wire    grp_IDWT_fu_192_C_7_we0;
wire   [15:0] grp_IDWT_fu_192_C_7_d0;
wire    grp_DWT_color_fu_204_ap_start;
wire    grp_DWT_color_fu_204_ap_done;
wire    grp_DWT_color_fu_204_ap_idle;
wire    grp_DWT_color_fu_204_ap_ready;
wire   [11:0] grp_DWT_color_fu_204_A_0_address0;
wire    grp_DWT_color_fu_204_A_0_ce0;
wire    grp_DWT_color_fu_204_A_0_we0;
wire   [15:0] grp_DWT_color_fu_204_A_0_d0;
wire   [11:0] grp_DWT_color_fu_204_A_1_address0;
wire    grp_DWT_color_fu_204_A_1_ce0;
wire    grp_DWT_color_fu_204_A_1_we0;
wire   [15:0] grp_DWT_color_fu_204_A_1_d0;
wire   [11:0] grp_DWT_color_fu_204_A_2_address0;
wire    grp_DWT_color_fu_204_A_2_ce0;
wire    grp_DWT_color_fu_204_A_2_we0;
wire   [15:0] grp_DWT_color_fu_204_A_2_d0;
wire   [11:0] grp_DWT_color_fu_204_A_3_address0;
wire    grp_DWT_color_fu_204_A_3_ce0;
wire    grp_DWT_color_fu_204_A_3_we0;
wire   [15:0] grp_DWT_color_fu_204_A_3_d0;
wire   [11:0] grp_DWT_color_fu_204_A_4_address0;
wire    grp_DWT_color_fu_204_A_4_ce0;
wire    grp_DWT_color_fu_204_A_4_we0;
wire   [15:0] grp_DWT_color_fu_204_A_4_d0;
wire   [11:0] grp_DWT_color_fu_204_A_5_address0;
wire    grp_DWT_color_fu_204_A_5_ce0;
wire    grp_DWT_color_fu_204_A_5_we0;
wire   [15:0] grp_DWT_color_fu_204_A_5_d0;
wire   [11:0] grp_DWT_color_fu_204_A_6_address0;
wire    grp_DWT_color_fu_204_A_6_ce0;
wire    grp_DWT_color_fu_204_A_6_we0;
wire   [15:0] grp_DWT_color_fu_204_A_6_d0;
wire   [11:0] grp_DWT_color_fu_204_A_7_address0;
wire    grp_DWT_color_fu_204_A_7_ce0;
wire    grp_DWT_color_fu_204_A_7_we0;
wire   [15:0] grp_DWT_color_fu_204_A_7_d0;
wire    grp_DWT_IR_fu_216_ap_start;
wire    grp_DWT_IR_fu_216_ap_done;
wire    grp_DWT_IR_fu_216_ap_idle;
wire    grp_DWT_IR_fu_216_ap_ready;
wire   [11:0] grp_DWT_IR_fu_216_B_0_address0;
wire    grp_DWT_IR_fu_216_B_0_ce0;
wire    grp_DWT_IR_fu_216_B_0_we0;
wire   [15:0] grp_DWT_IR_fu_216_B_0_d0;
wire   [11:0] grp_DWT_IR_fu_216_B_1_address0;
wire    grp_DWT_IR_fu_216_B_1_ce0;
wire    grp_DWT_IR_fu_216_B_1_we0;
wire   [15:0] grp_DWT_IR_fu_216_B_1_d0;
wire   [11:0] grp_DWT_IR_fu_216_B_2_address0;
wire    grp_DWT_IR_fu_216_B_2_ce0;
wire    grp_DWT_IR_fu_216_B_2_we0;
wire   [15:0] grp_DWT_IR_fu_216_B_2_d0;
wire   [11:0] grp_DWT_IR_fu_216_B_3_address0;
wire    grp_DWT_IR_fu_216_B_3_ce0;
wire    grp_DWT_IR_fu_216_B_3_we0;
wire   [15:0] grp_DWT_IR_fu_216_B_3_d0;
wire   [11:0] grp_DWT_IR_fu_216_B_4_address0;
wire    grp_DWT_IR_fu_216_B_4_ce0;
wire    grp_DWT_IR_fu_216_B_4_we0;
wire   [15:0] grp_DWT_IR_fu_216_B_4_d0;
wire   [11:0] grp_DWT_IR_fu_216_B_5_address0;
wire    grp_DWT_IR_fu_216_B_5_ce0;
wire    grp_DWT_IR_fu_216_B_5_we0;
wire   [15:0] grp_DWT_IR_fu_216_B_5_d0;
wire   [11:0] grp_DWT_IR_fu_216_B_6_address0;
wire    grp_DWT_IR_fu_216_B_6_ce0;
wire    grp_DWT_IR_fu_216_B_6_we0;
wire   [15:0] grp_DWT_IR_fu_216_B_6_d0;
wire   [11:0] grp_DWT_IR_fu_216_B_7_address0;
wire    grp_DWT_IR_fu_216_B_7_ce0;
wire    grp_DWT_IR_fu_216_B_7_we0;
wire   [15:0] grp_DWT_IR_fu_216_B_7_d0;
wire    grp_Filter_fu_228_ap_start;
wire    grp_Filter_fu_228_ap_done;
wire    grp_Filter_fu_228_ap_idle;
wire    grp_Filter_fu_228_ap_ready;
wire   [11:0] grp_Filter_fu_228_A_0_address0;
wire    grp_Filter_fu_228_A_0_ce0;
wire   [11:0] grp_Filter_fu_228_A_1_address0;
wire    grp_Filter_fu_228_A_1_ce0;
wire   [11:0] grp_Filter_fu_228_A_2_address0;
wire    grp_Filter_fu_228_A_2_ce0;
wire   [11:0] grp_Filter_fu_228_A_3_address0;
wire    grp_Filter_fu_228_A_3_ce0;
wire   [11:0] grp_Filter_fu_228_A_4_address0;
wire    grp_Filter_fu_228_A_4_ce0;
wire   [11:0] grp_Filter_fu_228_A_5_address0;
wire    grp_Filter_fu_228_A_5_ce0;
wire   [11:0] grp_Filter_fu_228_A_6_address0;
wire    grp_Filter_fu_228_A_6_ce0;
wire   [11:0] grp_Filter_fu_228_A_7_address0;
wire    grp_Filter_fu_228_A_7_ce0;
wire   [11:0] grp_Filter_fu_228_B_0_address0;
wire    grp_Filter_fu_228_B_0_ce0;
wire   [11:0] grp_Filter_fu_228_B_1_address0;
wire    grp_Filter_fu_228_B_1_ce0;
wire   [11:0] grp_Filter_fu_228_B_2_address0;
wire    grp_Filter_fu_228_B_2_ce0;
wire   [11:0] grp_Filter_fu_228_B_3_address0;
wire    grp_Filter_fu_228_B_3_ce0;
wire   [11:0] grp_Filter_fu_228_B_4_address0;
wire    grp_Filter_fu_228_B_4_ce0;
wire   [11:0] grp_Filter_fu_228_B_5_address0;
wire    grp_Filter_fu_228_B_5_ce0;
wire   [11:0] grp_Filter_fu_228_B_6_address0;
wire    grp_Filter_fu_228_B_6_ce0;
wire   [11:0] grp_Filter_fu_228_B_7_address0;
wire    grp_Filter_fu_228_B_7_ce0;
wire   [11:0] grp_Filter_fu_228_C_0_address0;
wire    grp_Filter_fu_228_C_0_ce0;
wire    grp_Filter_fu_228_C_0_we0;
wire   [15:0] grp_Filter_fu_228_C_0_d0;
wire   [11:0] grp_Filter_fu_228_C_1_address0;
wire    grp_Filter_fu_228_C_1_ce0;
wire    grp_Filter_fu_228_C_1_we0;
wire   [15:0] grp_Filter_fu_228_C_1_d0;
wire   [11:0] grp_Filter_fu_228_C_2_address0;
wire    grp_Filter_fu_228_C_2_ce0;
wire    grp_Filter_fu_228_C_2_we0;
wire   [15:0] grp_Filter_fu_228_C_2_d0;
wire   [11:0] grp_Filter_fu_228_C_3_address0;
wire    grp_Filter_fu_228_C_3_ce0;
wire    grp_Filter_fu_228_C_3_we0;
wire   [15:0] grp_Filter_fu_228_C_3_d0;
wire   [11:0] grp_Filter_fu_228_C_4_address0;
wire    grp_Filter_fu_228_C_4_ce0;
wire    grp_Filter_fu_228_C_4_we0;
wire   [15:0] grp_Filter_fu_228_C_4_d0;
wire   [11:0] grp_Filter_fu_228_C_5_address0;
wire    grp_Filter_fu_228_C_5_ce0;
wire    grp_Filter_fu_228_C_5_we0;
wire   [15:0] grp_Filter_fu_228_C_5_d0;
wire   [11:0] grp_Filter_fu_228_C_6_address0;
wire    grp_Filter_fu_228_C_6_ce0;
wire    grp_Filter_fu_228_C_6_we0;
wire   [15:0] grp_Filter_fu_228_C_6_d0;
wire   [11:0] grp_Filter_fu_228_C_7_address0;
wire    grp_Filter_fu_228_C_7_ce0;
wire    grp_Filter_fu_228_C_7_we0;
wire   [15:0] grp_Filter_fu_228_C_7_d0;
wire    grp_write_image_fu_256_ap_start;
wire    grp_write_image_fu_256_ap_done;
wire    grp_write_image_fu_256_ap_idle;
wire    grp_write_image_fu_256_ap_ready;
wire   [11:0] grp_write_image_fu_256_C_buffer_0_address0;
wire    grp_write_image_fu_256_C_buffer_0_ce0;
wire   [11:0] grp_write_image_fu_256_C_buffer_1_address0;
wire    grp_write_image_fu_256_C_buffer_1_ce0;
wire   [11:0] grp_write_image_fu_256_C_buffer_2_address0;
wire    grp_write_image_fu_256_C_buffer_2_ce0;
wire   [11:0] grp_write_image_fu_256_C_buffer_3_address0;
wire    grp_write_image_fu_256_C_buffer_3_ce0;
wire   [11:0] grp_write_image_fu_256_C_buffer_4_address0;
wire    grp_write_image_fu_256_C_buffer_4_ce0;
wire   [11:0] grp_write_image_fu_256_C_buffer_5_address0;
wire    grp_write_image_fu_256_C_buffer_5_ce0;
wire   [11:0] grp_write_image_fu_256_C_buffer_6_address0;
wire    grp_write_image_fu_256_C_buffer_6_ce0;
wire   [11:0] grp_write_image_fu_256_C_buffer_7_address0;
wire    grp_write_image_fu_256_C_buffer_7_ce0;
wire    grp_write_image_fu_256_m_axi_c_AWVALID;
wire   [31:0] grp_write_image_fu_256_m_axi_c_AWADDR;
wire   [0:0] grp_write_image_fu_256_m_axi_c_AWID;
wire   [31:0] grp_write_image_fu_256_m_axi_c_AWLEN;
wire   [2:0] grp_write_image_fu_256_m_axi_c_AWSIZE;
wire   [1:0] grp_write_image_fu_256_m_axi_c_AWBURST;
wire   [1:0] grp_write_image_fu_256_m_axi_c_AWLOCK;
wire   [3:0] grp_write_image_fu_256_m_axi_c_AWCACHE;
wire   [2:0] grp_write_image_fu_256_m_axi_c_AWPROT;
wire   [3:0] grp_write_image_fu_256_m_axi_c_AWQOS;
wire   [3:0] grp_write_image_fu_256_m_axi_c_AWREGION;
wire   [0:0] grp_write_image_fu_256_m_axi_c_AWUSER;
wire    grp_write_image_fu_256_m_axi_c_WVALID;
wire   [15:0] grp_write_image_fu_256_m_axi_c_WDATA;
wire   [1:0] grp_write_image_fu_256_m_axi_c_WSTRB;
wire    grp_write_image_fu_256_m_axi_c_WLAST;
wire   [0:0] grp_write_image_fu_256_m_axi_c_WID;
wire   [0:0] grp_write_image_fu_256_m_axi_c_WUSER;
wire    grp_write_image_fu_256_m_axi_c_ARVALID;
wire   [31:0] grp_write_image_fu_256_m_axi_c_ARADDR;
wire   [0:0] grp_write_image_fu_256_m_axi_c_ARID;
wire   [31:0] grp_write_image_fu_256_m_axi_c_ARLEN;
wire   [2:0] grp_write_image_fu_256_m_axi_c_ARSIZE;
wire   [1:0] grp_write_image_fu_256_m_axi_c_ARBURST;
wire   [1:0] grp_write_image_fu_256_m_axi_c_ARLOCK;
wire   [3:0] grp_write_image_fu_256_m_axi_c_ARCACHE;
wire   [2:0] grp_write_image_fu_256_m_axi_c_ARPROT;
wire   [3:0] grp_write_image_fu_256_m_axi_c_ARQOS;
wire   [3:0] grp_write_image_fu_256_m_axi_c_ARREGION;
wire   [0:0] grp_write_image_fu_256_m_axi_c_ARUSER;
wire    grp_write_image_fu_256_m_axi_c_RREADY;
wire    grp_write_image_fu_256_m_axi_c_BREADY;
wire    grp_read_color_fu_271_ap_start;
wire    grp_read_color_fu_271_ap_done;
wire    grp_read_color_fu_271_ap_idle;
wire    grp_read_color_fu_271_ap_ready;
wire    grp_read_color_fu_271_m_axi_a_AWVALID;
wire   [31:0] grp_read_color_fu_271_m_axi_a_AWADDR;
wire   [0:0] grp_read_color_fu_271_m_axi_a_AWID;
wire   [31:0] grp_read_color_fu_271_m_axi_a_AWLEN;
wire   [2:0] grp_read_color_fu_271_m_axi_a_AWSIZE;
wire   [1:0] grp_read_color_fu_271_m_axi_a_AWBURST;
wire   [1:0] grp_read_color_fu_271_m_axi_a_AWLOCK;
wire   [3:0] grp_read_color_fu_271_m_axi_a_AWCACHE;
wire   [2:0] grp_read_color_fu_271_m_axi_a_AWPROT;
wire   [3:0] grp_read_color_fu_271_m_axi_a_AWQOS;
wire   [3:0] grp_read_color_fu_271_m_axi_a_AWREGION;
wire   [0:0] grp_read_color_fu_271_m_axi_a_AWUSER;
wire    grp_read_color_fu_271_m_axi_a_WVALID;
wire   [15:0] grp_read_color_fu_271_m_axi_a_WDATA;
wire   [1:0] grp_read_color_fu_271_m_axi_a_WSTRB;
wire    grp_read_color_fu_271_m_axi_a_WLAST;
wire   [0:0] grp_read_color_fu_271_m_axi_a_WID;
wire   [0:0] grp_read_color_fu_271_m_axi_a_WUSER;
wire    grp_read_color_fu_271_m_axi_a_ARVALID;
wire   [31:0] grp_read_color_fu_271_m_axi_a_ARADDR;
wire   [0:0] grp_read_color_fu_271_m_axi_a_ARID;
wire   [31:0] grp_read_color_fu_271_m_axi_a_ARLEN;
wire   [2:0] grp_read_color_fu_271_m_axi_a_ARSIZE;
wire   [1:0] grp_read_color_fu_271_m_axi_a_ARBURST;
wire   [1:0] grp_read_color_fu_271_m_axi_a_ARLOCK;
wire   [3:0] grp_read_color_fu_271_m_axi_a_ARCACHE;
wire   [2:0] grp_read_color_fu_271_m_axi_a_ARPROT;
wire   [3:0] grp_read_color_fu_271_m_axi_a_ARQOS;
wire   [3:0] grp_read_color_fu_271_m_axi_a_ARREGION;
wire   [0:0] grp_read_color_fu_271_m_axi_a_ARUSER;
wire    grp_read_color_fu_271_m_axi_a_RREADY;
wire    grp_read_color_fu_271_m_axi_a_BREADY;
wire   [11:0] grp_read_color_fu_271_A_buffer_0_address0;
wire    grp_read_color_fu_271_A_buffer_0_ce0;
wire    grp_read_color_fu_271_A_buffer_0_we0;
wire   [15:0] grp_read_color_fu_271_A_buffer_0_d0;
wire   [11:0] grp_read_color_fu_271_A_buffer_1_address0;
wire    grp_read_color_fu_271_A_buffer_1_ce0;
wire    grp_read_color_fu_271_A_buffer_1_we0;
wire   [15:0] grp_read_color_fu_271_A_buffer_1_d0;
wire   [11:0] grp_read_color_fu_271_A_buffer_2_address0;
wire    grp_read_color_fu_271_A_buffer_2_ce0;
wire    grp_read_color_fu_271_A_buffer_2_we0;
wire   [15:0] grp_read_color_fu_271_A_buffer_2_d0;
wire   [11:0] grp_read_color_fu_271_A_buffer_3_address0;
wire    grp_read_color_fu_271_A_buffer_3_ce0;
wire    grp_read_color_fu_271_A_buffer_3_we0;
wire   [15:0] grp_read_color_fu_271_A_buffer_3_d0;
wire   [11:0] grp_read_color_fu_271_A_buffer_4_address0;
wire    grp_read_color_fu_271_A_buffer_4_ce0;
wire    grp_read_color_fu_271_A_buffer_4_we0;
wire   [15:0] grp_read_color_fu_271_A_buffer_4_d0;
wire   [11:0] grp_read_color_fu_271_A_buffer_5_address0;
wire    grp_read_color_fu_271_A_buffer_5_ce0;
wire    grp_read_color_fu_271_A_buffer_5_we0;
wire   [15:0] grp_read_color_fu_271_A_buffer_5_d0;
wire   [11:0] grp_read_color_fu_271_A_buffer_6_address0;
wire    grp_read_color_fu_271_A_buffer_6_ce0;
wire    grp_read_color_fu_271_A_buffer_6_we0;
wire   [15:0] grp_read_color_fu_271_A_buffer_6_d0;
wire   [11:0] grp_read_color_fu_271_A_buffer_7_address0;
wire    grp_read_color_fu_271_A_buffer_7_ce0;
wire    grp_read_color_fu_271_A_buffer_7_we0;
wire   [15:0] grp_read_color_fu_271_A_buffer_7_d0;
wire    grp_read_IR_fu_294_ap_start;
wire    grp_read_IR_fu_294_ap_done;
wire    grp_read_IR_fu_294_ap_idle;
wire    grp_read_IR_fu_294_ap_ready;
wire    grp_read_IR_fu_294_m_axi_b_AWVALID;
wire   [31:0] grp_read_IR_fu_294_m_axi_b_AWADDR;
wire   [0:0] grp_read_IR_fu_294_m_axi_b_AWID;
wire   [31:0] grp_read_IR_fu_294_m_axi_b_AWLEN;
wire   [2:0] grp_read_IR_fu_294_m_axi_b_AWSIZE;
wire   [1:0] grp_read_IR_fu_294_m_axi_b_AWBURST;
wire   [1:0] grp_read_IR_fu_294_m_axi_b_AWLOCK;
wire   [3:0] grp_read_IR_fu_294_m_axi_b_AWCACHE;
wire   [2:0] grp_read_IR_fu_294_m_axi_b_AWPROT;
wire   [3:0] grp_read_IR_fu_294_m_axi_b_AWQOS;
wire   [3:0] grp_read_IR_fu_294_m_axi_b_AWREGION;
wire   [0:0] grp_read_IR_fu_294_m_axi_b_AWUSER;
wire    grp_read_IR_fu_294_m_axi_b_WVALID;
wire   [15:0] grp_read_IR_fu_294_m_axi_b_WDATA;
wire   [1:0] grp_read_IR_fu_294_m_axi_b_WSTRB;
wire    grp_read_IR_fu_294_m_axi_b_WLAST;
wire   [0:0] grp_read_IR_fu_294_m_axi_b_WID;
wire   [0:0] grp_read_IR_fu_294_m_axi_b_WUSER;
wire    grp_read_IR_fu_294_m_axi_b_ARVALID;
wire   [31:0] grp_read_IR_fu_294_m_axi_b_ARADDR;
wire   [0:0] grp_read_IR_fu_294_m_axi_b_ARID;
wire   [31:0] grp_read_IR_fu_294_m_axi_b_ARLEN;
wire   [2:0] grp_read_IR_fu_294_m_axi_b_ARSIZE;
wire   [1:0] grp_read_IR_fu_294_m_axi_b_ARBURST;
wire   [1:0] grp_read_IR_fu_294_m_axi_b_ARLOCK;
wire   [3:0] grp_read_IR_fu_294_m_axi_b_ARCACHE;
wire   [2:0] grp_read_IR_fu_294_m_axi_b_ARPROT;
wire   [3:0] grp_read_IR_fu_294_m_axi_b_ARQOS;
wire   [3:0] grp_read_IR_fu_294_m_axi_b_ARREGION;
wire   [0:0] grp_read_IR_fu_294_m_axi_b_ARUSER;
wire    grp_read_IR_fu_294_m_axi_b_RREADY;
wire    grp_read_IR_fu_294_m_axi_b_BREADY;
wire   [11:0] grp_read_IR_fu_294_B_buffer_0_address0;
wire    grp_read_IR_fu_294_B_buffer_0_ce0;
wire    grp_read_IR_fu_294_B_buffer_0_we0;
wire   [15:0] grp_read_IR_fu_294_B_buffer_0_d0;
wire   [11:0] grp_read_IR_fu_294_B_buffer_1_address0;
wire    grp_read_IR_fu_294_B_buffer_1_ce0;
wire    grp_read_IR_fu_294_B_buffer_1_we0;
wire   [15:0] grp_read_IR_fu_294_B_buffer_1_d0;
wire   [11:0] grp_read_IR_fu_294_B_buffer_2_address0;
wire    grp_read_IR_fu_294_B_buffer_2_ce0;
wire    grp_read_IR_fu_294_B_buffer_2_we0;
wire   [15:0] grp_read_IR_fu_294_B_buffer_2_d0;
wire   [11:0] grp_read_IR_fu_294_B_buffer_3_address0;
wire    grp_read_IR_fu_294_B_buffer_3_ce0;
wire    grp_read_IR_fu_294_B_buffer_3_we0;
wire   [15:0] grp_read_IR_fu_294_B_buffer_3_d0;
wire   [11:0] grp_read_IR_fu_294_B_buffer_4_address0;
wire    grp_read_IR_fu_294_B_buffer_4_ce0;
wire    grp_read_IR_fu_294_B_buffer_4_we0;
wire   [15:0] grp_read_IR_fu_294_B_buffer_4_d0;
wire   [11:0] grp_read_IR_fu_294_B_buffer_5_address0;
wire    grp_read_IR_fu_294_B_buffer_5_ce0;
wire    grp_read_IR_fu_294_B_buffer_5_we0;
wire   [15:0] grp_read_IR_fu_294_B_buffer_5_d0;
wire   [11:0] grp_read_IR_fu_294_B_buffer_6_address0;
wire    grp_read_IR_fu_294_B_buffer_6_ce0;
wire    grp_read_IR_fu_294_B_buffer_6_we0;
wire   [15:0] grp_read_IR_fu_294_B_buffer_6_d0;
wire   [11:0] grp_read_IR_fu_294_B_buffer_7_address0;
wire    grp_read_IR_fu_294_B_buffer_7_ce0;
wire    grp_read_IR_fu_294_B_buffer_7_we0;
wire   [15:0] grp_read_IR_fu_294_B_buffer_7_d0;
reg    grp_IDWT_fu_192_ap_start_reg;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg    grp_DWT_color_fu_204_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg    grp_DWT_IR_fu_216_ap_start_reg;
reg    grp_Filter_fu_228_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg    grp_write_image_fu_256_ap_start_reg;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
reg    grp_read_color_fu_271_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_read_IR_fu_294_ap_start_reg;
reg   [9:0] ap_NS_fsm;
reg    ap_block_state2_on_subcall_done;
reg    ap_block_state4_on_subcall_done;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 grp_IDWT_fu_192_ap_start_reg = 1'b0;
#0 grp_DWT_color_fu_204_ap_start_reg = 1'b0;
#0 grp_DWT_IR_fu_216_ap_start_reg = 1'b0;
#0 grp_Filter_fu_228_ap_start_reg = 1'b0;
#0 grp_write_image_fu_256_ap_start_reg = 1'b0;
#0 grp_read_color_fu_271_ap_start_reg = 1'b0;
#0 grp_read_IR_fu_294_ap_start_reg = 1'b0;
end

DWT_Accel_CTL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTL_DATA_WIDTH ))
DWT_Accel_CTL_s_axi_U(
    .AWVALID(s_axi_CTL_AWVALID),
    .AWREADY(s_axi_CTL_AWREADY),
    .AWADDR(s_axi_CTL_AWADDR),
    .WVALID(s_axi_CTL_WVALID),
    .WREADY(s_axi_CTL_WREADY),
    .WDATA(s_axi_CTL_WDATA),
    .WSTRB(s_axi_CTL_WSTRB),
    .ARVALID(s_axi_CTL_ARVALID),
    .ARREADY(s_axi_CTL_ARREADY),
    .ARADDR(s_axi_CTL_ARADDR),
    .RVALID(s_axi_CTL_RVALID),
    .RREADY(s_axi_CTL_RREADY),
    .RDATA(s_axi_CTL_RDATA),
    .RRESP(s_axi_CTL_RRESP),
    .BVALID(s_axi_CTL_BVALID),
    .BREADY(s_axi_CTL_BREADY),
    .BRESP(s_axi_CTL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .a(a),
    .b(b),
    .c(c)
);

DWT_Accel_DATA_A_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_A_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_A_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_A_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_A_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_A_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_A_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_A_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_A_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_A_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_A_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_A_CACHE_VALUE ))
DWT_Accel_DATA_A_m_axi_U(
    .AWVALID(m_axi_DATA_A_AWVALID),
    .AWREADY(m_axi_DATA_A_AWREADY),
    .AWADDR(m_axi_DATA_A_AWADDR),
    .AWID(m_axi_DATA_A_AWID),
    .AWLEN(m_axi_DATA_A_AWLEN),
    .AWSIZE(m_axi_DATA_A_AWSIZE),
    .AWBURST(m_axi_DATA_A_AWBURST),
    .AWLOCK(m_axi_DATA_A_AWLOCK),
    .AWCACHE(m_axi_DATA_A_AWCACHE),
    .AWPROT(m_axi_DATA_A_AWPROT),
    .AWQOS(m_axi_DATA_A_AWQOS),
    .AWREGION(m_axi_DATA_A_AWREGION),
    .AWUSER(m_axi_DATA_A_AWUSER),
    .WVALID(m_axi_DATA_A_WVALID),
    .WREADY(m_axi_DATA_A_WREADY),
    .WDATA(m_axi_DATA_A_WDATA),
    .WSTRB(m_axi_DATA_A_WSTRB),
    .WLAST(m_axi_DATA_A_WLAST),
    .WID(m_axi_DATA_A_WID),
    .WUSER(m_axi_DATA_A_WUSER),
    .ARVALID(m_axi_DATA_A_ARVALID),
    .ARREADY(m_axi_DATA_A_ARREADY),
    .ARADDR(m_axi_DATA_A_ARADDR),
    .ARID(m_axi_DATA_A_ARID),
    .ARLEN(m_axi_DATA_A_ARLEN),
    .ARSIZE(m_axi_DATA_A_ARSIZE),
    .ARBURST(m_axi_DATA_A_ARBURST),
    .ARLOCK(m_axi_DATA_A_ARLOCK),
    .ARCACHE(m_axi_DATA_A_ARCACHE),
    .ARPROT(m_axi_DATA_A_ARPROT),
    .ARQOS(m_axi_DATA_A_ARQOS),
    .ARREGION(m_axi_DATA_A_ARREGION),
    .ARUSER(m_axi_DATA_A_ARUSER),
    .RVALID(m_axi_DATA_A_RVALID),
    .RREADY(m_axi_DATA_A_RREADY),
    .RDATA(m_axi_DATA_A_RDATA),
    .RLAST(m_axi_DATA_A_RLAST),
    .RID(m_axi_DATA_A_RID),
    .RUSER(m_axi_DATA_A_RUSER),
    .RRESP(m_axi_DATA_A_RRESP),
    .BVALID(m_axi_DATA_A_BVALID),
    .BREADY(m_axi_DATA_A_BREADY),
    .BRESP(m_axi_DATA_A_BRESP),
    .BID(m_axi_DATA_A_BID),
    .BUSER(m_axi_DATA_A_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(DATA_A_ARVALID),
    .I_ARREADY(DATA_A_ARREADY),
    .I_ARADDR(grp_read_color_fu_271_m_axi_a_ARADDR),
    .I_ARID(grp_read_color_fu_271_m_axi_a_ARID),
    .I_ARLEN(grp_read_color_fu_271_m_axi_a_ARLEN),
    .I_ARSIZE(grp_read_color_fu_271_m_axi_a_ARSIZE),
    .I_ARLOCK(grp_read_color_fu_271_m_axi_a_ARLOCK),
    .I_ARCACHE(grp_read_color_fu_271_m_axi_a_ARCACHE),
    .I_ARQOS(grp_read_color_fu_271_m_axi_a_ARQOS),
    .I_ARPROT(grp_read_color_fu_271_m_axi_a_ARPROT),
    .I_ARUSER(grp_read_color_fu_271_m_axi_a_ARUSER),
    .I_ARBURST(grp_read_color_fu_271_m_axi_a_ARBURST),
    .I_ARREGION(grp_read_color_fu_271_m_axi_a_ARREGION),
    .I_RVALID(DATA_A_RVALID),
    .I_RREADY(DATA_A_RREADY),
    .I_RDATA(DATA_A_RDATA),
    .I_RID(DATA_A_RID),
    .I_RUSER(DATA_A_RUSER),
    .I_RRESP(DATA_A_RRESP),
    .I_RLAST(DATA_A_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(DATA_A_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(DATA_A_WREADY),
    .I_WDATA(16'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd0),
    .I_BVALID(DATA_A_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(DATA_A_BRESP),
    .I_BID(DATA_A_BID),
    .I_BUSER(DATA_A_BUSER)
);

DWT_Accel_DATA_B_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_B_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_B_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_B_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_B_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_B_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_B_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_B_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_B_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_B_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_B_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_B_CACHE_VALUE ))
DWT_Accel_DATA_B_m_axi_U(
    .AWVALID(m_axi_DATA_B_AWVALID),
    .AWREADY(m_axi_DATA_B_AWREADY),
    .AWADDR(m_axi_DATA_B_AWADDR),
    .AWID(m_axi_DATA_B_AWID),
    .AWLEN(m_axi_DATA_B_AWLEN),
    .AWSIZE(m_axi_DATA_B_AWSIZE),
    .AWBURST(m_axi_DATA_B_AWBURST),
    .AWLOCK(m_axi_DATA_B_AWLOCK),
    .AWCACHE(m_axi_DATA_B_AWCACHE),
    .AWPROT(m_axi_DATA_B_AWPROT),
    .AWQOS(m_axi_DATA_B_AWQOS),
    .AWREGION(m_axi_DATA_B_AWREGION),
    .AWUSER(m_axi_DATA_B_AWUSER),
    .WVALID(m_axi_DATA_B_WVALID),
    .WREADY(m_axi_DATA_B_WREADY),
    .WDATA(m_axi_DATA_B_WDATA),
    .WSTRB(m_axi_DATA_B_WSTRB),
    .WLAST(m_axi_DATA_B_WLAST),
    .WID(m_axi_DATA_B_WID),
    .WUSER(m_axi_DATA_B_WUSER),
    .ARVALID(m_axi_DATA_B_ARVALID),
    .ARREADY(m_axi_DATA_B_ARREADY),
    .ARADDR(m_axi_DATA_B_ARADDR),
    .ARID(m_axi_DATA_B_ARID),
    .ARLEN(m_axi_DATA_B_ARLEN),
    .ARSIZE(m_axi_DATA_B_ARSIZE),
    .ARBURST(m_axi_DATA_B_ARBURST),
    .ARLOCK(m_axi_DATA_B_ARLOCK),
    .ARCACHE(m_axi_DATA_B_ARCACHE),
    .ARPROT(m_axi_DATA_B_ARPROT),
    .ARQOS(m_axi_DATA_B_ARQOS),
    .ARREGION(m_axi_DATA_B_ARREGION),
    .ARUSER(m_axi_DATA_B_ARUSER),
    .RVALID(m_axi_DATA_B_RVALID),
    .RREADY(m_axi_DATA_B_RREADY),
    .RDATA(m_axi_DATA_B_RDATA),
    .RLAST(m_axi_DATA_B_RLAST),
    .RID(m_axi_DATA_B_RID),
    .RUSER(m_axi_DATA_B_RUSER),
    .RRESP(m_axi_DATA_B_RRESP),
    .BVALID(m_axi_DATA_B_BVALID),
    .BREADY(m_axi_DATA_B_BREADY),
    .BRESP(m_axi_DATA_B_BRESP),
    .BID(m_axi_DATA_B_BID),
    .BUSER(m_axi_DATA_B_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(DATA_B_ARVALID),
    .I_ARREADY(DATA_B_ARREADY),
    .I_ARADDR(grp_read_IR_fu_294_m_axi_b_ARADDR),
    .I_ARID(grp_read_IR_fu_294_m_axi_b_ARID),
    .I_ARLEN(grp_read_IR_fu_294_m_axi_b_ARLEN),
    .I_ARSIZE(grp_read_IR_fu_294_m_axi_b_ARSIZE),
    .I_ARLOCK(grp_read_IR_fu_294_m_axi_b_ARLOCK),
    .I_ARCACHE(grp_read_IR_fu_294_m_axi_b_ARCACHE),
    .I_ARQOS(grp_read_IR_fu_294_m_axi_b_ARQOS),
    .I_ARPROT(grp_read_IR_fu_294_m_axi_b_ARPROT),
    .I_ARUSER(grp_read_IR_fu_294_m_axi_b_ARUSER),
    .I_ARBURST(grp_read_IR_fu_294_m_axi_b_ARBURST),
    .I_ARREGION(grp_read_IR_fu_294_m_axi_b_ARREGION),
    .I_RVALID(DATA_B_RVALID),
    .I_RREADY(DATA_B_RREADY),
    .I_RDATA(DATA_B_RDATA),
    .I_RID(DATA_B_RID),
    .I_RUSER(DATA_B_RUSER),
    .I_RRESP(DATA_B_RRESP),
    .I_RLAST(DATA_B_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(DATA_B_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(DATA_B_WREADY),
    .I_WDATA(16'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd0),
    .I_BVALID(DATA_B_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(DATA_B_BRESP),
    .I_BID(DATA_B_BID),
    .I_BUSER(DATA_B_BUSER)
);

DWT_Accel_DATA_C_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_C_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_C_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_C_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_C_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_C_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_C_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_C_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_C_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_C_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_C_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_C_CACHE_VALUE ))
DWT_Accel_DATA_C_m_axi_U(
    .AWVALID(m_axi_DATA_C_AWVALID),
    .AWREADY(m_axi_DATA_C_AWREADY),
    .AWADDR(m_axi_DATA_C_AWADDR),
    .AWID(m_axi_DATA_C_AWID),
    .AWLEN(m_axi_DATA_C_AWLEN),
    .AWSIZE(m_axi_DATA_C_AWSIZE),
    .AWBURST(m_axi_DATA_C_AWBURST),
    .AWLOCK(m_axi_DATA_C_AWLOCK),
    .AWCACHE(m_axi_DATA_C_AWCACHE),
    .AWPROT(m_axi_DATA_C_AWPROT),
    .AWQOS(m_axi_DATA_C_AWQOS),
    .AWREGION(m_axi_DATA_C_AWREGION),
    .AWUSER(m_axi_DATA_C_AWUSER),
    .WVALID(m_axi_DATA_C_WVALID),
    .WREADY(m_axi_DATA_C_WREADY),
    .WDATA(m_axi_DATA_C_WDATA),
    .WSTRB(m_axi_DATA_C_WSTRB),
    .WLAST(m_axi_DATA_C_WLAST),
    .WID(m_axi_DATA_C_WID),
    .WUSER(m_axi_DATA_C_WUSER),
    .ARVALID(m_axi_DATA_C_ARVALID),
    .ARREADY(m_axi_DATA_C_ARREADY),
    .ARADDR(m_axi_DATA_C_ARADDR),
    .ARID(m_axi_DATA_C_ARID),
    .ARLEN(m_axi_DATA_C_ARLEN),
    .ARSIZE(m_axi_DATA_C_ARSIZE),
    .ARBURST(m_axi_DATA_C_ARBURST),
    .ARLOCK(m_axi_DATA_C_ARLOCK),
    .ARCACHE(m_axi_DATA_C_ARCACHE),
    .ARPROT(m_axi_DATA_C_ARPROT),
    .ARQOS(m_axi_DATA_C_ARQOS),
    .ARREGION(m_axi_DATA_C_ARREGION),
    .ARUSER(m_axi_DATA_C_ARUSER),
    .RVALID(m_axi_DATA_C_RVALID),
    .RREADY(m_axi_DATA_C_RREADY),
    .RDATA(m_axi_DATA_C_RDATA),
    .RLAST(m_axi_DATA_C_RLAST),
    .RID(m_axi_DATA_C_RID),
    .RUSER(m_axi_DATA_C_RUSER),
    .RRESP(m_axi_DATA_C_RRESP),
    .BVALID(m_axi_DATA_C_BVALID),
    .BREADY(m_axi_DATA_C_BREADY),
    .BRESP(m_axi_DATA_C_BRESP),
    .BID(m_axi_DATA_C_BID),
    .BUSER(m_axi_DATA_C_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(DATA_C_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(DATA_C_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(DATA_C_RDATA),
    .I_RID(DATA_C_RID),
    .I_RUSER(DATA_C_RUSER),
    .I_RRESP(DATA_C_RRESP),
    .I_RLAST(DATA_C_RLAST),
    .I_AWVALID(DATA_C_AWVALID),
    .I_AWREADY(DATA_C_AWREADY),
    .I_AWADDR(grp_write_image_fu_256_m_axi_c_AWADDR),
    .I_AWID(grp_write_image_fu_256_m_axi_c_AWID),
    .I_AWLEN(grp_write_image_fu_256_m_axi_c_AWLEN),
    .I_AWSIZE(grp_write_image_fu_256_m_axi_c_AWSIZE),
    .I_AWLOCK(grp_write_image_fu_256_m_axi_c_AWLOCK),
    .I_AWCACHE(grp_write_image_fu_256_m_axi_c_AWCACHE),
    .I_AWQOS(grp_write_image_fu_256_m_axi_c_AWQOS),
    .I_AWPROT(grp_write_image_fu_256_m_axi_c_AWPROT),
    .I_AWUSER(grp_write_image_fu_256_m_axi_c_AWUSER),
    .I_AWBURST(grp_write_image_fu_256_m_axi_c_AWBURST),
    .I_AWREGION(grp_write_image_fu_256_m_axi_c_AWREGION),
    .I_WVALID(DATA_C_WVALID),
    .I_WREADY(DATA_C_WREADY),
    .I_WDATA(grp_write_image_fu_256_m_axi_c_WDATA),
    .I_WID(grp_write_image_fu_256_m_axi_c_WID),
    .I_WUSER(grp_write_image_fu_256_m_axi_c_WUSER),
    .I_WLAST(grp_write_image_fu_256_m_axi_c_WLAST),
    .I_WSTRB(grp_write_image_fu_256_m_axi_c_WSTRB),
    .I_BVALID(DATA_C_BVALID),
    .I_BREADY(DATA_C_BREADY),
    .I_BRESP(DATA_C_BRESP),
    .I_BID(DATA_C_BID),
    .I_BUSER(DATA_C_BUSER)
);

DWT_Accel_A_buffelbW #(
    .DataWidth( 16 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
A_buffer_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(A_buffer_0_address0),
    .ce0(A_buffer_0_ce0),
    .we0(A_buffer_0_we0),
    .d0(A_buffer_0_d0),
    .q0(A_buffer_0_q0)
);

DWT_Accel_A_buffelbW #(
    .DataWidth( 16 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
A_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(A_buffer_1_address0),
    .ce0(A_buffer_1_ce0),
    .we0(A_buffer_1_we0),
    .d0(A_buffer_1_d0),
    .q0(A_buffer_1_q0)
);

DWT_Accel_A_buffelbW #(
    .DataWidth( 16 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
A_buffer_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(A_buffer_2_address0),
    .ce0(A_buffer_2_ce0),
    .we0(A_buffer_2_we0),
    .d0(A_buffer_2_d0),
    .q0(A_buffer_2_q0)
);

DWT_Accel_A_buffelbW #(
    .DataWidth( 16 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
A_buffer_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(A_buffer_3_address0),
    .ce0(A_buffer_3_ce0),
    .we0(A_buffer_3_we0),
    .d0(A_buffer_3_d0),
    .q0(A_buffer_3_q0)
);

DWT_Accel_A_buffelbW #(
    .DataWidth( 16 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
A_buffer_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(A_buffer_4_address0),
    .ce0(A_buffer_4_ce0),
    .we0(A_buffer_4_we0),
    .d0(A_buffer_4_d0),
    .q0(A_buffer_4_q0)
);

DWT_Accel_A_buffelbW #(
    .DataWidth( 16 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
A_buffer_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(A_buffer_5_address0),
    .ce0(A_buffer_5_ce0),
    .we0(A_buffer_5_we0),
    .d0(A_buffer_5_d0),
    .q0(A_buffer_5_q0)
);

DWT_Accel_A_buffelbW #(
    .DataWidth( 16 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
A_buffer_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(A_buffer_6_address0),
    .ce0(A_buffer_6_ce0),
    .we0(A_buffer_6_we0),
    .d0(A_buffer_6_d0),
    .q0(A_buffer_6_q0)
);

DWT_Accel_A_buffelbW #(
    .DataWidth( 16 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
A_buffer_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(A_buffer_7_address0),
    .ce0(A_buffer_7_ce0),
    .we0(A_buffer_7_we0),
    .d0(A_buffer_7_d0),
    .q0(A_buffer_7_q0)
);

DWT_Accel_A_buffelbW #(
    .DataWidth( 16 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
B_buffer_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(B_buffer_0_address0),
    .ce0(B_buffer_0_ce0),
    .we0(B_buffer_0_we0),
    .d0(B_buffer_0_d0),
    .q0(B_buffer_0_q0)
);

DWT_Accel_A_buffelbW #(
    .DataWidth( 16 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
B_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(B_buffer_1_address0),
    .ce0(B_buffer_1_ce0),
    .we0(B_buffer_1_we0),
    .d0(B_buffer_1_d0),
    .q0(B_buffer_1_q0)
);

DWT_Accel_A_buffelbW #(
    .DataWidth( 16 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
B_buffer_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(B_buffer_2_address0),
    .ce0(B_buffer_2_ce0),
    .we0(B_buffer_2_we0),
    .d0(B_buffer_2_d0),
    .q0(B_buffer_2_q0)
);

DWT_Accel_A_buffelbW #(
    .DataWidth( 16 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
B_buffer_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(B_buffer_3_address0),
    .ce0(B_buffer_3_ce0),
    .we0(B_buffer_3_we0),
    .d0(B_buffer_3_d0),
    .q0(B_buffer_3_q0)
);

DWT_Accel_A_buffelbW #(
    .DataWidth( 16 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
B_buffer_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(B_buffer_4_address0),
    .ce0(B_buffer_4_ce0),
    .we0(B_buffer_4_we0),
    .d0(B_buffer_4_d0),
    .q0(B_buffer_4_q0)
);

DWT_Accel_A_buffelbW #(
    .DataWidth( 16 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
B_buffer_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(B_buffer_5_address0),
    .ce0(B_buffer_5_ce0),
    .we0(B_buffer_5_we0),
    .d0(B_buffer_5_d0),
    .q0(B_buffer_5_q0)
);

DWT_Accel_A_buffelbW #(
    .DataWidth( 16 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
B_buffer_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(B_buffer_6_address0),
    .ce0(B_buffer_6_ce0),
    .we0(B_buffer_6_we0),
    .d0(B_buffer_6_d0),
    .q0(B_buffer_6_q0)
);

DWT_Accel_A_buffelbW #(
    .DataWidth( 16 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
B_buffer_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(B_buffer_7_address0),
    .ce0(B_buffer_7_ce0),
    .we0(B_buffer_7_we0),
    .d0(B_buffer_7_d0),
    .q0(B_buffer_7_q0)
);

DWT_Accel_A_buffelbW #(
    .DataWidth( 16 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
C_buffer_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(C_buffer_0_address0),
    .ce0(C_buffer_0_ce0),
    .we0(C_buffer_0_we0),
    .d0(C_buffer_0_d0),
    .q0(C_buffer_0_q0)
);

DWT_Accel_A_buffelbW #(
    .DataWidth( 16 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
C_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(C_buffer_1_address0),
    .ce0(C_buffer_1_ce0),
    .we0(C_buffer_1_we0),
    .d0(C_buffer_1_d0),
    .q0(C_buffer_1_q0)
);

DWT_Accel_A_buffelbW #(
    .DataWidth( 16 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
C_buffer_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(C_buffer_2_address0),
    .ce0(C_buffer_2_ce0),
    .we0(C_buffer_2_we0),
    .d0(C_buffer_2_d0),
    .q0(C_buffer_2_q0)
);

DWT_Accel_A_buffelbW #(
    .DataWidth( 16 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
C_buffer_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(C_buffer_3_address0),
    .ce0(C_buffer_3_ce0),
    .we0(C_buffer_3_we0),
    .d0(C_buffer_3_d0),
    .q0(C_buffer_3_q0)
);

DWT_Accel_A_buffelbW #(
    .DataWidth( 16 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
C_buffer_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(C_buffer_4_address0),
    .ce0(C_buffer_4_ce0),
    .we0(C_buffer_4_we0),
    .d0(C_buffer_4_d0),
    .q0(C_buffer_4_q0)
);

DWT_Accel_A_buffelbW #(
    .DataWidth( 16 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
C_buffer_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(C_buffer_5_address0),
    .ce0(C_buffer_5_ce0),
    .we0(C_buffer_5_we0),
    .d0(C_buffer_5_d0),
    .q0(C_buffer_5_q0)
);

DWT_Accel_A_buffelbW #(
    .DataWidth( 16 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
C_buffer_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(C_buffer_6_address0),
    .ce0(C_buffer_6_ce0),
    .we0(C_buffer_6_we0),
    .d0(C_buffer_6_d0),
    .q0(C_buffer_6_q0)
);

DWT_Accel_A_buffelbW #(
    .DataWidth( 16 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
C_buffer_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(C_buffer_7_address0),
    .ce0(C_buffer_7_ce0),
    .we0(C_buffer_7_we0),
    .d0(C_buffer_7_d0),
    .q0(C_buffer_7_q0)
);

IDWT grp_IDWT_fu_192(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_IDWT_fu_192_ap_start),
    .ap_done(grp_IDWT_fu_192_ap_done),
    .ap_idle(grp_IDWT_fu_192_ap_idle),
    .ap_ready(grp_IDWT_fu_192_ap_ready),
    .C_0_address0(grp_IDWT_fu_192_C_0_address0),
    .C_0_ce0(grp_IDWT_fu_192_C_0_ce0),
    .C_0_we0(grp_IDWT_fu_192_C_0_we0),
    .C_0_d0(grp_IDWT_fu_192_C_0_d0),
    .C_0_q0(C_buffer_0_q0),
    .C_1_address0(grp_IDWT_fu_192_C_1_address0),
    .C_1_ce0(grp_IDWT_fu_192_C_1_ce0),
    .C_1_we0(grp_IDWT_fu_192_C_1_we0),
    .C_1_d0(grp_IDWT_fu_192_C_1_d0),
    .C_1_q0(C_buffer_1_q0),
    .C_2_address0(grp_IDWT_fu_192_C_2_address0),
    .C_2_ce0(grp_IDWT_fu_192_C_2_ce0),
    .C_2_we0(grp_IDWT_fu_192_C_2_we0),
    .C_2_d0(grp_IDWT_fu_192_C_2_d0),
    .C_2_q0(C_buffer_2_q0),
    .C_3_address0(grp_IDWT_fu_192_C_3_address0),
    .C_3_ce0(grp_IDWT_fu_192_C_3_ce0),
    .C_3_we0(grp_IDWT_fu_192_C_3_we0),
    .C_3_d0(grp_IDWT_fu_192_C_3_d0),
    .C_3_q0(C_buffer_3_q0),
    .C_4_address0(grp_IDWT_fu_192_C_4_address0),
    .C_4_ce0(grp_IDWT_fu_192_C_4_ce0),
    .C_4_we0(grp_IDWT_fu_192_C_4_we0),
    .C_4_d0(grp_IDWT_fu_192_C_4_d0),
    .C_4_q0(C_buffer_4_q0),
    .C_5_address0(grp_IDWT_fu_192_C_5_address0),
    .C_5_ce0(grp_IDWT_fu_192_C_5_ce0),
    .C_5_we0(grp_IDWT_fu_192_C_5_we0),
    .C_5_d0(grp_IDWT_fu_192_C_5_d0),
    .C_5_q0(C_buffer_5_q0),
    .C_6_address0(grp_IDWT_fu_192_C_6_address0),
    .C_6_ce0(grp_IDWT_fu_192_C_6_ce0),
    .C_6_we0(grp_IDWT_fu_192_C_6_we0),
    .C_6_d0(grp_IDWT_fu_192_C_6_d0),
    .C_6_q0(C_buffer_6_q0),
    .C_7_address0(grp_IDWT_fu_192_C_7_address0),
    .C_7_ce0(grp_IDWT_fu_192_C_7_ce0),
    .C_7_we0(grp_IDWT_fu_192_C_7_we0),
    .C_7_d0(grp_IDWT_fu_192_C_7_d0),
    .C_7_q0(C_buffer_7_q0)
);

DWT_color grp_DWT_color_fu_204(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_DWT_color_fu_204_ap_start),
    .ap_done(grp_DWT_color_fu_204_ap_done),
    .ap_idle(grp_DWT_color_fu_204_ap_idle),
    .ap_ready(grp_DWT_color_fu_204_ap_ready),
    .A_0_address0(grp_DWT_color_fu_204_A_0_address0),
    .A_0_ce0(grp_DWT_color_fu_204_A_0_ce0),
    .A_0_we0(grp_DWT_color_fu_204_A_0_we0),
    .A_0_d0(grp_DWT_color_fu_204_A_0_d0),
    .A_0_q0(A_buffer_0_q0),
    .A_1_address0(grp_DWT_color_fu_204_A_1_address0),
    .A_1_ce0(grp_DWT_color_fu_204_A_1_ce0),
    .A_1_we0(grp_DWT_color_fu_204_A_1_we0),
    .A_1_d0(grp_DWT_color_fu_204_A_1_d0),
    .A_1_q0(A_buffer_1_q0),
    .A_2_address0(grp_DWT_color_fu_204_A_2_address0),
    .A_2_ce0(grp_DWT_color_fu_204_A_2_ce0),
    .A_2_we0(grp_DWT_color_fu_204_A_2_we0),
    .A_2_d0(grp_DWT_color_fu_204_A_2_d0),
    .A_2_q0(A_buffer_2_q0),
    .A_3_address0(grp_DWT_color_fu_204_A_3_address0),
    .A_3_ce0(grp_DWT_color_fu_204_A_3_ce0),
    .A_3_we0(grp_DWT_color_fu_204_A_3_we0),
    .A_3_d0(grp_DWT_color_fu_204_A_3_d0),
    .A_3_q0(A_buffer_3_q0),
    .A_4_address0(grp_DWT_color_fu_204_A_4_address0),
    .A_4_ce0(grp_DWT_color_fu_204_A_4_ce0),
    .A_4_we0(grp_DWT_color_fu_204_A_4_we0),
    .A_4_d0(grp_DWT_color_fu_204_A_4_d0),
    .A_4_q0(A_buffer_4_q0),
    .A_5_address0(grp_DWT_color_fu_204_A_5_address0),
    .A_5_ce0(grp_DWT_color_fu_204_A_5_ce0),
    .A_5_we0(grp_DWT_color_fu_204_A_5_we0),
    .A_5_d0(grp_DWT_color_fu_204_A_5_d0),
    .A_5_q0(A_buffer_5_q0),
    .A_6_address0(grp_DWT_color_fu_204_A_6_address0),
    .A_6_ce0(grp_DWT_color_fu_204_A_6_ce0),
    .A_6_we0(grp_DWT_color_fu_204_A_6_we0),
    .A_6_d0(grp_DWT_color_fu_204_A_6_d0),
    .A_6_q0(A_buffer_6_q0),
    .A_7_address0(grp_DWT_color_fu_204_A_7_address0),
    .A_7_ce0(grp_DWT_color_fu_204_A_7_ce0),
    .A_7_we0(grp_DWT_color_fu_204_A_7_we0),
    .A_7_d0(grp_DWT_color_fu_204_A_7_d0),
    .A_7_q0(A_buffer_7_q0)
);

DWT_IR grp_DWT_IR_fu_216(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_DWT_IR_fu_216_ap_start),
    .ap_done(grp_DWT_IR_fu_216_ap_done),
    .ap_idle(grp_DWT_IR_fu_216_ap_idle),
    .ap_ready(grp_DWT_IR_fu_216_ap_ready),
    .B_0_address0(grp_DWT_IR_fu_216_B_0_address0),
    .B_0_ce0(grp_DWT_IR_fu_216_B_0_ce0),
    .B_0_we0(grp_DWT_IR_fu_216_B_0_we0),
    .B_0_d0(grp_DWT_IR_fu_216_B_0_d0),
    .B_0_q0(B_buffer_0_q0),
    .B_1_address0(grp_DWT_IR_fu_216_B_1_address0),
    .B_1_ce0(grp_DWT_IR_fu_216_B_1_ce0),
    .B_1_we0(grp_DWT_IR_fu_216_B_1_we0),
    .B_1_d0(grp_DWT_IR_fu_216_B_1_d0),
    .B_1_q0(B_buffer_1_q0),
    .B_2_address0(grp_DWT_IR_fu_216_B_2_address0),
    .B_2_ce0(grp_DWT_IR_fu_216_B_2_ce0),
    .B_2_we0(grp_DWT_IR_fu_216_B_2_we0),
    .B_2_d0(grp_DWT_IR_fu_216_B_2_d0),
    .B_2_q0(B_buffer_2_q0),
    .B_3_address0(grp_DWT_IR_fu_216_B_3_address0),
    .B_3_ce0(grp_DWT_IR_fu_216_B_3_ce0),
    .B_3_we0(grp_DWT_IR_fu_216_B_3_we0),
    .B_3_d0(grp_DWT_IR_fu_216_B_3_d0),
    .B_3_q0(B_buffer_3_q0),
    .B_4_address0(grp_DWT_IR_fu_216_B_4_address0),
    .B_4_ce0(grp_DWT_IR_fu_216_B_4_ce0),
    .B_4_we0(grp_DWT_IR_fu_216_B_4_we0),
    .B_4_d0(grp_DWT_IR_fu_216_B_4_d0),
    .B_4_q0(B_buffer_4_q0),
    .B_5_address0(grp_DWT_IR_fu_216_B_5_address0),
    .B_5_ce0(grp_DWT_IR_fu_216_B_5_ce0),
    .B_5_we0(grp_DWT_IR_fu_216_B_5_we0),
    .B_5_d0(grp_DWT_IR_fu_216_B_5_d0),
    .B_5_q0(B_buffer_5_q0),
    .B_6_address0(grp_DWT_IR_fu_216_B_6_address0),
    .B_6_ce0(grp_DWT_IR_fu_216_B_6_ce0),
    .B_6_we0(grp_DWT_IR_fu_216_B_6_we0),
    .B_6_d0(grp_DWT_IR_fu_216_B_6_d0),
    .B_6_q0(B_buffer_6_q0),
    .B_7_address0(grp_DWT_IR_fu_216_B_7_address0),
    .B_7_ce0(grp_DWT_IR_fu_216_B_7_ce0),
    .B_7_we0(grp_DWT_IR_fu_216_B_7_we0),
    .B_7_d0(grp_DWT_IR_fu_216_B_7_d0),
    .B_7_q0(B_buffer_7_q0)
);

Filter grp_Filter_fu_228(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_Filter_fu_228_ap_start),
    .ap_done(grp_Filter_fu_228_ap_done),
    .ap_idle(grp_Filter_fu_228_ap_idle),
    .ap_ready(grp_Filter_fu_228_ap_ready),
    .A_0_address0(grp_Filter_fu_228_A_0_address0),
    .A_0_ce0(grp_Filter_fu_228_A_0_ce0),
    .A_0_q0(A_buffer_0_q0),
    .A_1_address0(grp_Filter_fu_228_A_1_address0),
    .A_1_ce0(grp_Filter_fu_228_A_1_ce0),
    .A_1_q0(A_buffer_1_q0),
    .A_2_address0(grp_Filter_fu_228_A_2_address0),
    .A_2_ce0(grp_Filter_fu_228_A_2_ce0),
    .A_2_q0(A_buffer_2_q0),
    .A_3_address0(grp_Filter_fu_228_A_3_address0),
    .A_3_ce0(grp_Filter_fu_228_A_3_ce0),
    .A_3_q0(A_buffer_3_q0),
    .A_4_address0(grp_Filter_fu_228_A_4_address0),
    .A_4_ce0(grp_Filter_fu_228_A_4_ce0),
    .A_4_q0(A_buffer_4_q0),
    .A_5_address0(grp_Filter_fu_228_A_5_address0),
    .A_5_ce0(grp_Filter_fu_228_A_5_ce0),
    .A_5_q0(A_buffer_5_q0),
    .A_6_address0(grp_Filter_fu_228_A_6_address0),
    .A_6_ce0(grp_Filter_fu_228_A_6_ce0),
    .A_6_q0(A_buffer_6_q0),
    .A_7_address0(grp_Filter_fu_228_A_7_address0),
    .A_7_ce0(grp_Filter_fu_228_A_7_ce0),
    .A_7_q0(A_buffer_7_q0),
    .B_0_address0(grp_Filter_fu_228_B_0_address0),
    .B_0_ce0(grp_Filter_fu_228_B_0_ce0),
    .B_0_q0(B_buffer_0_q0),
    .B_1_address0(grp_Filter_fu_228_B_1_address0),
    .B_1_ce0(grp_Filter_fu_228_B_1_ce0),
    .B_1_q0(B_buffer_1_q0),
    .B_2_address0(grp_Filter_fu_228_B_2_address0),
    .B_2_ce0(grp_Filter_fu_228_B_2_ce0),
    .B_2_q0(B_buffer_2_q0),
    .B_3_address0(grp_Filter_fu_228_B_3_address0),
    .B_3_ce0(grp_Filter_fu_228_B_3_ce0),
    .B_3_q0(B_buffer_3_q0),
    .B_4_address0(grp_Filter_fu_228_B_4_address0),
    .B_4_ce0(grp_Filter_fu_228_B_4_ce0),
    .B_4_q0(B_buffer_4_q0),
    .B_5_address0(grp_Filter_fu_228_B_5_address0),
    .B_5_ce0(grp_Filter_fu_228_B_5_ce0),
    .B_5_q0(B_buffer_5_q0),
    .B_6_address0(grp_Filter_fu_228_B_6_address0),
    .B_6_ce0(grp_Filter_fu_228_B_6_ce0),
    .B_6_q0(B_buffer_6_q0),
    .B_7_address0(grp_Filter_fu_228_B_7_address0),
    .B_7_ce0(grp_Filter_fu_228_B_7_ce0),
    .B_7_q0(B_buffer_7_q0),
    .C_0_address0(grp_Filter_fu_228_C_0_address0),
    .C_0_ce0(grp_Filter_fu_228_C_0_ce0),
    .C_0_we0(grp_Filter_fu_228_C_0_we0),
    .C_0_d0(grp_Filter_fu_228_C_0_d0),
    .C_1_address0(grp_Filter_fu_228_C_1_address0),
    .C_1_ce0(grp_Filter_fu_228_C_1_ce0),
    .C_1_we0(grp_Filter_fu_228_C_1_we0),
    .C_1_d0(grp_Filter_fu_228_C_1_d0),
    .C_2_address0(grp_Filter_fu_228_C_2_address0),
    .C_2_ce0(grp_Filter_fu_228_C_2_ce0),
    .C_2_we0(grp_Filter_fu_228_C_2_we0),
    .C_2_d0(grp_Filter_fu_228_C_2_d0),
    .C_3_address0(grp_Filter_fu_228_C_3_address0),
    .C_3_ce0(grp_Filter_fu_228_C_3_ce0),
    .C_3_we0(grp_Filter_fu_228_C_3_we0),
    .C_3_d0(grp_Filter_fu_228_C_3_d0),
    .C_4_address0(grp_Filter_fu_228_C_4_address0),
    .C_4_ce0(grp_Filter_fu_228_C_4_ce0),
    .C_4_we0(grp_Filter_fu_228_C_4_we0),
    .C_4_d0(grp_Filter_fu_228_C_4_d0),
    .C_5_address0(grp_Filter_fu_228_C_5_address0),
    .C_5_ce0(grp_Filter_fu_228_C_5_ce0),
    .C_5_we0(grp_Filter_fu_228_C_5_we0),
    .C_5_d0(grp_Filter_fu_228_C_5_d0),
    .C_6_address0(grp_Filter_fu_228_C_6_address0),
    .C_6_ce0(grp_Filter_fu_228_C_6_ce0),
    .C_6_we0(grp_Filter_fu_228_C_6_we0),
    .C_6_d0(grp_Filter_fu_228_C_6_d0),
    .C_7_address0(grp_Filter_fu_228_C_7_address0),
    .C_7_ce0(grp_Filter_fu_228_C_7_ce0),
    .C_7_we0(grp_Filter_fu_228_C_7_we0),
    .C_7_d0(grp_Filter_fu_228_C_7_d0)
);

write_image grp_write_image_fu_256(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_write_image_fu_256_ap_start),
    .ap_done(grp_write_image_fu_256_ap_done),
    .ap_idle(grp_write_image_fu_256_ap_idle),
    .ap_ready(grp_write_image_fu_256_ap_ready),
    .C_buffer_0_address0(grp_write_image_fu_256_C_buffer_0_address0),
    .C_buffer_0_ce0(grp_write_image_fu_256_C_buffer_0_ce0),
    .C_buffer_0_q0(C_buffer_0_q0),
    .C_buffer_1_address0(grp_write_image_fu_256_C_buffer_1_address0),
    .C_buffer_1_ce0(grp_write_image_fu_256_C_buffer_1_ce0),
    .C_buffer_1_q0(C_buffer_1_q0),
    .C_buffer_2_address0(grp_write_image_fu_256_C_buffer_2_address0),
    .C_buffer_2_ce0(grp_write_image_fu_256_C_buffer_2_ce0),
    .C_buffer_2_q0(C_buffer_2_q0),
    .C_buffer_3_address0(grp_write_image_fu_256_C_buffer_3_address0),
    .C_buffer_3_ce0(grp_write_image_fu_256_C_buffer_3_ce0),
    .C_buffer_3_q0(C_buffer_3_q0),
    .C_buffer_4_address0(grp_write_image_fu_256_C_buffer_4_address0),
    .C_buffer_4_ce0(grp_write_image_fu_256_C_buffer_4_ce0),
    .C_buffer_4_q0(C_buffer_4_q0),
    .C_buffer_5_address0(grp_write_image_fu_256_C_buffer_5_address0),
    .C_buffer_5_ce0(grp_write_image_fu_256_C_buffer_5_ce0),
    .C_buffer_5_q0(C_buffer_5_q0),
    .C_buffer_6_address0(grp_write_image_fu_256_C_buffer_6_address0),
    .C_buffer_6_ce0(grp_write_image_fu_256_C_buffer_6_ce0),
    .C_buffer_6_q0(C_buffer_6_q0),
    .C_buffer_7_address0(grp_write_image_fu_256_C_buffer_7_address0),
    .C_buffer_7_ce0(grp_write_image_fu_256_C_buffer_7_ce0),
    .C_buffer_7_q0(C_buffer_7_q0),
    .m_axi_c_AWVALID(grp_write_image_fu_256_m_axi_c_AWVALID),
    .m_axi_c_AWREADY(DATA_C_AWREADY),
    .m_axi_c_AWADDR(grp_write_image_fu_256_m_axi_c_AWADDR),
    .m_axi_c_AWID(grp_write_image_fu_256_m_axi_c_AWID),
    .m_axi_c_AWLEN(grp_write_image_fu_256_m_axi_c_AWLEN),
    .m_axi_c_AWSIZE(grp_write_image_fu_256_m_axi_c_AWSIZE),
    .m_axi_c_AWBURST(grp_write_image_fu_256_m_axi_c_AWBURST),
    .m_axi_c_AWLOCK(grp_write_image_fu_256_m_axi_c_AWLOCK),
    .m_axi_c_AWCACHE(grp_write_image_fu_256_m_axi_c_AWCACHE),
    .m_axi_c_AWPROT(grp_write_image_fu_256_m_axi_c_AWPROT),
    .m_axi_c_AWQOS(grp_write_image_fu_256_m_axi_c_AWQOS),
    .m_axi_c_AWREGION(grp_write_image_fu_256_m_axi_c_AWREGION),
    .m_axi_c_AWUSER(grp_write_image_fu_256_m_axi_c_AWUSER),
    .m_axi_c_WVALID(grp_write_image_fu_256_m_axi_c_WVALID),
    .m_axi_c_WREADY(DATA_C_WREADY),
    .m_axi_c_WDATA(grp_write_image_fu_256_m_axi_c_WDATA),
    .m_axi_c_WSTRB(grp_write_image_fu_256_m_axi_c_WSTRB),
    .m_axi_c_WLAST(grp_write_image_fu_256_m_axi_c_WLAST),
    .m_axi_c_WID(grp_write_image_fu_256_m_axi_c_WID),
    .m_axi_c_WUSER(grp_write_image_fu_256_m_axi_c_WUSER),
    .m_axi_c_ARVALID(grp_write_image_fu_256_m_axi_c_ARVALID),
    .m_axi_c_ARREADY(1'b0),
    .m_axi_c_ARADDR(grp_write_image_fu_256_m_axi_c_ARADDR),
    .m_axi_c_ARID(grp_write_image_fu_256_m_axi_c_ARID),
    .m_axi_c_ARLEN(grp_write_image_fu_256_m_axi_c_ARLEN),
    .m_axi_c_ARSIZE(grp_write_image_fu_256_m_axi_c_ARSIZE),
    .m_axi_c_ARBURST(grp_write_image_fu_256_m_axi_c_ARBURST),
    .m_axi_c_ARLOCK(grp_write_image_fu_256_m_axi_c_ARLOCK),
    .m_axi_c_ARCACHE(grp_write_image_fu_256_m_axi_c_ARCACHE),
    .m_axi_c_ARPROT(grp_write_image_fu_256_m_axi_c_ARPROT),
    .m_axi_c_ARQOS(grp_write_image_fu_256_m_axi_c_ARQOS),
    .m_axi_c_ARREGION(grp_write_image_fu_256_m_axi_c_ARREGION),
    .m_axi_c_ARUSER(grp_write_image_fu_256_m_axi_c_ARUSER),
    .m_axi_c_RVALID(1'b0),
    .m_axi_c_RREADY(grp_write_image_fu_256_m_axi_c_RREADY),
    .m_axi_c_RDATA(16'd0),
    .m_axi_c_RLAST(1'b0),
    .m_axi_c_RID(1'd0),
    .m_axi_c_RUSER(1'd0),
    .m_axi_c_RRESP(2'd0),
    .m_axi_c_BVALID(DATA_C_BVALID),
    .m_axi_c_BREADY(grp_write_image_fu_256_m_axi_c_BREADY),
    .m_axi_c_BRESP(DATA_C_BRESP),
    .m_axi_c_BID(DATA_C_BID),
    .m_axi_c_BUSER(DATA_C_BUSER),
    .c_offset(c5_reg_349)
);

read_color grp_read_color_fu_271(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_read_color_fu_271_ap_start),
    .ap_done(grp_read_color_fu_271_ap_done),
    .ap_idle(grp_read_color_fu_271_ap_idle),
    .ap_ready(grp_read_color_fu_271_ap_ready),
    .m_axi_a_AWVALID(grp_read_color_fu_271_m_axi_a_AWVALID),
    .m_axi_a_AWREADY(1'b0),
    .m_axi_a_AWADDR(grp_read_color_fu_271_m_axi_a_AWADDR),
    .m_axi_a_AWID(grp_read_color_fu_271_m_axi_a_AWID),
    .m_axi_a_AWLEN(grp_read_color_fu_271_m_axi_a_AWLEN),
    .m_axi_a_AWSIZE(grp_read_color_fu_271_m_axi_a_AWSIZE),
    .m_axi_a_AWBURST(grp_read_color_fu_271_m_axi_a_AWBURST),
    .m_axi_a_AWLOCK(grp_read_color_fu_271_m_axi_a_AWLOCK),
    .m_axi_a_AWCACHE(grp_read_color_fu_271_m_axi_a_AWCACHE),
    .m_axi_a_AWPROT(grp_read_color_fu_271_m_axi_a_AWPROT),
    .m_axi_a_AWQOS(grp_read_color_fu_271_m_axi_a_AWQOS),
    .m_axi_a_AWREGION(grp_read_color_fu_271_m_axi_a_AWREGION),
    .m_axi_a_AWUSER(grp_read_color_fu_271_m_axi_a_AWUSER),
    .m_axi_a_WVALID(grp_read_color_fu_271_m_axi_a_WVALID),
    .m_axi_a_WREADY(1'b0),
    .m_axi_a_WDATA(grp_read_color_fu_271_m_axi_a_WDATA),
    .m_axi_a_WSTRB(grp_read_color_fu_271_m_axi_a_WSTRB),
    .m_axi_a_WLAST(grp_read_color_fu_271_m_axi_a_WLAST),
    .m_axi_a_WID(grp_read_color_fu_271_m_axi_a_WID),
    .m_axi_a_WUSER(grp_read_color_fu_271_m_axi_a_WUSER),
    .m_axi_a_ARVALID(grp_read_color_fu_271_m_axi_a_ARVALID),
    .m_axi_a_ARREADY(DATA_A_ARREADY),
    .m_axi_a_ARADDR(grp_read_color_fu_271_m_axi_a_ARADDR),
    .m_axi_a_ARID(grp_read_color_fu_271_m_axi_a_ARID),
    .m_axi_a_ARLEN(grp_read_color_fu_271_m_axi_a_ARLEN),
    .m_axi_a_ARSIZE(grp_read_color_fu_271_m_axi_a_ARSIZE),
    .m_axi_a_ARBURST(grp_read_color_fu_271_m_axi_a_ARBURST),
    .m_axi_a_ARLOCK(grp_read_color_fu_271_m_axi_a_ARLOCK),
    .m_axi_a_ARCACHE(grp_read_color_fu_271_m_axi_a_ARCACHE),
    .m_axi_a_ARPROT(grp_read_color_fu_271_m_axi_a_ARPROT),
    .m_axi_a_ARQOS(grp_read_color_fu_271_m_axi_a_ARQOS),
    .m_axi_a_ARREGION(grp_read_color_fu_271_m_axi_a_ARREGION),
    .m_axi_a_ARUSER(grp_read_color_fu_271_m_axi_a_ARUSER),
    .m_axi_a_RVALID(DATA_A_RVALID),
    .m_axi_a_RREADY(grp_read_color_fu_271_m_axi_a_RREADY),
    .m_axi_a_RDATA(DATA_A_RDATA),
    .m_axi_a_RLAST(DATA_A_RLAST),
    .m_axi_a_RID(DATA_A_RID),
    .m_axi_a_RUSER(DATA_A_RUSER),
    .m_axi_a_RRESP(DATA_A_RRESP),
    .m_axi_a_BVALID(1'b0),
    .m_axi_a_BREADY(grp_read_color_fu_271_m_axi_a_BREADY),
    .m_axi_a_BRESP(2'd0),
    .m_axi_a_BID(1'd0),
    .m_axi_a_BUSER(1'd0),
    .a_offset(a1_reg_359),
    .A_buffer_0_address0(grp_read_color_fu_271_A_buffer_0_address0),
    .A_buffer_0_ce0(grp_read_color_fu_271_A_buffer_0_ce0),
    .A_buffer_0_we0(grp_read_color_fu_271_A_buffer_0_we0),
    .A_buffer_0_d0(grp_read_color_fu_271_A_buffer_0_d0),
    .A_buffer_1_address0(grp_read_color_fu_271_A_buffer_1_address0),
    .A_buffer_1_ce0(grp_read_color_fu_271_A_buffer_1_ce0),
    .A_buffer_1_we0(grp_read_color_fu_271_A_buffer_1_we0),
    .A_buffer_1_d0(grp_read_color_fu_271_A_buffer_1_d0),
    .A_buffer_2_address0(grp_read_color_fu_271_A_buffer_2_address0),
    .A_buffer_2_ce0(grp_read_color_fu_271_A_buffer_2_ce0),
    .A_buffer_2_we0(grp_read_color_fu_271_A_buffer_2_we0),
    .A_buffer_2_d0(grp_read_color_fu_271_A_buffer_2_d0),
    .A_buffer_3_address0(grp_read_color_fu_271_A_buffer_3_address0),
    .A_buffer_3_ce0(grp_read_color_fu_271_A_buffer_3_ce0),
    .A_buffer_3_we0(grp_read_color_fu_271_A_buffer_3_we0),
    .A_buffer_3_d0(grp_read_color_fu_271_A_buffer_3_d0),
    .A_buffer_4_address0(grp_read_color_fu_271_A_buffer_4_address0),
    .A_buffer_4_ce0(grp_read_color_fu_271_A_buffer_4_ce0),
    .A_buffer_4_we0(grp_read_color_fu_271_A_buffer_4_we0),
    .A_buffer_4_d0(grp_read_color_fu_271_A_buffer_4_d0),
    .A_buffer_5_address0(grp_read_color_fu_271_A_buffer_5_address0),
    .A_buffer_5_ce0(grp_read_color_fu_271_A_buffer_5_ce0),
    .A_buffer_5_we0(grp_read_color_fu_271_A_buffer_5_we0),
    .A_buffer_5_d0(grp_read_color_fu_271_A_buffer_5_d0),
    .A_buffer_6_address0(grp_read_color_fu_271_A_buffer_6_address0),
    .A_buffer_6_ce0(grp_read_color_fu_271_A_buffer_6_ce0),
    .A_buffer_6_we0(grp_read_color_fu_271_A_buffer_6_we0),
    .A_buffer_6_d0(grp_read_color_fu_271_A_buffer_6_d0),
    .A_buffer_7_address0(grp_read_color_fu_271_A_buffer_7_address0),
    .A_buffer_7_ce0(grp_read_color_fu_271_A_buffer_7_ce0),
    .A_buffer_7_we0(grp_read_color_fu_271_A_buffer_7_we0),
    .A_buffer_7_d0(grp_read_color_fu_271_A_buffer_7_d0)
);

read_IR grp_read_IR_fu_294(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_read_IR_fu_294_ap_start),
    .ap_done(grp_read_IR_fu_294_ap_done),
    .ap_idle(grp_read_IR_fu_294_ap_idle),
    .ap_ready(grp_read_IR_fu_294_ap_ready),
    .m_axi_b_AWVALID(grp_read_IR_fu_294_m_axi_b_AWVALID),
    .m_axi_b_AWREADY(1'b0),
    .m_axi_b_AWADDR(grp_read_IR_fu_294_m_axi_b_AWADDR),
    .m_axi_b_AWID(grp_read_IR_fu_294_m_axi_b_AWID),
    .m_axi_b_AWLEN(grp_read_IR_fu_294_m_axi_b_AWLEN),
    .m_axi_b_AWSIZE(grp_read_IR_fu_294_m_axi_b_AWSIZE),
    .m_axi_b_AWBURST(grp_read_IR_fu_294_m_axi_b_AWBURST),
    .m_axi_b_AWLOCK(grp_read_IR_fu_294_m_axi_b_AWLOCK),
    .m_axi_b_AWCACHE(grp_read_IR_fu_294_m_axi_b_AWCACHE),
    .m_axi_b_AWPROT(grp_read_IR_fu_294_m_axi_b_AWPROT),
    .m_axi_b_AWQOS(grp_read_IR_fu_294_m_axi_b_AWQOS),
    .m_axi_b_AWREGION(grp_read_IR_fu_294_m_axi_b_AWREGION),
    .m_axi_b_AWUSER(grp_read_IR_fu_294_m_axi_b_AWUSER),
    .m_axi_b_WVALID(grp_read_IR_fu_294_m_axi_b_WVALID),
    .m_axi_b_WREADY(1'b0),
    .m_axi_b_WDATA(grp_read_IR_fu_294_m_axi_b_WDATA),
    .m_axi_b_WSTRB(grp_read_IR_fu_294_m_axi_b_WSTRB),
    .m_axi_b_WLAST(grp_read_IR_fu_294_m_axi_b_WLAST),
    .m_axi_b_WID(grp_read_IR_fu_294_m_axi_b_WID),
    .m_axi_b_WUSER(grp_read_IR_fu_294_m_axi_b_WUSER),
    .m_axi_b_ARVALID(grp_read_IR_fu_294_m_axi_b_ARVALID),
    .m_axi_b_ARREADY(DATA_B_ARREADY),
    .m_axi_b_ARADDR(grp_read_IR_fu_294_m_axi_b_ARADDR),
    .m_axi_b_ARID(grp_read_IR_fu_294_m_axi_b_ARID),
    .m_axi_b_ARLEN(grp_read_IR_fu_294_m_axi_b_ARLEN),
    .m_axi_b_ARSIZE(grp_read_IR_fu_294_m_axi_b_ARSIZE),
    .m_axi_b_ARBURST(grp_read_IR_fu_294_m_axi_b_ARBURST),
    .m_axi_b_ARLOCK(grp_read_IR_fu_294_m_axi_b_ARLOCK),
    .m_axi_b_ARCACHE(grp_read_IR_fu_294_m_axi_b_ARCACHE),
    .m_axi_b_ARPROT(grp_read_IR_fu_294_m_axi_b_ARPROT),
    .m_axi_b_ARQOS(grp_read_IR_fu_294_m_axi_b_ARQOS),
    .m_axi_b_ARREGION(grp_read_IR_fu_294_m_axi_b_ARREGION),
    .m_axi_b_ARUSER(grp_read_IR_fu_294_m_axi_b_ARUSER),
    .m_axi_b_RVALID(DATA_B_RVALID),
    .m_axi_b_RREADY(grp_read_IR_fu_294_m_axi_b_RREADY),
    .m_axi_b_RDATA(DATA_B_RDATA),
    .m_axi_b_RLAST(DATA_B_RLAST),
    .m_axi_b_RID(DATA_B_RID),
    .m_axi_b_RUSER(DATA_B_RUSER),
    .m_axi_b_RRESP(DATA_B_RRESP),
    .m_axi_b_BVALID(1'b0),
    .m_axi_b_BREADY(grp_read_IR_fu_294_m_axi_b_BREADY),
    .m_axi_b_BRESP(2'd0),
    .m_axi_b_BID(1'd0),
    .m_axi_b_BUSER(1'd0),
    .b_offset(b3_reg_354),
    .B_buffer_0_address0(grp_read_IR_fu_294_B_buffer_0_address0),
    .B_buffer_0_ce0(grp_read_IR_fu_294_B_buffer_0_ce0),
    .B_buffer_0_we0(grp_read_IR_fu_294_B_buffer_0_we0),
    .B_buffer_0_d0(grp_read_IR_fu_294_B_buffer_0_d0),
    .B_buffer_1_address0(grp_read_IR_fu_294_B_buffer_1_address0),
    .B_buffer_1_ce0(grp_read_IR_fu_294_B_buffer_1_ce0),
    .B_buffer_1_we0(grp_read_IR_fu_294_B_buffer_1_we0),
    .B_buffer_1_d0(grp_read_IR_fu_294_B_buffer_1_d0),
    .B_buffer_2_address0(grp_read_IR_fu_294_B_buffer_2_address0),
    .B_buffer_2_ce0(grp_read_IR_fu_294_B_buffer_2_ce0),
    .B_buffer_2_we0(grp_read_IR_fu_294_B_buffer_2_we0),
    .B_buffer_2_d0(grp_read_IR_fu_294_B_buffer_2_d0),
    .B_buffer_3_address0(grp_read_IR_fu_294_B_buffer_3_address0),
    .B_buffer_3_ce0(grp_read_IR_fu_294_B_buffer_3_ce0),
    .B_buffer_3_we0(grp_read_IR_fu_294_B_buffer_3_we0),
    .B_buffer_3_d0(grp_read_IR_fu_294_B_buffer_3_d0),
    .B_buffer_4_address0(grp_read_IR_fu_294_B_buffer_4_address0),
    .B_buffer_4_ce0(grp_read_IR_fu_294_B_buffer_4_ce0),
    .B_buffer_4_we0(grp_read_IR_fu_294_B_buffer_4_we0),
    .B_buffer_4_d0(grp_read_IR_fu_294_B_buffer_4_d0),
    .B_buffer_5_address0(grp_read_IR_fu_294_B_buffer_5_address0),
    .B_buffer_5_ce0(grp_read_IR_fu_294_B_buffer_5_ce0),
    .B_buffer_5_we0(grp_read_IR_fu_294_B_buffer_5_we0),
    .B_buffer_5_d0(grp_read_IR_fu_294_B_buffer_5_d0),
    .B_buffer_6_address0(grp_read_IR_fu_294_B_buffer_6_address0),
    .B_buffer_6_ce0(grp_read_IR_fu_294_B_buffer_6_ce0),
    .B_buffer_6_we0(grp_read_IR_fu_294_B_buffer_6_we0),
    .B_buffer_6_d0(grp_read_IR_fu_294_B_buffer_6_d0),
    .B_buffer_7_address0(grp_read_IR_fu_294_B_buffer_7_address0),
    .B_buffer_7_ce0(grp_read_IR_fu_294_B_buffer_7_ce0),
    .B_buffer_7_we0(grp_read_IR_fu_294_B_buffer_7_we0),
    .B_buffer_7_d0(grp_read_IR_fu_294_B_buffer_7_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_DWT_IR_fu_216_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_DWT_IR_fu_216_ap_start_reg <= 1'b1;
        end else if ((grp_DWT_IR_fu_216_ap_ready == 1'b1)) begin
            grp_DWT_IR_fu_216_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_DWT_color_fu_204_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_DWT_color_fu_204_ap_start_reg <= 1'b1;
        end else if ((grp_DWT_color_fu_204_ap_ready == 1'b1)) begin
            grp_DWT_color_fu_204_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_Filter_fu_228_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_Filter_fu_228_ap_start_reg <= 1'b1;
        end else if ((grp_Filter_fu_228_ap_ready == 1'b1)) begin
            grp_Filter_fu_228_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_IDWT_fu_192_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            grp_IDWT_fu_192_ap_start_reg <= 1'b1;
        end else if ((grp_IDWT_fu_192_ap_ready == 1'b1)) begin
            grp_IDWT_fu_192_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_read_IR_fu_294_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_read_IR_fu_294_ap_start_reg <= 1'b1;
        end else if ((grp_read_IR_fu_294_ap_ready == 1'b1)) begin
            grp_read_IR_fu_294_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_read_color_fu_271_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_read_color_fu_271_ap_start_reg <= 1'b1;
        end else if ((grp_read_color_fu_271_ap_ready == 1'b1)) begin
            grp_read_color_fu_271_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_write_image_fu_256_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_write_image_fu_256_ap_start_reg <= 1'b1;
        end else if ((grp_write_image_fu_256_ap_ready == 1'b1)) begin
            grp_write_image_fu_256_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        a1_reg_359 <= {{a[31:1]}};
        b3_reg_354 <= {{b[31:1]}};
        c5_reg_349 <= {{c[31:1]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_buffer_0_address0 = grp_read_color_fu_271_A_buffer_0_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        A_buffer_0_address0 = grp_Filter_fu_228_A_0_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_buffer_0_address0 = grp_DWT_color_fu_204_A_0_address0;
    end else begin
        A_buffer_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_buffer_0_ce0 = grp_read_color_fu_271_A_buffer_0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        A_buffer_0_ce0 = grp_Filter_fu_228_A_0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_buffer_0_ce0 = grp_DWT_color_fu_204_A_0_ce0;
    end else begin
        A_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_buffer_0_d0 = grp_read_color_fu_271_A_buffer_0_d0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_buffer_0_d0 = grp_DWT_color_fu_204_A_0_d0;
    end else begin
        A_buffer_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_buffer_0_we0 = grp_read_color_fu_271_A_buffer_0_we0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_buffer_0_we0 = grp_DWT_color_fu_204_A_0_we0;
    end else begin
        A_buffer_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_buffer_1_address0 = grp_read_color_fu_271_A_buffer_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        A_buffer_1_address0 = grp_Filter_fu_228_A_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_buffer_1_address0 = grp_DWT_color_fu_204_A_1_address0;
    end else begin
        A_buffer_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_buffer_1_ce0 = grp_read_color_fu_271_A_buffer_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        A_buffer_1_ce0 = grp_Filter_fu_228_A_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_buffer_1_ce0 = grp_DWT_color_fu_204_A_1_ce0;
    end else begin
        A_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_buffer_1_d0 = grp_read_color_fu_271_A_buffer_1_d0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_buffer_1_d0 = grp_DWT_color_fu_204_A_1_d0;
    end else begin
        A_buffer_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_buffer_1_we0 = grp_read_color_fu_271_A_buffer_1_we0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_buffer_1_we0 = grp_DWT_color_fu_204_A_1_we0;
    end else begin
        A_buffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_buffer_2_address0 = grp_read_color_fu_271_A_buffer_2_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        A_buffer_2_address0 = grp_Filter_fu_228_A_2_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_buffer_2_address0 = grp_DWT_color_fu_204_A_2_address0;
    end else begin
        A_buffer_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_buffer_2_ce0 = grp_read_color_fu_271_A_buffer_2_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        A_buffer_2_ce0 = grp_Filter_fu_228_A_2_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_buffer_2_ce0 = grp_DWT_color_fu_204_A_2_ce0;
    end else begin
        A_buffer_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_buffer_2_d0 = grp_read_color_fu_271_A_buffer_2_d0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_buffer_2_d0 = grp_DWT_color_fu_204_A_2_d0;
    end else begin
        A_buffer_2_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_buffer_2_we0 = grp_read_color_fu_271_A_buffer_2_we0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_buffer_2_we0 = grp_DWT_color_fu_204_A_2_we0;
    end else begin
        A_buffer_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_buffer_3_address0 = grp_read_color_fu_271_A_buffer_3_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        A_buffer_3_address0 = grp_Filter_fu_228_A_3_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_buffer_3_address0 = grp_DWT_color_fu_204_A_3_address0;
    end else begin
        A_buffer_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_buffer_3_ce0 = grp_read_color_fu_271_A_buffer_3_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        A_buffer_3_ce0 = grp_Filter_fu_228_A_3_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_buffer_3_ce0 = grp_DWT_color_fu_204_A_3_ce0;
    end else begin
        A_buffer_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_buffer_3_d0 = grp_read_color_fu_271_A_buffer_3_d0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_buffer_3_d0 = grp_DWT_color_fu_204_A_3_d0;
    end else begin
        A_buffer_3_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_buffer_3_we0 = grp_read_color_fu_271_A_buffer_3_we0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_buffer_3_we0 = grp_DWT_color_fu_204_A_3_we0;
    end else begin
        A_buffer_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_buffer_4_address0 = grp_read_color_fu_271_A_buffer_4_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        A_buffer_4_address0 = grp_Filter_fu_228_A_4_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_buffer_4_address0 = grp_DWT_color_fu_204_A_4_address0;
    end else begin
        A_buffer_4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_buffer_4_ce0 = grp_read_color_fu_271_A_buffer_4_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        A_buffer_4_ce0 = grp_Filter_fu_228_A_4_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_buffer_4_ce0 = grp_DWT_color_fu_204_A_4_ce0;
    end else begin
        A_buffer_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_buffer_4_d0 = grp_read_color_fu_271_A_buffer_4_d0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_buffer_4_d0 = grp_DWT_color_fu_204_A_4_d0;
    end else begin
        A_buffer_4_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_buffer_4_we0 = grp_read_color_fu_271_A_buffer_4_we0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_buffer_4_we0 = grp_DWT_color_fu_204_A_4_we0;
    end else begin
        A_buffer_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_buffer_5_address0 = grp_read_color_fu_271_A_buffer_5_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        A_buffer_5_address0 = grp_Filter_fu_228_A_5_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_buffer_5_address0 = grp_DWT_color_fu_204_A_5_address0;
    end else begin
        A_buffer_5_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_buffer_5_ce0 = grp_read_color_fu_271_A_buffer_5_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        A_buffer_5_ce0 = grp_Filter_fu_228_A_5_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_buffer_5_ce0 = grp_DWT_color_fu_204_A_5_ce0;
    end else begin
        A_buffer_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_buffer_5_d0 = grp_read_color_fu_271_A_buffer_5_d0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_buffer_5_d0 = grp_DWT_color_fu_204_A_5_d0;
    end else begin
        A_buffer_5_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_buffer_5_we0 = grp_read_color_fu_271_A_buffer_5_we0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_buffer_5_we0 = grp_DWT_color_fu_204_A_5_we0;
    end else begin
        A_buffer_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_buffer_6_address0 = grp_read_color_fu_271_A_buffer_6_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        A_buffer_6_address0 = grp_Filter_fu_228_A_6_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_buffer_6_address0 = grp_DWT_color_fu_204_A_6_address0;
    end else begin
        A_buffer_6_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_buffer_6_ce0 = grp_read_color_fu_271_A_buffer_6_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        A_buffer_6_ce0 = grp_Filter_fu_228_A_6_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_buffer_6_ce0 = grp_DWT_color_fu_204_A_6_ce0;
    end else begin
        A_buffer_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_buffer_6_d0 = grp_read_color_fu_271_A_buffer_6_d0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_buffer_6_d0 = grp_DWT_color_fu_204_A_6_d0;
    end else begin
        A_buffer_6_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_buffer_6_we0 = grp_read_color_fu_271_A_buffer_6_we0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_buffer_6_we0 = grp_DWT_color_fu_204_A_6_we0;
    end else begin
        A_buffer_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_buffer_7_address0 = grp_read_color_fu_271_A_buffer_7_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        A_buffer_7_address0 = grp_Filter_fu_228_A_7_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_buffer_7_address0 = grp_DWT_color_fu_204_A_7_address0;
    end else begin
        A_buffer_7_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_buffer_7_ce0 = grp_read_color_fu_271_A_buffer_7_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        A_buffer_7_ce0 = grp_Filter_fu_228_A_7_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_buffer_7_ce0 = grp_DWT_color_fu_204_A_7_ce0;
    end else begin
        A_buffer_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_buffer_7_d0 = grp_read_color_fu_271_A_buffer_7_d0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_buffer_7_d0 = grp_DWT_color_fu_204_A_7_d0;
    end else begin
        A_buffer_7_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_buffer_7_we0 = grp_read_color_fu_271_A_buffer_7_we0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_buffer_7_we0 = grp_DWT_color_fu_204_A_7_we0;
    end else begin
        A_buffer_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_buffer_0_address0 = grp_read_IR_fu_294_B_buffer_0_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        B_buffer_0_address0 = grp_Filter_fu_228_B_0_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_buffer_0_address0 = grp_DWT_IR_fu_216_B_0_address0;
    end else begin
        B_buffer_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_buffer_0_ce0 = grp_read_IR_fu_294_B_buffer_0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        B_buffer_0_ce0 = grp_Filter_fu_228_B_0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_buffer_0_ce0 = grp_DWT_IR_fu_216_B_0_ce0;
    end else begin
        B_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_buffer_0_d0 = grp_read_IR_fu_294_B_buffer_0_d0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_buffer_0_d0 = grp_DWT_IR_fu_216_B_0_d0;
    end else begin
        B_buffer_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_buffer_0_we0 = grp_read_IR_fu_294_B_buffer_0_we0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_buffer_0_we0 = grp_DWT_IR_fu_216_B_0_we0;
    end else begin
        B_buffer_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_buffer_1_address0 = grp_read_IR_fu_294_B_buffer_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        B_buffer_1_address0 = grp_Filter_fu_228_B_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_buffer_1_address0 = grp_DWT_IR_fu_216_B_1_address0;
    end else begin
        B_buffer_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_buffer_1_ce0 = grp_read_IR_fu_294_B_buffer_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        B_buffer_1_ce0 = grp_Filter_fu_228_B_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_buffer_1_ce0 = grp_DWT_IR_fu_216_B_1_ce0;
    end else begin
        B_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_buffer_1_d0 = grp_read_IR_fu_294_B_buffer_1_d0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_buffer_1_d0 = grp_DWT_IR_fu_216_B_1_d0;
    end else begin
        B_buffer_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_buffer_1_we0 = grp_read_IR_fu_294_B_buffer_1_we0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_buffer_1_we0 = grp_DWT_IR_fu_216_B_1_we0;
    end else begin
        B_buffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_buffer_2_address0 = grp_read_IR_fu_294_B_buffer_2_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        B_buffer_2_address0 = grp_Filter_fu_228_B_2_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_buffer_2_address0 = grp_DWT_IR_fu_216_B_2_address0;
    end else begin
        B_buffer_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_buffer_2_ce0 = grp_read_IR_fu_294_B_buffer_2_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        B_buffer_2_ce0 = grp_Filter_fu_228_B_2_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_buffer_2_ce0 = grp_DWT_IR_fu_216_B_2_ce0;
    end else begin
        B_buffer_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_buffer_2_d0 = grp_read_IR_fu_294_B_buffer_2_d0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_buffer_2_d0 = grp_DWT_IR_fu_216_B_2_d0;
    end else begin
        B_buffer_2_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_buffer_2_we0 = grp_read_IR_fu_294_B_buffer_2_we0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_buffer_2_we0 = grp_DWT_IR_fu_216_B_2_we0;
    end else begin
        B_buffer_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_buffer_3_address0 = grp_read_IR_fu_294_B_buffer_3_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        B_buffer_3_address0 = grp_Filter_fu_228_B_3_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_buffer_3_address0 = grp_DWT_IR_fu_216_B_3_address0;
    end else begin
        B_buffer_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_buffer_3_ce0 = grp_read_IR_fu_294_B_buffer_3_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        B_buffer_3_ce0 = grp_Filter_fu_228_B_3_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_buffer_3_ce0 = grp_DWT_IR_fu_216_B_3_ce0;
    end else begin
        B_buffer_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_buffer_3_d0 = grp_read_IR_fu_294_B_buffer_3_d0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_buffer_3_d0 = grp_DWT_IR_fu_216_B_3_d0;
    end else begin
        B_buffer_3_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_buffer_3_we0 = grp_read_IR_fu_294_B_buffer_3_we0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_buffer_3_we0 = grp_DWT_IR_fu_216_B_3_we0;
    end else begin
        B_buffer_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_buffer_4_address0 = grp_read_IR_fu_294_B_buffer_4_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        B_buffer_4_address0 = grp_Filter_fu_228_B_4_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_buffer_4_address0 = grp_DWT_IR_fu_216_B_4_address0;
    end else begin
        B_buffer_4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_buffer_4_ce0 = grp_read_IR_fu_294_B_buffer_4_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        B_buffer_4_ce0 = grp_Filter_fu_228_B_4_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_buffer_4_ce0 = grp_DWT_IR_fu_216_B_4_ce0;
    end else begin
        B_buffer_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_buffer_4_d0 = grp_read_IR_fu_294_B_buffer_4_d0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_buffer_4_d0 = grp_DWT_IR_fu_216_B_4_d0;
    end else begin
        B_buffer_4_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_buffer_4_we0 = grp_read_IR_fu_294_B_buffer_4_we0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_buffer_4_we0 = grp_DWT_IR_fu_216_B_4_we0;
    end else begin
        B_buffer_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_buffer_5_address0 = grp_read_IR_fu_294_B_buffer_5_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        B_buffer_5_address0 = grp_Filter_fu_228_B_5_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_buffer_5_address0 = grp_DWT_IR_fu_216_B_5_address0;
    end else begin
        B_buffer_5_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_buffer_5_ce0 = grp_read_IR_fu_294_B_buffer_5_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        B_buffer_5_ce0 = grp_Filter_fu_228_B_5_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_buffer_5_ce0 = grp_DWT_IR_fu_216_B_5_ce0;
    end else begin
        B_buffer_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_buffer_5_d0 = grp_read_IR_fu_294_B_buffer_5_d0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_buffer_5_d0 = grp_DWT_IR_fu_216_B_5_d0;
    end else begin
        B_buffer_5_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_buffer_5_we0 = grp_read_IR_fu_294_B_buffer_5_we0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_buffer_5_we0 = grp_DWT_IR_fu_216_B_5_we0;
    end else begin
        B_buffer_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_buffer_6_address0 = grp_read_IR_fu_294_B_buffer_6_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        B_buffer_6_address0 = grp_Filter_fu_228_B_6_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_buffer_6_address0 = grp_DWT_IR_fu_216_B_6_address0;
    end else begin
        B_buffer_6_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_buffer_6_ce0 = grp_read_IR_fu_294_B_buffer_6_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        B_buffer_6_ce0 = grp_Filter_fu_228_B_6_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_buffer_6_ce0 = grp_DWT_IR_fu_216_B_6_ce0;
    end else begin
        B_buffer_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_buffer_6_d0 = grp_read_IR_fu_294_B_buffer_6_d0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_buffer_6_d0 = grp_DWT_IR_fu_216_B_6_d0;
    end else begin
        B_buffer_6_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_buffer_6_we0 = grp_read_IR_fu_294_B_buffer_6_we0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_buffer_6_we0 = grp_DWT_IR_fu_216_B_6_we0;
    end else begin
        B_buffer_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_buffer_7_address0 = grp_read_IR_fu_294_B_buffer_7_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        B_buffer_7_address0 = grp_Filter_fu_228_B_7_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_buffer_7_address0 = grp_DWT_IR_fu_216_B_7_address0;
    end else begin
        B_buffer_7_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_buffer_7_ce0 = grp_read_IR_fu_294_B_buffer_7_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        B_buffer_7_ce0 = grp_Filter_fu_228_B_7_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_buffer_7_ce0 = grp_DWT_IR_fu_216_B_7_ce0;
    end else begin
        B_buffer_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_buffer_7_d0 = grp_read_IR_fu_294_B_buffer_7_d0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_buffer_7_d0 = grp_DWT_IR_fu_216_B_7_d0;
    end else begin
        B_buffer_7_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_buffer_7_we0 = grp_read_IR_fu_294_B_buffer_7_we0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_buffer_7_we0 = grp_DWT_IR_fu_216_B_7_we0;
    end else begin
        B_buffer_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        C_buffer_0_address0 = grp_write_image_fu_256_C_buffer_0_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        C_buffer_0_address0 = grp_Filter_fu_228_C_0_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_buffer_0_address0 = grp_IDWT_fu_192_C_0_address0;
    end else begin
        C_buffer_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        C_buffer_0_ce0 = grp_write_image_fu_256_C_buffer_0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        C_buffer_0_ce0 = grp_Filter_fu_228_C_0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_buffer_0_ce0 = grp_IDWT_fu_192_C_0_ce0;
    end else begin
        C_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        C_buffer_0_d0 = grp_Filter_fu_228_C_0_d0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_buffer_0_d0 = grp_IDWT_fu_192_C_0_d0;
    end else begin
        C_buffer_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        C_buffer_0_we0 = grp_Filter_fu_228_C_0_we0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_buffer_0_we0 = grp_IDWT_fu_192_C_0_we0;
    end else begin
        C_buffer_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        C_buffer_1_address0 = grp_write_image_fu_256_C_buffer_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        C_buffer_1_address0 = grp_Filter_fu_228_C_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_buffer_1_address0 = grp_IDWT_fu_192_C_1_address0;
    end else begin
        C_buffer_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        C_buffer_1_ce0 = grp_write_image_fu_256_C_buffer_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        C_buffer_1_ce0 = grp_Filter_fu_228_C_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_buffer_1_ce0 = grp_IDWT_fu_192_C_1_ce0;
    end else begin
        C_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        C_buffer_1_d0 = grp_Filter_fu_228_C_1_d0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_buffer_1_d0 = grp_IDWT_fu_192_C_1_d0;
    end else begin
        C_buffer_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        C_buffer_1_we0 = grp_Filter_fu_228_C_1_we0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_buffer_1_we0 = grp_IDWT_fu_192_C_1_we0;
    end else begin
        C_buffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        C_buffer_2_address0 = grp_write_image_fu_256_C_buffer_2_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        C_buffer_2_address0 = grp_Filter_fu_228_C_2_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_buffer_2_address0 = grp_IDWT_fu_192_C_2_address0;
    end else begin
        C_buffer_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        C_buffer_2_ce0 = grp_write_image_fu_256_C_buffer_2_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        C_buffer_2_ce0 = grp_Filter_fu_228_C_2_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_buffer_2_ce0 = grp_IDWT_fu_192_C_2_ce0;
    end else begin
        C_buffer_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        C_buffer_2_d0 = grp_Filter_fu_228_C_2_d0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_buffer_2_d0 = grp_IDWT_fu_192_C_2_d0;
    end else begin
        C_buffer_2_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        C_buffer_2_we0 = grp_Filter_fu_228_C_2_we0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_buffer_2_we0 = grp_IDWT_fu_192_C_2_we0;
    end else begin
        C_buffer_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        C_buffer_3_address0 = grp_write_image_fu_256_C_buffer_3_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        C_buffer_3_address0 = grp_Filter_fu_228_C_3_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_buffer_3_address0 = grp_IDWT_fu_192_C_3_address0;
    end else begin
        C_buffer_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        C_buffer_3_ce0 = grp_write_image_fu_256_C_buffer_3_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        C_buffer_3_ce0 = grp_Filter_fu_228_C_3_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_buffer_3_ce0 = grp_IDWT_fu_192_C_3_ce0;
    end else begin
        C_buffer_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        C_buffer_3_d0 = grp_Filter_fu_228_C_3_d0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_buffer_3_d0 = grp_IDWT_fu_192_C_3_d0;
    end else begin
        C_buffer_3_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        C_buffer_3_we0 = grp_Filter_fu_228_C_3_we0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_buffer_3_we0 = grp_IDWT_fu_192_C_3_we0;
    end else begin
        C_buffer_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        C_buffer_4_address0 = grp_write_image_fu_256_C_buffer_4_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        C_buffer_4_address0 = grp_Filter_fu_228_C_4_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_buffer_4_address0 = grp_IDWT_fu_192_C_4_address0;
    end else begin
        C_buffer_4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        C_buffer_4_ce0 = grp_write_image_fu_256_C_buffer_4_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        C_buffer_4_ce0 = grp_Filter_fu_228_C_4_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_buffer_4_ce0 = grp_IDWT_fu_192_C_4_ce0;
    end else begin
        C_buffer_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        C_buffer_4_d0 = grp_Filter_fu_228_C_4_d0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_buffer_4_d0 = grp_IDWT_fu_192_C_4_d0;
    end else begin
        C_buffer_4_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        C_buffer_4_we0 = grp_Filter_fu_228_C_4_we0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_buffer_4_we0 = grp_IDWT_fu_192_C_4_we0;
    end else begin
        C_buffer_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        C_buffer_5_address0 = grp_write_image_fu_256_C_buffer_5_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        C_buffer_5_address0 = grp_Filter_fu_228_C_5_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_buffer_5_address0 = grp_IDWT_fu_192_C_5_address0;
    end else begin
        C_buffer_5_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        C_buffer_5_ce0 = grp_write_image_fu_256_C_buffer_5_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        C_buffer_5_ce0 = grp_Filter_fu_228_C_5_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_buffer_5_ce0 = grp_IDWT_fu_192_C_5_ce0;
    end else begin
        C_buffer_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        C_buffer_5_d0 = grp_Filter_fu_228_C_5_d0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_buffer_5_d0 = grp_IDWT_fu_192_C_5_d0;
    end else begin
        C_buffer_5_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        C_buffer_5_we0 = grp_Filter_fu_228_C_5_we0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_buffer_5_we0 = grp_IDWT_fu_192_C_5_we0;
    end else begin
        C_buffer_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        C_buffer_6_address0 = grp_write_image_fu_256_C_buffer_6_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        C_buffer_6_address0 = grp_Filter_fu_228_C_6_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_buffer_6_address0 = grp_IDWT_fu_192_C_6_address0;
    end else begin
        C_buffer_6_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        C_buffer_6_ce0 = grp_write_image_fu_256_C_buffer_6_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        C_buffer_6_ce0 = grp_Filter_fu_228_C_6_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_buffer_6_ce0 = grp_IDWT_fu_192_C_6_ce0;
    end else begin
        C_buffer_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        C_buffer_6_d0 = grp_Filter_fu_228_C_6_d0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_buffer_6_d0 = grp_IDWT_fu_192_C_6_d0;
    end else begin
        C_buffer_6_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        C_buffer_6_we0 = grp_Filter_fu_228_C_6_we0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_buffer_6_we0 = grp_IDWT_fu_192_C_6_we0;
    end else begin
        C_buffer_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        C_buffer_7_address0 = grp_write_image_fu_256_C_buffer_7_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        C_buffer_7_address0 = grp_Filter_fu_228_C_7_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_buffer_7_address0 = grp_IDWT_fu_192_C_7_address0;
    end else begin
        C_buffer_7_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        C_buffer_7_ce0 = grp_write_image_fu_256_C_buffer_7_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        C_buffer_7_ce0 = grp_Filter_fu_228_C_7_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_buffer_7_ce0 = grp_IDWT_fu_192_C_7_ce0;
    end else begin
        C_buffer_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        C_buffer_7_d0 = grp_Filter_fu_228_C_7_d0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_buffer_7_d0 = grp_IDWT_fu_192_C_7_d0;
    end else begin
        C_buffer_7_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        C_buffer_7_we0 = grp_Filter_fu_228_C_7_we0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_buffer_7_we0 = grp_IDWT_fu_192_C_7_we0;
    end else begin
        C_buffer_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_A_ARVALID = grp_read_color_fu_271_m_axi_a_ARVALID;
    end else begin
        DATA_A_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_A_RREADY = grp_read_color_fu_271_m_axi_a_RREADY;
    end else begin
        DATA_A_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_B_ARVALID = grp_read_IR_fu_294_m_axi_b_ARVALID;
    end else begin
        DATA_B_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_B_RREADY = grp_read_IR_fu_294_m_axi_b_RREADY;
    end else begin
        DATA_B_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        DATA_C_AWVALID = grp_write_image_fu_256_m_axi_c_AWVALID;
    end else begin
        DATA_C_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        DATA_C_BREADY = grp_write_image_fu_256_m_axi_c_BREADY;
    end else begin
        DATA_C_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        DATA_C_WVALID = grp_write_image_fu_256_m_axi_c_WVALID;
    end else begin
        DATA_C_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((grp_write_image_fu_256_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_write_image_fu_256_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_Filter_fu_228_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((grp_IDWT_fu_192_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((grp_write_image_fu_256_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state2_on_subcall_done = ((grp_read_color_fu_271_ap_done == 1'b0) | (grp_read_IR_fu_294_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state4_on_subcall_done = ((grp_DWT_IR_fu_216_ap_done == 1'b0) | (grp_DWT_color_fu_204_ap_done == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_DWT_IR_fu_216_ap_start = grp_DWT_IR_fu_216_ap_start_reg;

assign grp_DWT_color_fu_204_ap_start = grp_DWT_color_fu_204_ap_start_reg;

assign grp_Filter_fu_228_ap_start = grp_Filter_fu_228_ap_start_reg;

assign grp_IDWT_fu_192_ap_start = grp_IDWT_fu_192_ap_start_reg;

assign grp_read_IR_fu_294_ap_start = grp_read_IR_fu_294_ap_start_reg;

assign grp_read_color_fu_271_ap_start = grp_read_color_fu_271_ap_start_reg;

assign grp_write_image_fu_256_ap_start = grp_write_image_fu_256_ap_start_reg;

endmodule //DWT_Accel
