// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module read_color (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_a_AWVALID,
        m_axi_a_AWREADY,
        m_axi_a_AWADDR,
        m_axi_a_AWID,
        m_axi_a_AWLEN,
        m_axi_a_AWSIZE,
        m_axi_a_AWBURST,
        m_axi_a_AWLOCK,
        m_axi_a_AWCACHE,
        m_axi_a_AWPROT,
        m_axi_a_AWQOS,
        m_axi_a_AWREGION,
        m_axi_a_AWUSER,
        m_axi_a_WVALID,
        m_axi_a_WREADY,
        m_axi_a_WDATA,
        m_axi_a_WSTRB,
        m_axi_a_WLAST,
        m_axi_a_WID,
        m_axi_a_WUSER,
        m_axi_a_ARVALID,
        m_axi_a_ARREADY,
        m_axi_a_ARADDR,
        m_axi_a_ARID,
        m_axi_a_ARLEN,
        m_axi_a_ARSIZE,
        m_axi_a_ARBURST,
        m_axi_a_ARLOCK,
        m_axi_a_ARCACHE,
        m_axi_a_ARPROT,
        m_axi_a_ARQOS,
        m_axi_a_ARREGION,
        m_axi_a_ARUSER,
        m_axi_a_RVALID,
        m_axi_a_RREADY,
        m_axi_a_RDATA,
        m_axi_a_RLAST,
        m_axi_a_RID,
        m_axi_a_RUSER,
        m_axi_a_RRESP,
        m_axi_a_BVALID,
        m_axi_a_BREADY,
        m_axi_a_BRESP,
        m_axi_a_BID,
        m_axi_a_BUSER,
        a_offset,
        A_buffer_0_address0,
        A_buffer_0_ce0,
        A_buffer_0_we0,
        A_buffer_0_d0,
        A_buffer_1_address0,
        A_buffer_1_ce0,
        A_buffer_1_we0,
        A_buffer_1_d0,
        A_buffer_2_address0,
        A_buffer_2_ce0,
        A_buffer_2_we0,
        A_buffer_2_d0,
        A_buffer_3_address0,
        A_buffer_3_ce0,
        A_buffer_3_we0,
        A_buffer_3_d0,
        A_buffer_4_address0,
        A_buffer_4_ce0,
        A_buffer_4_we0,
        A_buffer_4_d0,
        A_buffer_5_address0,
        A_buffer_5_ce0,
        A_buffer_5_we0,
        A_buffer_5_d0,
        A_buffer_6_address0,
        A_buffer_6_ce0,
        A_buffer_6_we0,
        A_buffer_6_d0,
        A_buffer_7_address0,
        A_buffer_7_ce0,
        A_buffer_7_we0,
        A_buffer_7_d0
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_a_AWVALID;
input   m_axi_a_AWREADY;
output  [31:0] m_axi_a_AWADDR;
output  [0:0] m_axi_a_AWID;
output  [31:0] m_axi_a_AWLEN;
output  [2:0] m_axi_a_AWSIZE;
output  [1:0] m_axi_a_AWBURST;
output  [1:0] m_axi_a_AWLOCK;
output  [3:0] m_axi_a_AWCACHE;
output  [2:0] m_axi_a_AWPROT;
output  [3:0] m_axi_a_AWQOS;
output  [3:0] m_axi_a_AWREGION;
output  [0:0] m_axi_a_AWUSER;
output   m_axi_a_WVALID;
input   m_axi_a_WREADY;
output  [15:0] m_axi_a_WDATA;
output  [1:0] m_axi_a_WSTRB;
output   m_axi_a_WLAST;
output  [0:0] m_axi_a_WID;
output  [0:0] m_axi_a_WUSER;
output   m_axi_a_ARVALID;
input   m_axi_a_ARREADY;
output  [31:0] m_axi_a_ARADDR;
output  [0:0] m_axi_a_ARID;
output  [31:0] m_axi_a_ARLEN;
output  [2:0] m_axi_a_ARSIZE;
output  [1:0] m_axi_a_ARBURST;
output  [1:0] m_axi_a_ARLOCK;
output  [3:0] m_axi_a_ARCACHE;
output  [2:0] m_axi_a_ARPROT;
output  [3:0] m_axi_a_ARQOS;
output  [3:0] m_axi_a_ARREGION;
output  [0:0] m_axi_a_ARUSER;
input   m_axi_a_RVALID;
output   m_axi_a_RREADY;
input  [15:0] m_axi_a_RDATA;
input   m_axi_a_RLAST;
input  [0:0] m_axi_a_RID;
input  [0:0] m_axi_a_RUSER;
input  [1:0] m_axi_a_RRESP;
input   m_axi_a_BVALID;
output   m_axi_a_BREADY;
input  [1:0] m_axi_a_BRESP;
input  [0:0] m_axi_a_BID;
input  [0:0] m_axi_a_BUSER;
input  [30:0] a_offset;
output  [11:0] A_buffer_0_address0;
output   A_buffer_0_ce0;
output   A_buffer_0_we0;
output  [15:0] A_buffer_0_d0;
output  [11:0] A_buffer_1_address0;
output   A_buffer_1_ce0;
output   A_buffer_1_we0;
output  [15:0] A_buffer_1_d0;
output  [11:0] A_buffer_2_address0;
output   A_buffer_2_ce0;
output   A_buffer_2_we0;
output  [15:0] A_buffer_2_d0;
output  [11:0] A_buffer_3_address0;
output   A_buffer_3_ce0;
output   A_buffer_3_we0;
output  [15:0] A_buffer_3_d0;
output  [11:0] A_buffer_4_address0;
output   A_buffer_4_ce0;
output   A_buffer_4_we0;
output  [15:0] A_buffer_4_d0;
output  [11:0] A_buffer_5_address0;
output   A_buffer_5_ce0;
output   A_buffer_5_we0;
output  [15:0] A_buffer_5_d0;
output  [11:0] A_buffer_6_address0;
output   A_buffer_6_ce0;
output   A_buffer_6_we0;
output  [15:0] A_buffer_6_d0;
output  [11:0] A_buffer_7_address0;
output   A_buffer_7_ce0;
output   A_buffer_7_we0;
output  [15:0] A_buffer_7_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_a_ARVALID;
reg m_axi_a_RREADY;
reg A_buffer_0_ce0;
reg A_buffer_0_we0;
reg A_buffer_1_ce0;
reg A_buffer_1_we0;
reg A_buffer_2_ce0;
reg A_buffer_2_we0;
reg A_buffer_3_ce0;
reg A_buffer_3_we0;
reg A_buffer_4_ce0;
reg A_buffer_4_we0;
reg A_buffer_5_ce0;
reg A_buffer_5_we0;
reg A_buffer_6_ce0;
reg A_buffer_6_we0;
reg A_buffer_7_ce0;
reg A_buffer_7_we0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    a_blk_n_AR;
wire    ap_CS_fsm_state4;
reg    a_blk_n_R;
wire    ap_CS_fsm_state11;
wire   [31:0] a_offset_cast_fu_236_p1;
reg   [31:0] a_offset_cast_reg_387;
wire   [6:0] add_ln25_fu_240_p2;
reg   [6:0] add_ln25_reg_392;
wire    ap_CS_fsm_state2;
wire   [14:0] add_ln25_2_fu_270_p2;
reg   [14:0] add_ln25_2_reg_397;
wire   [2:0] trunc_ln25_fu_276_p1;
reg   [2:0] trunc_ln25_reg_402;
wire   [11:0] add_ln25_3_fu_314_p2;
reg   [11:0] add_ln25_3_reg_406;
reg   [31:0] a_addr_reg_411;
wire    ap_CS_fsm_state3;
wire   [7:0] add_ln25_1_fu_348_p2;
reg   [7:0] add_ln25_1_reg_417;
reg   [11:0] A_buffer_0_addr_reg_422;
reg   [11:0] A_buffer_1_addr_reg_427;
reg   [11:0] A_buffer_2_addr_reg_432;
reg   [11:0] A_buffer_3_addr_reg_437;
reg   [11:0] A_buffer_4_addr_reg_442;
reg   [11:0] A_buffer_5_addr_reg_447;
reg   [11:0] A_buffer_6_addr_reg_452;
reg   [11:0] A_buffer_7_addr_reg_457;
reg   [15:0] a_addr_read_reg_462;
reg   [6:0] phi_ln25_reg_212;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln25_fu_375_p2;
wire   [0:0] icmp_ln25_1_fu_381_p2;
reg   [7:0] phi_ln25_1_reg_224;
wire   [63:0] zext_ln25_8_fu_363_p1;
wire   [63:0] zext_ln25_7_fu_338_p1;
wire   [13:0] tmp_fu_246_p3;
wire   [11:0] tmp_5_fu_258_p3;
wire   [14:0] zext_ln25_fu_254_p1;
wire   [14:0] zext_ln25_1_fu_266_p1;
wire   [3:0] lshr_ln_fu_280_p4;
wire   [10:0] tmp_6_fu_290_p3;
wire   [8:0] tmp_7_fu_302_p3;
wire   [11:0] zext_ln25_2_fu_298_p1;
wire   [11:0] zext_ln25_3_fu_310_p1;
wire   [14:0] zext_ln25_5_fu_320_p1;
wire   [14:0] add_ln25_4_fu_324_p2;
wire   [31:0] zext_ln25_6_fu_329_p1;
wire   [31:0] add_ln25_5_fu_333_p2;
wire   [11:0] zext_ln25_4_fu_354_p1;
wire   [11:0] add_ln25_6_fu_358_p2;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_375_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        phi_ln25_1_reg_224 <= add_ln25_1_reg_417;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        phi_ln25_1_reg_224 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_1_fu_381_p2 == 1'd0) & (icmp_ln25_fu_375_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        phi_ln25_reg_212 <= add_ln25_reg_392;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_ln25_reg_212 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_a_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        A_buffer_0_addr_reg_422 <= zext_ln25_8_fu_363_p1;
        A_buffer_1_addr_reg_427 <= zext_ln25_8_fu_363_p1;
        A_buffer_2_addr_reg_432 <= zext_ln25_8_fu_363_p1;
        A_buffer_3_addr_reg_437 <= zext_ln25_8_fu_363_p1;
        A_buffer_4_addr_reg_442 <= zext_ln25_8_fu_363_p1;
        A_buffer_5_addr_reg_447 <= zext_ln25_8_fu_363_p1;
        A_buffer_6_addr_reg_452 <= zext_ln25_8_fu_363_p1;
        A_buffer_7_addr_reg_457 <= zext_ln25_8_fu_363_p1;
        a_addr_read_reg_462 <= m_axi_a_RDATA;
        add_ln25_1_reg_417 <= add_ln25_1_fu_348_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_addr_reg_411 <= zext_ln25_7_fu_338_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        a_offset_cast_reg_387[30 : 0] <= a_offset_cast_fu_236_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln25_2_reg_397[14 : 5] <= add_ln25_2_fu_270_p2[14 : 5];
        add_ln25_3_reg_406[11 : 5] <= add_ln25_3_fu_314_p2[11 : 5];
        add_ln25_reg_392 <= add_ln25_fu_240_p2;
        trunc_ln25_reg_402 <= trunc_ln25_fu_276_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        A_buffer_0_ce0 = 1'b1;
    end else begin
        A_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln25_reg_402 == 3'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        A_buffer_0_we0 = 1'b1;
    end else begin
        A_buffer_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        A_buffer_1_ce0 = 1'b1;
    end else begin
        A_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (trunc_ln25_reg_402 == 3'd1))) begin
        A_buffer_1_we0 = 1'b1;
    end else begin
        A_buffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        A_buffer_2_ce0 = 1'b1;
    end else begin
        A_buffer_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (trunc_ln25_reg_402 == 3'd2))) begin
        A_buffer_2_we0 = 1'b1;
    end else begin
        A_buffer_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        A_buffer_3_ce0 = 1'b1;
    end else begin
        A_buffer_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (trunc_ln25_reg_402 == 3'd3))) begin
        A_buffer_3_we0 = 1'b1;
    end else begin
        A_buffer_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        A_buffer_4_ce0 = 1'b1;
    end else begin
        A_buffer_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (trunc_ln25_reg_402 == 3'd4))) begin
        A_buffer_4_we0 = 1'b1;
    end else begin
        A_buffer_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        A_buffer_5_ce0 = 1'b1;
    end else begin
        A_buffer_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (trunc_ln25_reg_402 == 3'd5))) begin
        A_buffer_5_we0 = 1'b1;
    end else begin
        A_buffer_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        A_buffer_6_ce0 = 1'b1;
    end else begin
        A_buffer_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (trunc_ln25_reg_402 == 3'd6))) begin
        A_buffer_6_we0 = 1'b1;
    end else begin
        A_buffer_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        A_buffer_7_ce0 = 1'b1;
    end else begin
        A_buffer_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (trunc_ln25_reg_402 == 3'd7))) begin
        A_buffer_7_we0 = 1'b1;
    end else begin
        A_buffer_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_blk_n_AR = m_axi_a_ARREADY;
    end else begin
        a_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        a_blk_n_R = m_axi_a_RVALID;
    end else begin
        a_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln25_1_fu_381_p2 == 1'd1) & (icmp_ln25_fu_375_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_1_fu_381_p2 == 1'd1) & (icmp_ln25_fu_375_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_a_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_a_ARVALID = 1'b1;
    end else begin
        m_axi_a_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_a_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        m_axi_a_RREADY = 1'b1;
    end else begin
        m_axi_a_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((m_axi_a_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((m_axi_a_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((icmp_ln25_1_fu_381_p2 == 1'd1) & (icmp_ln25_fu_375_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((icmp_ln25_1_fu_381_p2 == 1'd0) & (icmp_ln25_fu_375_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_buffer_0_address0 = A_buffer_0_addr_reg_422;

assign A_buffer_0_d0 = a_addr_read_reg_462;

assign A_buffer_1_address0 = A_buffer_1_addr_reg_427;

assign A_buffer_1_d0 = a_addr_read_reg_462;

assign A_buffer_2_address0 = A_buffer_2_addr_reg_432;

assign A_buffer_2_d0 = a_addr_read_reg_462;

assign A_buffer_3_address0 = A_buffer_3_addr_reg_437;

assign A_buffer_3_d0 = a_addr_read_reg_462;

assign A_buffer_4_address0 = A_buffer_4_addr_reg_442;

assign A_buffer_4_d0 = a_addr_read_reg_462;

assign A_buffer_5_address0 = A_buffer_5_addr_reg_447;

assign A_buffer_5_d0 = a_addr_read_reg_462;

assign A_buffer_6_address0 = A_buffer_6_addr_reg_452;

assign A_buffer_6_d0 = a_addr_read_reg_462;

assign A_buffer_7_address0 = A_buffer_7_addr_reg_457;

assign A_buffer_7_d0 = a_addr_read_reg_462;

assign a_offset_cast_fu_236_p1 = a_offset;

assign add_ln25_1_fu_348_p2 = (phi_ln25_1_reg_224 + 8'd1);

assign add_ln25_2_fu_270_p2 = (zext_ln25_fu_254_p1 + zext_ln25_1_fu_266_p1);

assign add_ln25_3_fu_314_p2 = (zext_ln25_2_fu_298_p1 + zext_ln25_3_fu_310_p1);

assign add_ln25_4_fu_324_p2 = (add_ln25_2_reg_397 + zext_ln25_5_fu_320_p1);

assign add_ln25_5_fu_333_p2 = (a_offset_cast_reg_387 + zext_ln25_6_fu_329_p1);

assign add_ln25_6_fu_358_p2 = (add_ln25_3_reg_406 + zext_ln25_4_fu_354_p1);

assign add_ln25_fu_240_p2 = (7'd1 + phi_ln25_reg_212);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign icmp_ln25_1_fu_381_p2 = ((phi_ln25_reg_212 == 7'd119) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_375_p2 = ((phi_ln25_1_reg_224 == 8'd159) ? 1'b1 : 1'b0);

assign lshr_ln_fu_280_p4 = {{phi_ln25_reg_212[6:3]}};

assign m_axi_a_ARADDR = a_addr_reg_411;

assign m_axi_a_ARBURST = 2'd0;

assign m_axi_a_ARCACHE = 4'd0;

assign m_axi_a_ARID = 1'd0;

assign m_axi_a_ARLEN = 32'd1;

assign m_axi_a_ARLOCK = 2'd0;

assign m_axi_a_ARPROT = 3'd0;

assign m_axi_a_ARQOS = 4'd0;

assign m_axi_a_ARREGION = 4'd0;

assign m_axi_a_ARSIZE = 3'd0;

assign m_axi_a_ARUSER = 1'd0;

assign m_axi_a_AWADDR = 32'd0;

assign m_axi_a_AWBURST = 2'd0;

assign m_axi_a_AWCACHE = 4'd0;

assign m_axi_a_AWID = 1'd0;

assign m_axi_a_AWLEN = 32'd0;

assign m_axi_a_AWLOCK = 2'd0;

assign m_axi_a_AWPROT = 3'd0;

assign m_axi_a_AWQOS = 4'd0;

assign m_axi_a_AWREGION = 4'd0;

assign m_axi_a_AWSIZE = 3'd0;

assign m_axi_a_AWUSER = 1'd0;

assign m_axi_a_AWVALID = 1'b0;

assign m_axi_a_BREADY = 1'b0;

assign m_axi_a_WDATA = 16'd0;

assign m_axi_a_WID = 1'd0;

assign m_axi_a_WLAST = 1'b0;

assign m_axi_a_WSTRB = 2'd0;

assign m_axi_a_WUSER = 1'd0;

assign m_axi_a_WVALID = 1'b0;

assign tmp_5_fu_258_p3 = {{phi_ln25_reg_212}, {5'd0}};

assign tmp_6_fu_290_p3 = {{lshr_ln_fu_280_p4}, {7'd0}};

assign tmp_7_fu_302_p3 = {{lshr_ln_fu_280_p4}, {5'd0}};

assign tmp_fu_246_p3 = {{phi_ln25_reg_212}, {7'd0}};

assign trunc_ln25_fu_276_p1 = phi_ln25_reg_212[2:0];

assign zext_ln25_1_fu_266_p1 = tmp_5_fu_258_p3;

assign zext_ln25_2_fu_298_p1 = tmp_6_fu_290_p3;

assign zext_ln25_3_fu_310_p1 = tmp_7_fu_302_p3;

assign zext_ln25_4_fu_354_p1 = phi_ln25_1_reg_224;

assign zext_ln25_5_fu_320_p1 = phi_ln25_1_reg_224;

assign zext_ln25_6_fu_329_p1 = add_ln25_4_fu_324_p2;

assign zext_ln25_7_fu_338_p1 = add_ln25_5_fu_333_p2;

assign zext_ln25_8_fu_363_p1 = add_ln25_6_fu_358_p2;

assign zext_ln25_fu_254_p1 = tmp_fu_246_p3;

always @ (posedge ap_clk) begin
    a_offset_cast_reg_387[31] <= 1'b0;
    add_ln25_2_reg_397[4:0] <= 5'b00000;
    add_ln25_3_reg_406[4:0] <= 5'b00000;
end

endmodule //read_color
