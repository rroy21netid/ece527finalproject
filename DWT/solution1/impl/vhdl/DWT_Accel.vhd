-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DWT_Accel is
generic (
    C_M_AXI_DATA_A_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_A_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_A_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_A_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_A_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_A_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_A_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_A_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_B_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_B_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_B_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_B_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_B_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_B_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_B_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_B_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_C_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_C_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_A_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_A_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_A_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA_B_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_B_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_B_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA_C_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_C_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_C_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_DATA_A_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_A_AWREADY : IN STD_LOGIC;
    m_axi_DATA_A_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_A_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_A_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_A_ID_WIDTH-1 downto 0);
    m_axi_DATA_A_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_A_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_A_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_A_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_A_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_A_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_A_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_A_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_A_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_A_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_A_WVALID : OUT STD_LOGIC;
    m_axi_DATA_A_WREADY : IN STD_LOGIC;
    m_axi_DATA_A_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_A_DATA_WIDTH-1 downto 0);
    m_axi_DATA_A_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_A_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_A_WLAST : OUT STD_LOGIC;
    m_axi_DATA_A_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_A_ID_WIDTH-1 downto 0);
    m_axi_DATA_A_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_A_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_A_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_A_ARREADY : IN STD_LOGIC;
    m_axi_DATA_A_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_A_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_A_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_A_ID_WIDTH-1 downto 0);
    m_axi_DATA_A_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_A_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_A_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_A_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_A_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_A_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_A_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_A_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_A_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_A_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_A_RVALID : IN STD_LOGIC;
    m_axi_DATA_A_RREADY : OUT STD_LOGIC;
    m_axi_DATA_A_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_A_DATA_WIDTH-1 downto 0);
    m_axi_DATA_A_RLAST : IN STD_LOGIC;
    m_axi_DATA_A_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_A_ID_WIDTH-1 downto 0);
    m_axi_DATA_A_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_A_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_A_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_A_BVALID : IN STD_LOGIC;
    m_axi_DATA_A_BREADY : OUT STD_LOGIC;
    m_axi_DATA_A_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_A_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_A_ID_WIDTH-1 downto 0);
    m_axi_DATA_A_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_A_BUSER_WIDTH-1 downto 0);
    m_axi_DATA_B_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_B_AWREADY : IN STD_LOGIC;
    m_axi_DATA_B_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_B_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_B_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_B_ID_WIDTH-1 downto 0);
    m_axi_DATA_B_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_B_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_B_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_B_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_B_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_B_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_B_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_B_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_B_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_B_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_B_WVALID : OUT STD_LOGIC;
    m_axi_DATA_B_WREADY : IN STD_LOGIC;
    m_axi_DATA_B_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_B_DATA_WIDTH-1 downto 0);
    m_axi_DATA_B_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_B_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_B_WLAST : OUT STD_LOGIC;
    m_axi_DATA_B_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_B_ID_WIDTH-1 downto 0);
    m_axi_DATA_B_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_B_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_B_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_B_ARREADY : IN STD_LOGIC;
    m_axi_DATA_B_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_B_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_B_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_B_ID_WIDTH-1 downto 0);
    m_axi_DATA_B_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_B_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_B_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_B_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_B_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_B_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_B_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_B_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_B_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_B_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_B_RVALID : IN STD_LOGIC;
    m_axi_DATA_B_RREADY : OUT STD_LOGIC;
    m_axi_DATA_B_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_B_DATA_WIDTH-1 downto 0);
    m_axi_DATA_B_RLAST : IN STD_LOGIC;
    m_axi_DATA_B_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_B_ID_WIDTH-1 downto 0);
    m_axi_DATA_B_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_B_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_B_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_B_BVALID : IN STD_LOGIC;
    m_axi_DATA_B_BREADY : OUT STD_LOGIC;
    m_axi_DATA_B_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_B_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_B_ID_WIDTH-1 downto 0);
    m_axi_DATA_B_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_B_BUSER_WIDTH-1 downto 0);
    m_axi_DATA_C_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_C_AWREADY : IN STD_LOGIC;
    m_axi_DATA_C_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_C_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C_ID_WIDTH-1 downto 0);
    m_axi_DATA_C_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_C_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_C_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_C_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_C_WVALID : OUT STD_LOGIC;
    m_axi_DATA_C_WREADY : IN STD_LOGIC;
    m_axi_DATA_C_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C_DATA_WIDTH-1 downto 0);
    m_axi_DATA_C_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_C_WLAST : OUT STD_LOGIC;
    m_axi_DATA_C_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C_ID_WIDTH-1 downto 0);
    m_axi_DATA_C_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_C_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_C_ARREADY : IN STD_LOGIC;
    m_axi_DATA_C_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_C_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C_ID_WIDTH-1 downto 0);
    m_axi_DATA_C_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_C_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_C_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_C_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_C_RVALID : IN STD_LOGIC;
    m_axi_DATA_C_RREADY : OUT STD_LOGIC;
    m_axi_DATA_C_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C_DATA_WIDTH-1 downto 0);
    m_axi_DATA_C_RLAST : IN STD_LOGIC;
    m_axi_DATA_C_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C_ID_WIDTH-1 downto 0);
    m_axi_DATA_C_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_C_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C_BVALID : IN STD_LOGIC;
    m_axi_DATA_C_BREADY : OUT STD_LOGIC;
    m_axi_DATA_C_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C_ID_WIDTH-1 downto 0);
    m_axi_DATA_C_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C_BUSER_WIDTH-1 downto 0);
    s_axi_CTL_AWVALID : IN STD_LOGIC;
    s_axi_CTL_AWREADY : OUT STD_LOGIC;
    s_axi_CTL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTL_ADDR_WIDTH-1 downto 0);
    s_axi_CTL_WVALID : IN STD_LOGIC;
    s_axi_CTL_WREADY : OUT STD_LOGIC;
    s_axi_CTL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTL_DATA_WIDTH-1 downto 0);
    s_axi_CTL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTL_ARVALID : IN STD_LOGIC;
    s_axi_CTL_ARREADY : OUT STD_LOGIC;
    s_axi_CTL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTL_ADDR_WIDTH-1 downto 0);
    s_axi_CTL_RVALID : OUT STD_LOGIC;
    s_axi_CTL_RREADY : IN STD_LOGIC;
    s_axi_CTL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTL_DATA_WIDTH-1 downto 0);
    s_axi_CTL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTL_BVALID : OUT STD_LOGIC;
    s_axi_CTL_BREADY : IN STD_LOGIC;
    s_axi_CTL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of DWT_Accel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "DWT_Accel,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.348300,HLS_SYN_LAT=1550688,HLS_SYN_TPT=none,HLS_SYN_MEM=122,HLS_SYN_DSP=103,HLS_SYN_FF=22132,HLS_SYN_LUT=32650,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal a : STD_LOGIC_VECTOR (31 downto 0);
    signal b : STD_LOGIC_VECTOR (31 downto 0);
    signal c : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_A_AWREADY : STD_LOGIC;
    signal DATA_A_WREADY : STD_LOGIC;
    signal DATA_A_ARVALID : STD_LOGIC;
    signal DATA_A_ARREADY : STD_LOGIC;
    signal DATA_A_RVALID : STD_LOGIC;
    signal DATA_A_RREADY : STD_LOGIC;
    signal DATA_A_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal DATA_A_RLAST : STD_LOGIC;
    signal DATA_A_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_A_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_A_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_A_BVALID : STD_LOGIC;
    signal DATA_A_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_A_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_A_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_B_AWREADY : STD_LOGIC;
    signal DATA_B_WREADY : STD_LOGIC;
    signal DATA_B_ARVALID : STD_LOGIC;
    signal DATA_B_ARREADY : STD_LOGIC;
    signal DATA_B_RVALID : STD_LOGIC;
    signal DATA_B_RREADY : STD_LOGIC;
    signal DATA_B_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal DATA_B_RLAST : STD_LOGIC;
    signal DATA_B_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_B_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_B_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_B_BVALID : STD_LOGIC;
    signal DATA_B_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_B_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_B_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_C_AWVALID : STD_LOGIC;
    signal DATA_C_AWREADY : STD_LOGIC;
    signal DATA_C_WVALID : STD_LOGIC;
    signal DATA_C_WREADY : STD_LOGIC;
    signal DATA_C_ARREADY : STD_LOGIC;
    signal DATA_C_RVALID : STD_LOGIC;
    signal DATA_C_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal DATA_C_RLAST : STD_LOGIC;
    signal DATA_C_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_C_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_C_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_C_BVALID : STD_LOGIC;
    signal DATA_C_BREADY : STD_LOGIC;
    signal DATA_C_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_C_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_C_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal c5_reg_349 : STD_LOGIC_VECTOR (30 downto 0);
    signal b3_reg_354 : STD_LOGIC_VECTOR (30 downto 0);
    signal a1_reg_359 : STD_LOGIC_VECTOR (30 downto 0);
    signal A_buffer_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal A_buffer_0_ce0 : STD_LOGIC;
    signal A_buffer_0_we0 : STD_LOGIC;
    signal A_buffer_0_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_buffer_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_buffer_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal A_buffer_1_ce0 : STD_LOGIC;
    signal A_buffer_1_we0 : STD_LOGIC;
    signal A_buffer_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_buffer_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_buffer_2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal A_buffer_2_ce0 : STD_LOGIC;
    signal A_buffer_2_we0 : STD_LOGIC;
    signal A_buffer_2_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_buffer_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_buffer_3_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal A_buffer_3_ce0 : STD_LOGIC;
    signal A_buffer_3_we0 : STD_LOGIC;
    signal A_buffer_3_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_buffer_3_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_buffer_4_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal A_buffer_4_ce0 : STD_LOGIC;
    signal A_buffer_4_we0 : STD_LOGIC;
    signal A_buffer_4_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_buffer_4_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_buffer_5_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal A_buffer_5_ce0 : STD_LOGIC;
    signal A_buffer_5_we0 : STD_LOGIC;
    signal A_buffer_5_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_buffer_5_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_buffer_6_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal A_buffer_6_ce0 : STD_LOGIC;
    signal A_buffer_6_we0 : STD_LOGIC;
    signal A_buffer_6_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_buffer_6_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_buffer_7_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal A_buffer_7_ce0 : STD_LOGIC;
    signal A_buffer_7_we0 : STD_LOGIC;
    signal A_buffer_7_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_buffer_7_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_buffer_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal B_buffer_0_ce0 : STD_LOGIC;
    signal B_buffer_0_we0 : STD_LOGIC;
    signal B_buffer_0_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_buffer_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_buffer_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal B_buffer_1_ce0 : STD_LOGIC;
    signal B_buffer_1_we0 : STD_LOGIC;
    signal B_buffer_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_buffer_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_buffer_2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal B_buffer_2_ce0 : STD_LOGIC;
    signal B_buffer_2_we0 : STD_LOGIC;
    signal B_buffer_2_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_buffer_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_buffer_3_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal B_buffer_3_ce0 : STD_LOGIC;
    signal B_buffer_3_we0 : STD_LOGIC;
    signal B_buffer_3_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_buffer_3_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_buffer_4_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal B_buffer_4_ce0 : STD_LOGIC;
    signal B_buffer_4_we0 : STD_LOGIC;
    signal B_buffer_4_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_buffer_4_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_buffer_5_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal B_buffer_5_ce0 : STD_LOGIC;
    signal B_buffer_5_we0 : STD_LOGIC;
    signal B_buffer_5_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_buffer_5_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_buffer_6_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal B_buffer_6_ce0 : STD_LOGIC;
    signal B_buffer_6_we0 : STD_LOGIC;
    signal B_buffer_6_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_buffer_6_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_buffer_7_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal B_buffer_7_ce0 : STD_LOGIC;
    signal B_buffer_7_we0 : STD_LOGIC;
    signal B_buffer_7_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_buffer_7_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal C_buffer_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal C_buffer_0_ce0 : STD_LOGIC;
    signal C_buffer_0_we0 : STD_LOGIC;
    signal C_buffer_0_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal C_buffer_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal C_buffer_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal C_buffer_1_ce0 : STD_LOGIC;
    signal C_buffer_1_we0 : STD_LOGIC;
    signal C_buffer_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal C_buffer_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal C_buffer_2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal C_buffer_2_ce0 : STD_LOGIC;
    signal C_buffer_2_we0 : STD_LOGIC;
    signal C_buffer_2_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal C_buffer_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal C_buffer_3_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal C_buffer_3_ce0 : STD_LOGIC;
    signal C_buffer_3_we0 : STD_LOGIC;
    signal C_buffer_3_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal C_buffer_3_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal C_buffer_4_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal C_buffer_4_ce0 : STD_LOGIC;
    signal C_buffer_4_we0 : STD_LOGIC;
    signal C_buffer_4_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal C_buffer_4_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal C_buffer_5_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal C_buffer_5_ce0 : STD_LOGIC;
    signal C_buffer_5_we0 : STD_LOGIC;
    signal C_buffer_5_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal C_buffer_5_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal C_buffer_6_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal C_buffer_6_ce0 : STD_LOGIC;
    signal C_buffer_6_we0 : STD_LOGIC;
    signal C_buffer_6_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal C_buffer_6_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal C_buffer_7_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal C_buffer_7_ce0 : STD_LOGIC;
    signal C_buffer_7_we0 : STD_LOGIC;
    signal C_buffer_7_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal C_buffer_7_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_IDWT_fu_192_ap_start : STD_LOGIC;
    signal grp_IDWT_fu_192_ap_done : STD_LOGIC;
    signal grp_IDWT_fu_192_ap_idle : STD_LOGIC;
    signal grp_IDWT_fu_192_ap_ready : STD_LOGIC;
    signal grp_IDWT_fu_192_C_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_IDWT_fu_192_C_0_ce0 : STD_LOGIC;
    signal grp_IDWT_fu_192_C_0_we0 : STD_LOGIC;
    signal grp_IDWT_fu_192_C_0_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_IDWT_fu_192_C_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_IDWT_fu_192_C_1_ce0 : STD_LOGIC;
    signal grp_IDWT_fu_192_C_1_we0 : STD_LOGIC;
    signal grp_IDWT_fu_192_C_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_IDWT_fu_192_C_2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_IDWT_fu_192_C_2_ce0 : STD_LOGIC;
    signal grp_IDWT_fu_192_C_2_we0 : STD_LOGIC;
    signal grp_IDWT_fu_192_C_2_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_IDWT_fu_192_C_3_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_IDWT_fu_192_C_3_ce0 : STD_LOGIC;
    signal grp_IDWT_fu_192_C_3_we0 : STD_LOGIC;
    signal grp_IDWT_fu_192_C_3_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_IDWT_fu_192_C_4_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_IDWT_fu_192_C_4_ce0 : STD_LOGIC;
    signal grp_IDWT_fu_192_C_4_we0 : STD_LOGIC;
    signal grp_IDWT_fu_192_C_4_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_IDWT_fu_192_C_5_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_IDWT_fu_192_C_5_ce0 : STD_LOGIC;
    signal grp_IDWT_fu_192_C_5_we0 : STD_LOGIC;
    signal grp_IDWT_fu_192_C_5_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_IDWT_fu_192_C_6_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_IDWT_fu_192_C_6_ce0 : STD_LOGIC;
    signal grp_IDWT_fu_192_C_6_we0 : STD_LOGIC;
    signal grp_IDWT_fu_192_C_6_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_IDWT_fu_192_C_7_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_IDWT_fu_192_C_7_ce0 : STD_LOGIC;
    signal grp_IDWT_fu_192_C_7_we0 : STD_LOGIC;
    signal grp_IDWT_fu_192_C_7_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_DWT_color_fu_204_ap_start : STD_LOGIC;
    signal grp_DWT_color_fu_204_ap_done : STD_LOGIC;
    signal grp_DWT_color_fu_204_ap_idle : STD_LOGIC;
    signal grp_DWT_color_fu_204_ap_ready : STD_LOGIC;
    signal grp_DWT_color_fu_204_A_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_DWT_color_fu_204_A_0_ce0 : STD_LOGIC;
    signal grp_DWT_color_fu_204_A_0_we0 : STD_LOGIC;
    signal grp_DWT_color_fu_204_A_0_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_DWT_color_fu_204_A_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_DWT_color_fu_204_A_1_ce0 : STD_LOGIC;
    signal grp_DWT_color_fu_204_A_1_we0 : STD_LOGIC;
    signal grp_DWT_color_fu_204_A_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_DWT_color_fu_204_A_2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_DWT_color_fu_204_A_2_ce0 : STD_LOGIC;
    signal grp_DWT_color_fu_204_A_2_we0 : STD_LOGIC;
    signal grp_DWT_color_fu_204_A_2_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_DWT_color_fu_204_A_3_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_DWT_color_fu_204_A_3_ce0 : STD_LOGIC;
    signal grp_DWT_color_fu_204_A_3_we0 : STD_LOGIC;
    signal grp_DWT_color_fu_204_A_3_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_DWT_color_fu_204_A_4_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_DWT_color_fu_204_A_4_ce0 : STD_LOGIC;
    signal grp_DWT_color_fu_204_A_4_we0 : STD_LOGIC;
    signal grp_DWT_color_fu_204_A_4_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_DWT_color_fu_204_A_5_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_DWT_color_fu_204_A_5_ce0 : STD_LOGIC;
    signal grp_DWT_color_fu_204_A_5_we0 : STD_LOGIC;
    signal grp_DWT_color_fu_204_A_5_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_DWT_color_fu_204_A_6_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_DWT_color_fu_204_A_6_ce0 : STD_LOGIC;
    signal grp_DWT_color_fu_204_A_6_we0 : STD_LOGIC;
    signal grp_DWT_color_fu_204_A_6_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_DWT_color_fu_204_A_7_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_DWT_color_fu_204_A_7_ce0 : STD_LOGIC;
    signal grp_DWT_color_fu_204_A_7_we0 : STD_LOGIC;
    signal grp_DWT_color_fu_204_A_7_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_DWT_IR_fu_216_ap_start : STD_LOGIC;
    signal grp_DWT_IR_fu_216_ap_done : STD_LOGIC;
    signal grp_DWT_IR_fu_216_ap_idle : STD_LOGIC;
    signal grp_DWT_IR_fu_216_ap_ready : STD_LOGIC;
    signal grp_DWT_IR_fu_216_B_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_DWT_IR_fu_216_B_0_ce0 : STD_LOGIC;
    signal grp_DWT_IR_fu_216_B_0_we0 : STD_LOGIC;
    signal grp_DWT_IR_fu_216_B_0_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_DWT_IR_fu_216_B_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_DWT_IR_fu_216_B_1_ce0 : STD_LOGIC;
    signal grp_DWT_IR_fu_216_B_1_we0 : STD_LOGIC;
    signal grp_DWT_IR_fu_216_B_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_DWT_IR_fu_216_B_2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_DWT_IR_fu_216_B_2_ce0 : STD_LOGIC;
    signal grp_DWT_IR_fu_216_B_2_we0 : STD_LOGIC;
    signal grp_DWT_IR_fu_216_B_2_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_DWT_IR_fu_216_B_3_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_DWT_IR_fu_216_B_3_ce0 : STD_LOGIC;
    signal grp_DWT_IR_fu_216_B_3_we0 : STD_LOGIC;
    signal grp_DWT_IR_fu_216_B_3_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_DWT_IR_fu_216_B_4_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_DWT_IR_fu_216_B_4_ce0 : STD_LOGIC;
    signal grp_DWT_IR_fu_216_B_4_we0 : STD_LOGIC;
    signal grp_DWT_IR_fu_216_B_4_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_DWT_IR_fu_216_B_5_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_DWT_IR_fu_216_B_5_ce0 : STD_LOGIC;
    signal grp_DWT_IR_fu_216_B_5_we0 : STD_LOGIC;
    signal grp_DWT_IR_fu_216_B_5_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_DWT_IR_fu_216_B_6_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_DWT_IR_fu_216_B_6_ce0 : STD_LOGIC;
    signal grp_DWT_IR_fu_216_B_6_we0 : STD_LOGIC;
    signal grp_DWT_IR_fu_216_B_6_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_DWT_IR_fu_216_B_7_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_DWT_IR_fu_216_B_7_ce0 : STD_LOGIC;
    signal grp_DWT_IR_fu_216_B_7_we0 : STD_LOGIC;
    signal grp_DWT_IR_fu_216_B_7_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Filter_fu_228_ap_start : STD_LOGIC;
    signal grp_Filter_fu_228_ap_done : STD_LOGIC;
    signal grp_Filter_fu_228_ap_idle : STD_LOGIC;
    signal grp_Filter_fu_228_ap_ready : STD_LOGIC;
    signal grp_Filter_fu_228_A_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Filter_fu_228_A_0_ce0 : STD_LOGIC;
    signal grp_Filter_fu_228_A_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Filter_fu_228_A_1_ce0 : STD_LOGIC;
    signal grp_Filter_fu_228_A_2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Filter_fu_228_A_2_ce0 : STD_LOGIC;
    signal grp_Filter_fu_228_A_3_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Filter_fu_228_A_3_ce0 : STD_LOGIC;
    signal grp_Filter_fu_228_A_4_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Filter_fu_228_A_4_ce0 : STD_LOGIC;
    signal grp_Filter_fu_228_A_5_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Filter_fu_228_A_5_ce0 : STD_LOGIC;
    signal grp_Filter_fu_228_A_6_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Filter_fu_228_A_6_ce0 : STD_LOGIC;
    signal grp_Filter_fu_228_A_7_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Filter_fu_228_A_7_ce0 : STD_LOGIC;
    signal grp_Filter_fu_228_B_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Filter_fu_228_B_0_ce0 : STD_LOGIC;
    signal grp_Filter_fu_228_B_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Filter_fu_228_B_1_ce0 : STD_LOGIC;
    signal grp_Filter_fu_228_B_2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Filter_fu_228_B_2_ce0 : STD_LOGIC;
    signal grp_Filter_fu_228_B_3_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Filter_fu_228_B_3_ce0 : STD_LOGIC;
    signal grp_Filter_fu_228_B_4_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Filter_fu_228_B_4_ce0 : STD_LOGIC;
    signal grp_Filter_fu_228_B_5_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Filter_fu_228_B_5_ce0 : STD_LOGIC;
    signal grp_Filter_fu_228_B_6_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Filter_fu_228_B_6_ce0 : STD_LOGIC;
    signal grp_Filter_fu_228_B_7_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Filter_fu_228_B_7_ce0 : STD_LOGIC;
    signal grp_Filter_fu_228_C_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Filter_fu_228_C_0_ce0 : STD_LOGIC;
    signal grp_Filter_fu_228_C_0_we0 : STD_LOGIC;
    signal grp_Filter_fu_228_C_0_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Filter_fu_228_C_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Filter_fu_228_C_1_ce0 : STD_LOGIC;
    signal grp_Filter_fu_228_C_1_we0 : STD_LOGIC;
    signal grp_Filter_fu_228_C_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Filter_fu_228_C_2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Filter_fu_228_C_2_ce0 : STD_LOGIC;
    signal grp_Filter_fu_228_C_2_we0 : STD_LOGIC;
    signal grp_Filter_fu_228_C_2_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Filter_fu_228_C_3_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Filter_fu_228_C_3_ce0 : STD_LOGIC;
    signal grp_Filter_fu_228_C_3_we0 : STD_LOGIC;
    signal grp_Filter_fu_228_C_3_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Filter_fu_228_C_4_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Filter_fu_228_C_4_ce0 : STD_LOGIC;
    signal grp_Filter_fu_228_C_4_we0 : STD_LOGIC;
    signal grp_Filter_fu_228_C_4_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Filter_fu_228_C_5_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Filter_fu_228_C_5_ce0 : STD_LOGIC;
    signal grp_Filter_fu_228_C_5_we0 : STD_LOGIC;
    signal grp_Filter_fu_228_C_5_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Filter_fu_228_C_6_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Filter_fu_228_C_6_ce0 : STD_LOGIC;
    signal grp_Filter_fu_228_C_6_we0 : STD_LOGIC;
    signal grp_Filter_fu_228_C_6_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Filter_fu_228_C_7_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Filter_fu_228_C_7_ce0 : STD_LOGIC;
    signal grp_Filter_fu_228_C_7_we0 : STD_LOGIC;
    signal grp_Filter_fu_228_C_7_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_write_image_fu_256_ap_start : STD_LOGIC;
    signal grp_write_image_fu_256_ap_done : STD_LOGIC;
    signal grp_write_image_fu_256_ap_idle : STD_LOGIC;
    signal grp_write_image_fu_256_ap_ready : STD_LOGIC;
    signal grp_write_image_fu_256_C_buffer_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_write_image_fu_256_C_buffer_0_ce0 : STD_LOGIC;
    signal grp_write_image_fu_256_C_buffer_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_write_image_fu_256_C_buffer_1_ce0 : STD_LOGIC;
    signal grp_write_image_fu_256_C_buffer_2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_write_image_fu_256_C_buffer_2_ce0 : STD_LOGIC;
    signal grp_write_image_fu_256_C_buffer_3_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_write_image_fu_256_C_buffer_3_ce0 : STD_LOGIC;
    signal grp_write_image_fu_256_C_buffer_4_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_write_image_fu_256_C_buffer_4_ce0 : STD_LOGIC;
    signal grp_write_image_fu_256_C_buffer_5_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_write_image_fu_256_C_buffer_5_ce0 : STD_LOGIC;
    signal grp_write_image_fu_256_C_buffer_6_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_write_image_fu_256_C_buffer_6_ce0 : STD_LOGIC;
    signal grp_write_image_fu_256_C_buffer_7_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_write_image_fu_256_C_buffer_7_ce0 : STD_LOGIC;
    signal grp_write_image_fu_256_m_axi_c_AWVALID : STD_LOGIC;
    signal grp_write_image_fu_256_m_axi_c_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_write_image_fu_256_m_axi_c_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_image_fu_256_m_axi_c_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_write_image_fu_256_m_axi_c_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_write_image_fu_256_m_axi_c_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_write_image_fu_256_m_axi_c_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_write_image_fu_256_m_axi_c_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_image_fu_256_m_axi_c_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_write_image_fu_256_m_axi_c_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_image_fu_256_m_axi_c_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_image_fu_256_m_axi_c_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_image_fu_256_m_axi_c_WVALID : STD_LOGIC;
    signal grp_write_image_fu_256_m_axi_c_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_write_image_fu_256_m_axi_c_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_write_image_fu_256_m_axi_c_WLAST : STD_LOGIC;
    signal grp_write_image_fu_256_m_axi_c_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_image_fu_256_m_axi_c_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_image_fu_256_m_axi_c_ARVALID : STD_LOGIC;
    signal grp_write_image_fu_256_m_axi_c_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_write_image_fu_256_m_axi_c_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_image_fu_256_m_axi_c_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_write_image_fu_256_m_axi_c_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_write_image_fu_256_m_axi_c_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_write_image_fu_256_m_axi_c_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_write_image_fu_256_m_axi_c_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_image_fu_256_m_axi_c_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_write_image_fu_256_m_axi_c_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_image_fu_256_m_axi_c_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_image_fu_256_m_axi_c_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_image_fu_256_m_axi_c_RREADY : STD_LOGIC;
    signal grp_write_image_fu_256_m_axi_c_BREADY : STD_LOGIC;
    signal grp_read_color_fu_271_ap_start : STD_LOGIC;
    signal grp_read_color_fu_271_ap_done : STD_LOGIC;
    signal grp_read_color_fu_271_ap_idle : STD_LOGIC;
    signal grp_read_color_fu_271_ap_ready : STD_LOGIC;
    signal grp_read_color_fu_271_m_axi_a_AWVALID : STD_LOGIC;
    signal grp_read_color_fu_271_m_axi_a_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_read_color_fu_271_m_axi_a_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read_color_fu_271_m_axi_a_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_read_color_fu_271_m_axi_a_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_read_color_fu_271_m_axi_a_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_read_color_fu_271_m_axi_a_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_read_color_fu_271_m_axi_a_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_color_fu_271_m_axi_a_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_read_color_fu_271_m_axi_a_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_color_fu_271_m_axi_a_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_color_fu_271_m_axi_a_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read_color_fu_271_m_axi_a_WVALID : STD_LOGIC;
    signal grp_read_color_fu_271_m_axi_a_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_color_fu_271_m_axi_a_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_read_color_fu_271_m_axi_a_WLAST : STD_LOGIC;
    signal grp_read_color_fu_271_m_axi_a_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read_color_fu_271_m_axi_a_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read_color_fu_271_m_axi_a_ARVALID : STD_LOGIC;
    signal grp_read_color_fu_271_m_axi_a_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_read_color_fu_271_m_axi_a_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read_color_fu_271_m_axi_a_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_read_color_fu_271_m_axi_a_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_read_color_fu_271_m_axi_a_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_read_color_fu_271_m_axi_a_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_read_color_fu_271_m_axi_a_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_color_fu_271_m_axi_a_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_read_color_fu_271_m_axi_a_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_color_fu_271_m_axi_a_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_color_fu_271_m_axi_a_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read_color_fu_271_m_axi_a_RREADY : STD_LOGIC;
    signal grp_read_color_fu_271_m_axi_a_BREADY : STD_LOGIC;
    signal grp_read_color_fu_271_A_buffer_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_read_color_fu_271_A_buffer_0_ce0 : STD_LOGIC;
    signal grp_read_color_fu_271_A_buffer_0_we0 : STD_LOGIC;
    signal grp_read_color_fu_271_A_buffer_0_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_color_fu_271_A_buffer_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_read_color_fu_271_A_buffer_1_ce0 : STD_LOGIC;
    signal grp_read_color_fu_271_A_buffer_1_we0 : STD_LOGIC;
    signal grp_read_color_fu_271_A_buffer_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_color_fu_271_A_buffer_2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_read_color_fu_271_A_buffer_2_ce0 : STD_LOGIC;
    signal grp_read_color_fu_271_A_buffer_2_we0 : STD_LOGIC;
    signal grp_read_color_fu_271_A_buffer_2_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_color_fu_271_A_buffer_3_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_read_color_fu_271_A_buffer_3_ce0 : STD_LOGIC;
    signal grp_read_color_fu_271_A_buffer_3_we0 : STD_LOGIC;
    signal grp_read_color_fu_271_A_buffer_3_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_color_fu_271_A_buffer_4_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_read_color_fu_271_A_buffer_4_ce0 : STD_LOGIC;
    signal grp_read_color_fu_271_A_buffer_4_we0 : STD_LOGIC;
    signal grp_read_color_fu_271_A_buffer_4_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_color_fu_271_A_buffer_5_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_read_color_fu_271_A_buffer_5_ce0 : STD_LOGIC;
    signal grp_read_color_fu_271_A_buffer_5_we0 : STD_LOGIC;
    signal grp_read_color_fu_271_A_buffer_5_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_color_fu_271_A_buffer_6_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_read_color_fu_271_A_buffer_6_ce0 : STD_LOGIC;
    signal grp_read_color_fu_271_A_buffer_6_we0 : STD_LOGIC;
    signal grp_read_color_fu_271_A_buffer_6_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_color_fu_271_A_buffer_7_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_read_color_fu_271_A_buffer_7_ce0 : STD_LOGIC;
    signal grp_read_color_fu_271_A_buffer_7_we0 : STD_LOGIC;
    signal grp_read_color_fu_271_A_buffer_7_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_IR_fu_294_ap_start : STD_LOGIC;
    signal grp_read_IR_fu_294_ap_done : STD_LOGIC;
    signal grp_read_IR_fu_294_ap_idle : STD_LOGIC;
    signal grp_read_IR_fu_294_ap_ready : STD_LOGIC;
    signal grp_read_IR_fu_294_m_axi_b_AWVALID : STD_LOGIC;
    signal grp_read_IR_fu_294_m_axi_b_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_read_IR_fu_294_m_axi_b_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read_IR_fu_294_m_axi_b_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_read_IR_fu_294_m_axi_b_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_read_IR_fu_294_m_axi_b_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_read_IR_fu_294_m_axi_b_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_read_IR_fu_294_m_axi_b_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_IR_fu_294_m_axi_b_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_read_IR_fu_294_m_axi_b_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_IR_fu_294_m_axi_b_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_IR_fu_294_m_axi_b_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read_IR_fu_294_m_axi_b_WVALID : STD_LOGIC;
    signal grp_read_IR_fu_294_m_axi_b_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_IR_fu_294_m_axi_b_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_read_IR_fu_294_m_axi_b_WLAST : STD_LOGIC;
    signal grp_read_IR_fu_294_m_axi_b_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read_IR_fu_294_m_axi_b_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read_IR_fu_294_m_axi_b_ARVALID : STD_LOGIC;
    signal grp_read_IR_fu_294_m_axi_b_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_read_IR_fu_294_m_axi_b_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read_IR_fu_294_m_axi_b_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_read_IR_fu_294_m_axi_b_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_read_IR_fu_294_m_axi_b_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_read_IR_fu_294_m_axi_b_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_read_IR_fu_294_m_axi_b_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_IR_fu_294_m_axi_b_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_read_IR_fu_294_m_axi_b_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_IR_fu_294_m_axi_b_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_IR_fu_294_m_axi_b_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read_IR_fu_294_m_axi_b_RREADY : STD_LOGIC;
    signal grp_read_IR_fu_294_m_axi_b_BREADY : STD_LOGIC;
    signal grp_read_IR_fu_294_B_buffer_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_read_IR_fu_294_B_buffer_0_ce0 : STD_LOGIC;
    signal grp_read_IR_fu_294_B_buffer_0_we0 : STD_LOGIC;
    signal grp_read_IR_fu_294_B_buffer_0_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_IR_fu_294_B_buffer_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_read_IR_fu_294_B_buffer_1_ce0 : STD_LOGIC;
    signal grp_read_IR_fu_294_B_buffer_1_we0 : STD_LOGIC;
    signal grp_read_IR_fu_294_B_buffer_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_IR_fu_294_B_buffer_2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_read_IR_fu_294_B_buffer_2_ce0 : STD_LOGIC;
    signal grp_read_IR_fu_294_B_buffer_2_we0 : STD_LOGIC;
    signal grp_read_IR_fu_294_B_buffer_2_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_IR_fu_294_B_buffer_3_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_read_IR_fu_294_B_buffer_3_ce0 : STD_LOGIC;
    signal grp_read_IR_fu_294_B_buffer_3_we0 : STD_LOGIC;
    signal grp_read_IR_fu_294_B_buffer_3_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_IR_fu_294_B_buffer_4_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_read_IR_fu_294_B_buffer_4_ce0 : STD_LOGIC;
    signal grp_read_IR_fu_294_B_buffer_4_we0 : STD_LOGIC;
    signal grp_read_IR_fu_294_B_buffer_4_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_IR_fu_294_B_buffer_5_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_read_IR_fu_294_B_buffer_5_ce0 : STD_LOGIC;
    signal grp_read_IR_fu_294_B_buffer_5_we0 : STD_LOGIC;
    signal grp_read_IR_fu_294_B_buffer_5_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_IR_fu_294_B_buffer_6_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_read_IR_fu_294_B_buffer_6_ce0 : STD_LOGIC;
    signal grp_read_IR_fu_294_B_buffer_6_we0 : STD_LOGIC;
    signal grp_read_IR_fu_294_B_buffer_6_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_IR_fu_294_B_buffer_7_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_read_IR_fu_294_B_buffer_7_ce0 : STD_LOGIC;
    signal grp_read_IR_fu_294_B_buffer_7_we0 : STD_LOGIC;
    signal grp_read_IR_fu_294_B_buffer_7_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_IDWT_fu_192_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_DWT_color_fu_204_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_DWT_IR_fu_216_ap_start_reg : STD_LOGIC := '0';
    signal grp_Filter_fu_228_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_write_image_fu_256_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_read_color_fu_271_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_read_IR_fu_294_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_block_state4_on_subcall_done : BOOLEAN;

    component IDWT IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        C_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        C_0_ce0 : OUT STD_LOGIC;
        C_0_we0 : OUT STD_LOGIC;
        C_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        C_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        C_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        C_1_ce0 : OUT STD_LOGIC;
        C_1_we0 : OUT STD_LOGIC;
        C_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        C_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        C_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        C_2_ce0 : OUT STD_LOGIC;
        C_2_we0 : OUT STD_LOGIC;
        C_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        C_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        C_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        C_3_ce0 : OUT STD_LOGIC;
        C_3_we0 : OUT STD_LOGIC;
        C_3_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        C_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        C_4_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        C_4_ce0 : OUT STD_LOGIC;
        C_4_we0 : OUT STD_LOGIC;
        C_4_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        C_4_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        C_5_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        C_5_ce0 : OUT STD_LOGIC;
        C_5_we0 : OUT STD_LOGIC;
        C_5_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        C_5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        C_6_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        C_6_ce0 : OUT STD_LOGIC;
        C_6_we0 : OUT STD_LOGIC;
        C_6_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        C_6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        C_7_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        C_7_ce0 : OUT STD_LOGIC;
        C_7_we0 : OUT STD_LOGIC;
        C_7_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        C_7_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component DWT_color IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        A_0_ce0 : OUT STD_LOGIC;
        A_0_we0 : OUT STD_LOGIC;
        A_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        A_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        A_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        A_1_ce0 : OUT STD_LOGIC;
        A_1_we0 : OUT STD_LOGIC;
        A_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        A_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        A_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        A_2_ce0 : OUT STD_LOGIC;
        A_2_we0 : OUT STD_LOGIC;
        A_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        A_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        A_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        A_3_ce0 : OUT STD_LOGIC;
        A_3_we0 : OUT STD_LOGIC;
        A_3_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        A_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        A_4_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        A_4_ce0 : OUT STD_LOGIC;
        A_4_we0 : OUT STD_LOGIC;
        A_4_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        A_4_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        A_5_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        A_5_ce0 : OUT STD_LOGIC;
        A_5_we0 : OUT STD_LOGIC;
        A_5_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        A_5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        A_6_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        A_6_ce0 : OUT STD_LOGIC;
        A_6_we0 : OUT STD_LOGIC;
        A_6_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        A_6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        A_7_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        A_7_ce0 : OUT STD_LOGIC;
        A_7_we0 : OUT STD_LOGIC;
        A_7_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        A_7_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component DWT_IR IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        B_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_0_ce0 : OUT STD_LOGIC;
        B_0_we0 : OUT STD_LOGIC;
        B_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        B_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        B_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_1_ce0 : OUT STD_LOGIC;
        B_1_we0 : OUT STD_LOGIC;
        B_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        B_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        B_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_2_ce0 : OUT STD_LOGIC;
        B_2_we0 : OUT STD_LOGIC;
        B_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        B_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        B_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_3_ce0 : OUT STD_LOGIC;
        B_3_we0 : OUT STD_LOGIC;
        B_3_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        B_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        B_4_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_4_ce0 : OUT STD_LOGIC;
        B_4_we0 : OUT STD_LOGIC;
        B_4_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        B_4_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        B_5_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_5_ce0 : OUT STD_LOGIC;
        B_5_we0 : OUT STD_LOGIC;
        B_5_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        B_5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        B_6_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_6_ce0 : OUT STD_LOGIC;
        B_6_we0 : OUT STD_LOGIC;
        B_6_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        B_6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        B_7_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_7_ce0 : OUT STD_LOGIC;
        B_7_we0 : OUT STD_LOGIC;
        B_7_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        B_7_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Filter IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        A_0_ce0 : OUT STD_LOGIC;
        A_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        A_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        A_1_ce0 : OUT STD_LOGIC;
        A_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        A_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        A_2_ce0 : OUT STD_LOGIC;
        A_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        A_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        A_3_ce0 : OUT STD_LOGIC;
        A_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        A_4_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        A_4_ce0 : OUT STD_LOGIC;
        A_4_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        A_5_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        A_5_ce0 : OUT STD_LOGIC;
        A_5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        A_6_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        A_6_ce0 : OUT STD_LOGIC;
        A_6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        A_7_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        A_7_ce0 : OUT STD_LOGIC;
        A_7_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        B_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_0_ce0 : OUT STD_LOGIC;
        B_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        B_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_1_ce0 : OUT STD_LOGIC;
        B_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        B_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_2_ce0 : OUT STD_LOGIC;
        B_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        B_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_3_ce0 : OUT STD_LOGIC;
        B_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        B_4_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_4_ce0 : OUT STD_LOGIC;
        B_4_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        B_5_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_5_ce0 : OUT STD_LOGIC;
        B_5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        B_6_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_6_ce0 : OUT STD_LOGIC;
        B_6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        B_7_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_7_ce0 : OUT STD_LOGIC;
        B_7_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        C_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        C_0_ce0 : OUT STD_LOGIC;
        C_0_we0 : OUT STD_LOGIC;
        C_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        C_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        C_1_ce0 : OUT STD_LOGIC;
        C_1_we0 : OUT STD_LOGIC;
        C_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        C_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        C_2_ce0 : OUT STD_LOGIC;
        C_2_we0 : OUT STD_LOGIC;
        C_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        C_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        C_3_ce0 : OUT STD_LOGIC;
        C_3_we0 : OUT STD_LOGIC;
        C_3_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        C_4_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        C_4_ce0 : OUT STD_LOGIC;
        C_4_we0 : OUT STD_LOGIC;
        C_4_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        C_5_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        C_5_ce0 : OUT STD_LOGIC;
        C_5_we0 : OUT STD_LOGIC;
        C_5_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        C_6_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        C_6_ce0 : OUT STD_LOGIC;
        C_6_we0 : OUT STD_LOGIC;
        C_6_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        C_7_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        C_7_ce0 : OUT STD_LOGIC;
        C_7_we0 : OUT STD_LOGIC;
        C_7_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component write_image IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        C_buffer_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        C_buffer_0_ce0 : OUT STD_LOGIC;
        C_buffer_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        C_buffer_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        C_buffer_1_ce0 : OUT STD_LOGIC;
        C_buffer_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        C_buffer_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        C_buffer_2_ce0 : OUT STD_LOGIC;
        C_buffer_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        C_buffer_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        C_buffer_3_ce0 : OUT STD_LOGIC;
        C_buffer_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        C_buffer_4_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        C_buffer_4_ce0 : OUT STD_LOGIC;
        C_buffer_4_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        C_buffer_5_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        C_buffer_5_ce0 : OUT STD_LOGIC;
        C_buffer_5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        C_buffer_6_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        C_buffer_6_ce0 : OUT STD_LOGIC;
        C_buffer_6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        C_buffer_7_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        C_buffer_7_ce0 : OUT STD_LOGIC;
        C_buffer_7_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_c_AWVALID : OUT STD_LOGIC;
        m_axi_c_AWREADY : IN STD_LOGIC;
        m_axi_c_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_c_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_c_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_c_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_c_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_c_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_c_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_c_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_c_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_c_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_c_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_c_WVALID : OUT STD_LOGIC;
        m_axi_c_WREADY : IN STD_LOGIC;
        m_axi_c_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_c_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_c_WLAST : OUT STD_LOGIC;
        m_axi_c_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_c_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_c_ARVALID : OUT STD_LOGIC;
        m_axi_c_ARREADY : IN STD_LOGIC;
        m_axi_c_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_c_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_c_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_c_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_c_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_c_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_c_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_c_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_c_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_c_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_c_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_c_RVALID : IN STD_LOGIC;
        m_axi_c_RREADY : OUT STD_LOGIC;
        m_axi_c_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_c_RLAST : IN STD_LOGIC;
        m_axi_c_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_c_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_c_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_c_BVALID : IN STD_LOGIC;
        m_axi_c_BREADY : OUT STD_LOGIC;
        m_axi_c_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_c_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_c_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        c_offset : IN STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component read_color IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_a_AWVALID : OUT STD_LOGIC;
        m_axi_a_AWREADY : IN STD_LOGIC;
        m_axi_a_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_a_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_a_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_a_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_a_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_a_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_a_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_a_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_a_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_a_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_a_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_a_WVALID : OUT STD_LOGIC;
        m_axi_a_WREADY : IN STD_LOGIC;
        m_axi_a_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_a_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_a_WLAST : OUT STD_LOGIC;
        m_axi_a_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_a_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_a_ARVALID : OUT STD_LOGIC;
        m_axi_a_ARREADY : IN STD_LOGIC;
        m_axi_a_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_a_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_a_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_a_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_a_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_a_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_a_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_a_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_a_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_a_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_a_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_a_RVALID : IN STD_LOGIC;
        m_axi_a_RREADY : OUT STD_LOGIC;
        m_axi_a_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_a_RLAST : IN STD_LOGIC;
        m_axi_a_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_a_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_a_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_a_BVALID : IN STD_LOGIC;
        m_axi_a_BREADY : OUT STD_LOGIC;
        m_axi_a_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_a_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_a_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        a_offset : IN STD_LOGIC_VECTOR (30 downto 0);
        A_buffer_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        A_buffer_0_ce0 : OUT STD_LOGIC;
        A_buffer_0_we0 : OUT STD_LOGIC;
        A_buffer_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        A_buffer_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        A_buffer_1_ce0 : OUT STD_LOGIC;
        A_buffer_1_we0 : OUT STD_LOGIC;
        A_buffer_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        A_buffer_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        A_buffer_2_ce0 : OUT STD_LOGIC;
        A_buffer_2_we0 : OUT STD_LOGIC;
        A_buffer_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        A_buffer_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        A_buffer_3_ce0 : OUT STD_LOGIC;
        A_buffer_3_we0 : OUT STD_LOGIC;
        A_buffer_3_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        A_buffer_4_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        A_buffer_4_ce0 : OUT STD_LOGIC;
        A_buffer_4_we0 : OUT STD_LOGIC;
        A_buffer_4_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        A_buffer_5_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        A_buffer_5_ce0 : OUT STD_LOGIC;
        A_buffer_5_we0 : OUT STD_LOGIC;
        A_buffer_5_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        A_buffer_6_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        A_buffer_6_ce0 : OUT STD_LOGIC;
        A_buffer_6_we0 : OUT STD_LOGIC;
        A_buffer_6_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        A_buffer_7_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        A_buffer_7_ce0 : OUT STD_LOGIC;
        A_buffer_7_we0 : OUT STD_LOGIC;
        A_buffer_7_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component read_IR IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_b_AWVALID : OUT STD_LOGIC;
        m_axi_b_AWREADY : IN STD_LOGIC;
        m_axi_b_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_b_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_b_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_b_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_b_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_b_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_b_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_b_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_b_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_b_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b_WVALID : OUT STD_LOGIC;
        m_axi_b_WREADY : IN STD_LOGIC;
        m_axi_b_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_b_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_b_WLAST : OUT STD_LOGIC;
        m_axi_b_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b_ARVALID : OUT STD_LOGIC;
        m_axi_b_ARREADY : IN STD_LOGIC;
        m_axi_b_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_b_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_b_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_b_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_b_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_b_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_b_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_b_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_b_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_b_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b_RVALID : IN STD_LOGIC;
        m_axi_b_RREADY : OUT STD_LOGIC;
        m_axi_b_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_b_RLAST : IN STD_LOGIC;
        m_axi_b_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_b_BVALID : IN STD_LOGIC;
        m_axi_b_BREADY : OUT STD_LOGIC;
        m_axi_b_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_b_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        b_offset : IN STD_LOGIC_VECTOR (30 downto 0);
        B_buffer_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_buffer_0_ce0 : OUT STD_LOGIC;
        B_buffer_0_we0 : OUT STD_LOGIC;
        B_buffer_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        B_buffer_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_buffer_1_ce0 : OUT STD_LOGIC;
        B_buffer_1_we0 : OUT STD_LOGIC;
        B_buffer_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        B_buffer_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_buffer_2_ce0 : OUT STD_LOGIC;
        B_buffer_2_we0 : OUT STD_LOGIC;
        B_buffer_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        B_buffer_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_buffer_3_ce0 : OUT STD_LOGIC;
        B_buffer_3_we0 : OUT STD_LOGIC;
        B_buffer_3_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        B_buffer_4_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_buffer_4_ce0 : OUT STD_LOGIC;
        B_buffer_4_we0 : OUT STD_LOGIC;
        B_buffer_4_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        B_buffer_5_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_buffer_5_ce0 : OUT STD_LOGIC;
        B_buffer_5_we0 : OUT STD_LOGIC;
        B_buffer_5_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        B_buffer_6_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_buffer_6_ce0 : OUT STD_LOGIC;
        B_buffer_6_we0 : OUT STD_LOGIC;
        B_buffer_6_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        B_buffer_7_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_buffer_7_ce0 : OUT STD_LOGIC;
        B_buffer_7_we0 : OUT STD_LOGIC;
        B_buffer_7_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component DWT_Accel_A_buffelbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component DWT_Accel_CTL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        a : OUT STD_LOGIC_VECTOR (31 downto 0);
        b : OUT STD_LOGIC_VECTOR (31 downto 0);
        c : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DWT_Accel_DATA_A_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component DWT_Accel_DATA_B_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component DWT_Accel_DATA_C_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    DWT_Accel_CTL_s_axi_U : component DWT_Accel_CTL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTL_AWVALID,
        AWREADY => s_axi_CTL_AWREADY,
        AWADDR => s_axi_CTL_AWADDR,
        WVALID => s_axi_CTL_WVALID,
        WREADY => s_axi_CTL_WREADY,
        WDATA => s_axi_CTL_WDATA,
        WSTRB => s_axi_CTL_WSTRB,
        ARVALID => s_axi_CTL_ARVALID,
        ARREADY => s_axi_CTL_ARREADY,
        ARADDR => s_axi_CTL_ARADDR,
        RVALID => s_axi_CTL_RVALID,
        RREADY => s_axi_CTL_RREADY,
        RDATA => s_axi_CTL_RDATA,
        RRESP => s_axi_CTL_RRESP,
        BVALID => s_axi_CTL_BVALID,
        BREADY => s_axi_CTL_BREADY,
        BRESP => s_axi_CTL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        a => a,
        b => b,
        c => c);

    DWT_Accel_DATA_A_m_axi_U : component DWT_Accel_DATA_A_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_A_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_A_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_A_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_A_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_A_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_A_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_A_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_A_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_A_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_A_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_A_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_A_AWVALID,
        AWREADY => m_axi_DATA_A_AWREADY,
        AWADDR => m_axi_DATA_A_AWADDR,
        AWID => m_axi_DATA_A_AWID,
        AWLEN => m_axi_DATA_A_AWLEN,
        AWSIZE => m_axi_DATA_A_AWSIZE,
        AWBURST => m_axi_DATA_A_AWBURST,
        AWLOCK => m_axi_DATA_A_AWLOCK,
        AWCACHE => m_axi_DATA_A_AWCACHE,
        AWPROT => m_axi_DATA_A_AWPROT,
        AWQOS => m_axi_DATA_A_AWQOS,
        AWREGION => m_axi_DATA_A_AWREGION,
        AWUSER => m_axi_DATA_A_AWUSER,
        WVALID => m_axi_DATA_A_WVALID,
        WREADY => m_axi_DATA_A_WREADY,
        WDATA => m_axi_DATA_A_WDATA,
        WSTRB => m_axi_DATA_A_WSTRB,
        WLAST => m_axi_DATA_A_WLAST,
        WID => m_axi_DATA_A_WID,
        WUSER => m_axi_DATA_A_WUSER,
        ARVALID => m_axi_DATA_A_ARVALID,
        ARREADY => m_axi_DATA_A_ARREADY,
        ARADDR => m_axi_DATA_A_ARADDR,
        ARID => m_axi_DATA_A_ARID,
        ARLEN => m_axi_DATA_A_ARLEN,
        ARSIZE => m_axi_DATA_A_ARSIZE,
        ARBURST => m_axi_DATA_A_ARBURST,
        ARLOCK => m_axi_DATA_A_ARLOCK,
        ARCACHE => m_axi_DATA_A_ARCACHE,
        ARPROT => m_axi_DATA_A_ARPROT,
        ARQOS => m_axi_DATA_A_ARQOS,
        ARREGION => m_axi_DATA_A_ARREGION,
        ARUSER => m_axi_DATA_A_ARUSER,
        RVALID => m_axi_DATA_A_RVALID,
        RREADY => m_axi_DATA_A_RREADY,
        RDATA => m_axi_DATA_A_RDATA,
        RLAST => m_axi_DATA_A_RLAST,
        RID => m_axi_DATA_A_RID,
        RUSER => m_axi_DATA_A_RUSER,
        RRESP => m_axi_DATA_A_RRESP,
        BVALID => m_axi_DATA_A_BVALID,
        BREADY => m_axi_DATA_A_BREADY,
        BRESP => m_axi_DATA_A_BRESP,
        BID => m_axi_DATA_A_BID,
        BUSER => m_axi_DATA_A_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => DATA_A_ARVALID,
        I_ARREADY => DATA_A_ARREADY,
        I_ARADDR => grp_read_color_fu_271_m_axi_a_ARADDR,
        I_ARID => grp_read_color_fu_271_m_axi_a_ARID,
        I_ARLEN => grp_read_color_fu_271_m_axi_a_ARLEN,
        I_ARSIZE => grp_read_color_fu_271_m_axi_a_ARSIZE,
        I_ARLOCK => grp_read_color_fu_271_m_axi_a_ARLOCK,
        I_ARCACHE => grp_read_color_fu_271_m_axi_a_ARCACHE,
        I_ARQOS => grp_read_color_fu_271_m_axi_a_ARQOS,
        I_ARPROT => grp_read_color_fu_271_m_axi_a_ARPROT,
        I_ARUSER => grp_read_color_fu_271_m_axi_a_ARUSER,
        I_ARBURST => grp_read_color_fu_271_m_axi_a_ARBURST,
        I_ARREGION => grp_read_color_fu_271_m_axi_a_ARREGION,
        I_RVALID => DATA_A_RVALID,
        I_RREADY => DATA_A_RREADY,
        I_RDATA => DATA_A_RDATA,
        I_RID => DATA_A_RID,
        I_RUSER => DATA_A_RUSER,
        I_RRESP => DATA_A_RRESP,
        I_RLAST => DATA_A_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => DATA_A_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => DATA_A_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => DATA_A_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => DATA_A_BRESP,
        I_BID => DATA_A_BID,
        I_BUSER => DATA_A_BUSER);

    DWT_Accel_DATA_B_m_axi_U : component DWT_Accel_DATA_B_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_B_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_B_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_B_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_B_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_B_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_B_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_B_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_B_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_B_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_B_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_B_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_B_AWVALID,
        AWREADY => m_axi_DATA_B_AWREADY,
        AWADDR => m_axi_DATA_B_AWADDR,
        AWID => m_axi_DATA_B_AWID,
        AWLEN => m_axi_DATA_B_AWLEN,
        AWSIZE => m_axi_DATA_B_AWSIZE,
        AWBURST => m_axi_DATA_B_AWBURST,
        AWLOCK => m_axi_DATA_B_AWLOCK,
        AWCACHE => m_axi_DATA_B_AWCACHE,
        AWPROT => m_axi_DATA_B_AWPROT,
        AWQOS => m_axi_DATA_B_AWQOS,
        AWREGION => m_axi_DATA_B_AWREGION,
        AWUSER => m_axi_DATA_B_AWUSER,
        WVALID => m_axi_DATA_B_WVALID,
        WREADY => m_axi_DATA_B_WREADY,
        WDATA => m_axi_DATA_B_WDATA,
        WSTRB => m_axi_DATA_B_WSTRB,
        WLAST => m_axi_DATA_B_WLAST,
        WID => m_axi_DATA_B_WID,
        WUSER => m_axi_DATA_B_WUSER,
        ARVALID => m_axi_DATA_B_ARVALID,
        ARREADY => m_axi_DATA_B_ARREADY,
        ARADDR => m_axi_DATA_B_ARADDR,
        ARID => m_axi_DATA_B_ARID,
        ARLEN => m_axi_DATA_B_ARLEN,
        ARSIZE => m_axi_DATA_B_ARSIZE,
        ARBURST => m_axi_DATA_B_ARBURST,
        ARLOCK => m_axi_DATA_B_ARLOCK,
        ARCACHE => m_axi_DATA_B_ARCACHE,
        ARPROT => m_axi_DATA_B_ARPROT,
        ARQOS => m_axi_DATA_B_ARQOS,
        ARREGION => m_axi_DATA_B_ARREGION,
        ARUSER => m_axi_DATA_B_ARUSER,
        RVALID => m_axi_DATA_B_RVALID,
        RREADY => m_axi_DATA_B_RREADY,
        RDATA => m_axi_DATA_B_RDATA,
        RLAST => m_axi_DATA_B_RLAST,
        RID => m_axi_DATA_B_RID,
        RUSER => m_axi_DATA_B_RUSER,
        RRESP => m_axi_DATA_B_RRESP,
        BVALID => m_axi_DATA_B_BVALID,
        BREADY => m_axi_DATA_B_BREADY,
        BRESP => m_axi_DATA_B_BRESP,
        BID => m_axi_DATA_B_BID,
        BUSER => m_axi_DATA_B_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => DATA_B_ARVALID,
        I_ARREADY => DATA_B_ARREADY,
        I_ARADDR => grp_read_IR_fu_294_m_axi_b_ARADDR,
        I_ARID => grp_read_IR_fu_294_m_axi_b_ARID,
        I_ARLEN => grp_read_IR_fu_294_m_axi_b_ARLEN,
        I_ARSIZE => grp_read_IR_fu_294_m_axi_b_ARSIZE,
        I_ARLOCK => grp_read_IR_fu_294_m_axi_b_ARLOCK,
        I_ARCACHE => grp_read_IR_fu_294_m_axi_b_ARCACHE,
        I_ARQOS => grp_read_IR_fu_294_m_axi_b_ARQOS,
        I_ARPROT => grp_read_IR_fu_294_m_axi_b_ARPROT,
        I_ARUSER => grp_read_IR_fu_294_m_axi_b_ARUSER,
        I_ARBURST => grp_read_IR_fu_294_m_axi_b_ARBURST,
        I_ARREGION => grp_read_IR_fu_294_m_axi_b_ARREGION,
        I_RVALID => DATA_B_RVALID,
        I_RREADY => DATA_B_RREADY,
        I_RDATA => DATA_B_RDATA,
        I_RID => DATA_B_RID,
        I_RUSER => DATA_B_RUSER,
        I_RRESP => DATA_B_RRESP,
        I_RLAST => DATA_B_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => DATA_B_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => DATA_B_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => DATA_B_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => DATA_B_BRESP,
        I_BID => DATA_B_BID,
        I_BUSER => DATA_B_BUSER);

    DWT_Accel_DATA_C_m_axi_U : component DWT_Accel_DATA_C_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_C_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_C_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_C_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_C_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_C_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_C_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_C_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_C_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_C_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_C_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_C_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_C_AWVALID,
        AWREADY => m_axi_DATA_C_AWREADY,
        AWADDR => m_axi_DATA_C_AWADDR,
        AWID => m_axi_DATA_C_AWID,
        AWLEN => m_axi_DATA_C_AWLEN,
        AWSIZE => m_axi_DATA_C_AWSIZE,
        AWBURST => m_axi_DATA_C_AWBURST,
        AWLOCK => m_axi_DATA_C_AWLOCK,
        AWCACHE => m_axi_DATA_C_AWCACHE,
        AWPROT => m_axi_DATA_C_AWPROT,
        AWQOS => m_axi_DATA_C_AWQOS,
        AWREGION => m_axi_DATA_C_AWREGION,
        AWUSER => m_axi_DATA_C_AWUSER,
        WVALID => m_axi_DATA_C_WVALID,
        WREADY => m_axi_DATA_C_WREADY,
        WDATA => m_axi_DATA_C_WDATA,
        WSTRB => m_axi_DATA_C_WSTRB,
        WLAST => m_axi_DATA_C_WLAST,
        WID => m_axi_DATA_C_WID,
        WUSER => m_axi_DATA_C_WUSER,
        ARVALID => m_axi_DATA_C_ARVALID,
        ARREADY => m_axi_DATA_C_ARREADY,
        ARADDR => m_axi_DATA_C_ARADDR,
        ARID => m_axi_DATA_C_ARID,
        ARLEN => m_axi_DATA_C_ARLEN,
        ARSIZE => m_axi_DATA_C_ARSIZE,
        ARBURST => m_axi_DATA_C_ARBURST,
        ARLOCK => m_axi_DATA_C_ARLOCK,
        ARCACHE => m_axi_DATA_C_ARCACHE,
        ARPROT => m_axi_DATA_C_ARPROT,
        ARQOS => m_axi_DATA_C_ARQOS,
        ARREGION => m_axi_DATA_C_ARREGION,
        ARUSER => m_axi_DATA_C_ARUSER,
        RVALID => m_axi_DATA_C_RVALID,
        RREADY => m_axi_DATA_C_RREADY,
        RDATA => m_axi_DATA_C_RDATA,
        RLAST => m_axi_DATA_C_RLAST,
        RID => m_axi_DATA_C_RID,
        RUSER => m_axi_DATA_C_RUSER,
        RRESP => m_axi_DATA_C_RRESP,
        BVALID => m_axi_DATA_C_BVALID,
        BREADY => m_axi_DATA_C_BREADY,
        BRESP => m_axi_DATA_C_BRESP,
        BID => m_axi_DATA_C_BID,
        BUSER => m_axi_DATA_C_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => DATA_C_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => DATA_C_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => DATA_C_RDATA,
        I_RID => DATA_C_RID,
        I_RUSER => DATA_C_RUSER,
        I_RRESP => DATA_C_RRESP,
        I_RLAST => DATA_C_RLAST,
        I_AWVALID => DATA_C_AWVALID,
        I_AWREADY => DATA_C_AWREADY,
        I_AWADDR => grp_write_image_fu_256_m_axi_c_AWADDR,
        I_AWID => grp_write_image_fu_256_m_axi_c_AWID,
        I_AWLEN => grp_write_image_fu_256_m_axi_c_AWLEN,
        I_AWSIZE => grp_write_image_fu_256_m_axi_c_AWSIZE,
        I_AWLOCK => grp_write_image_fu_256_m_axi_c_AWLOCK,
        I_AWCACHE => grp_write_image_fu_256_m_axi_c_AWCACHE,
        I_AWQOS => grp_write_image_fu_256_m_axi_c_AWQOS,
        I_AWPROT => grp_write_image_fu_256_m_axi_c_AWPROT,
        I_AWUSER => grp_write_image_fu_256_m_axi_c_AWUSER,
        I_AWBURST => grp_write_image_fu_256_m_axi_c_AWBURST,
        I_AWREGION => grp_write_image_fu_256_m_axi_c_AWREGION,
        I_WVALID => DATA_C_WVALID,
        I_WREADY => DATA_C_WREADY,
        I_WDATA => grp_write_image_fu_256_m_axi_c_WDATA,
        I_WID => grp_write_image_fu_256_m_axi_c_WID,
        I_WUSER => grp_write_image_fu_256_m_axi_c_WUSER,
        I_WLAST => grp_write_image_fu_256_m_axi_c_WLAST,
        I_WSTRB => grp_write_image_fu_256_m_axi_c_WSTRB,
        I_BVALID => DATA_C_BVALID,
        I_BREADY => DATA_C_BREADY,
        I_BRESP => DATA_C_BRESP,
        I_BID => DATA_C_BID,
        I_BUSER => DATA_C_BUSER);

    A_buffer_0_U : component DWT_Accel_A_buffelbW
    generic map (
        DataWidth => 16,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_buffer_0_address0,
        ce0 => A_buffer_0_ce0,
        we0 => A_buffer_0_we0,
        d0 => A_buffer_0_d0,
        q0 => A_buffer_0_q0);

    A_buffer_1_U : component DWT_Accel_A_buffelbW
    generic map (
        DataWidth => 16,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_buffer_1_address0,
        ce0 => A_buffer_1_ce0,
        we0 => A_buffer_1_we0,
        d0 => A_buffer_1_d0,
        q0 => A_buffer_1_q0);

    A_buffer_2_U : component DWT_Accel_A_buffelbW
    generic map (
        DataWidth => 16,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_buffer_2_address0,
        ce0 => A_buffer_2_ce0,
        we0 => A_buffer_2_we0,
        d0 => A_buffer_2_d0,
        q0 => A_buffer_2_q0);

    A_buffer_3_U : component DWT_Accel_A_buffelbW
    generic map (
        DataWidth => 16,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_buffer_3_address0,
        ce0 => A_buffer_3_ce0,
        we0 => A_buffer_3_we0,
        d0 => A_buffer_3_d0,
        q0 => A_buffer_3_q0);

    A_buffer_4_U : component DWT_Accel_A_buffelbW
    generic map (
        DataWidth => 16,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_buffer_4_address0,
        ce0 => A_buffer_4_ce0,
        we0 => A_buffer_4_we0,
        d0 => A_buffer_4_d0,
        q0 => A_buffer_4_q0);

    A_buffer_5_U : component DWT_Accel_A_buffelbW
    generic map (
        DataWidth => 16,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_buffer_5_address0,
        ce0 => A_buffer_5_ce0,
        we0 => A_buffer_5_we0,
        d0 => A_buffer_5_d0,
        q0 => A_buffer_5_q0);

    A_buffer_6_U : component DWT_Accel_A_buffelbW
    generic map (
        DataWidth => 16,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_buffer_6_address0,
        ce0 => A_buffer_6_ce0,
        we0 => A_buffer_6_we0,
        d0 => A_buffer_6_d0,
        q0 => A_buffer_6_q0);

    A_buffer_7_U : component DWT_Accel_A_buffelbW
    generic map (
        DataWidth => 16,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_buffer_7_address0,
        ce0 => A_buffer_7_ce0,
        we0 => A_buffer_7_we0,
        d0 => A_buffer_7_d0,
        q0 => A_buffer_7_q0);

    B_buffer_0_U : component DWT_Accel_A_buffelbW
    generic map (
        DataWidth => 16,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => B_buffer_0_address0,
        ce0 => B_buffer_0_ce0,
        we0 => B_buffer_0_we0,
        d0 => B_buffer_0_d0,
        q0 => B_buffer_0_q0);

    B_buffer_1_U : component DWT_Accel_A_buffelbW
    generic map (
        DataWidth => 16,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => B_buffer_1_address0,
        ce0 => B_buffer_1_ce0,
        we0 => B_buffer_1_we0,
        d0 => B_buffer_1_d0,
        q0 => B_buffer_1_q0);

    B_buffer_2_U : component DWT_Accel_A_buffelbW
    generic map (
        DataWidth => 16,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => B_buffer_2_address0,
        ce0 => B_buffer_2_ce0,
        we0 => B_buffer_2_we0,
        d0 => B_buffer_2_d0,
        q0 => B_buffer_2_q0);

    B_buffer_3_U : component DWT_Accel_A_buffelbW
    generic map (
        DataWidth => 16,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => B_buffer_3_address0,
        ce0 => B_buffer_3_ce0,
        we0 => B_buffer_3_we0,
        d0 => B_buffer_3_d0,
        q0 => B_buffer_3_q0);

    B_buffer_4_U : component DWT_Accel_A_buffelbW
    generic map (
        DataWidth => 16,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => B_buffer_4_address0,
        ce0 => B_buffer_4_ce0,
        we0 => B_buffer_4_we0,
        d0 => B_buffer_4_d0,
        q0 => B_buffer_4_q0);

    B_buffer_5_U : component DWT_Accel_A_buffelbW
    generic map (
        DataWidth => 16,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => B_buffer_5_address0,
        ce0 => B_buffer_5_ce0,
        we0 => B_buffer_5_we0,
        d0 => B_buffer_5_d0,
        q0 => B_buffer_5_q0);

    B_buffer_6_U : component DWT_Accel_A_buffelbW
    generic map (
        DataWidth => 16,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => B_buffer_6_address0,
        ce0 => B_buffer_6_ce0,
        we0 => B_buffer_6_we0,
        d0 => B_buffer_6_d0,
        q0 => B_buffer_6_q0);

    B_buffer_7_U : component DWT_Accel_A_buffelbW
    generic map (
        DataWidth => 16,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => B_buffer_7_address0,
        ce0 => B_buffer_7_ce0,
        we0 => B_buffer_7_we0,
        d0 => B_buffer_7_d0,
        q0 => B_buffer_7_q0);

    C_buffer_0_U : component DWT_Accel_A_buffelbW
    generic map (
        DataWidth => 16,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => C_buffer_0_address0,
        ce0 => C_buffer_0_ce0,
        we0 => C_buffer_0_we0,
        d0 => C_buffer_0_d0,
        q0 => C_buffer_0_q0);

    C_buffer_1_U : component DWT_Accel_A_buffelbW
    generic map (
        DataWidth => 16,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => C_buffer_1_address0,
        ce0 => C_buffer_1_ce0,
        we0 => C_buffer_1_we0,
        d0 => C_buffer_1_d0,
        q0 => C_buffer_1_q0);

    C_buffer_2_U : component DWT_Accel_A_buffelbW
    generic map (
        DataWidth => 16,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => C_buffer_2_address0,
        ce0 => C_buffer_2_ce0,
        we0 => C_buffer_2_we0,
        d0 => C_buffer_2_d0,
        q0 => C_buffer_2_q0);

    C_buffer_3_U : component DWT_Accel_A_buffelbW
    generic map (
        DataWidth => 16,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => C_buffer_3_address0,
        ce0 => C_buffer_3_ce0,
        we0 => C_buffer_3_we0,
        d0 => C_buffer_3_d0,
        q0 => C_buffer_3_q0);

    C_buffer_4_U : component DWT_Accel_A_buffelbW
    generic map (
        DataWidth => 16,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => C_buffer_4_address0,
        ce0 => C_buffer_4_ce0,
        we0 => C_buffer_4_we0,
        d0 => C_buffer_4_d0,
        q0 => C_buffer_4_q0);

    C_buffer_5_U : component DWT_Accel_A_buffelbW
    generic map (
        DataWidth => 16,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => C_buffer_5_address0,
        ce0 => C_buffer_5_ce0,
        we0 => C_buffer_5_we0,
        d0 => C_buffer_5_d0,
        q0 => C_buffer_5_q0);

    C_buffer_6_U : component DWT_Accel_A_buffelbW
    generic map (
        DataWidth => 16,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => C_buffer_6_address0,
        ce0 => C_buffer_6_ce0,
        we0 => C_buffer_6_we0,
        d0 => C_buffer_6_d0,
        q0 => C_buffer_6_q0);

    C_buffer_7_U : component DWT_Accel_A_buffelbW
    generic map (
        DataWidth => 16,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => C_buffer_7_address0,
        ce0 => C_buffer_7_ce0,
        we0 => C_buffer_7_we0,
        d0 => C_buffer_7_d0,
        q0 => C_buffer_7_q0);

    grp_IDWT_fu_192 : component IDWT
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_IDWT_fu_192_ap_start,
        ap_done => grp_IDWT_fu_192_ap_done,
        ap_idle => grp_IDWT_fu_192_ap_idle,
        ap_ready => grp_IDWT_fu_192_ap_ready,
        C_0_address0 => grp_IDWT_fu_192_C_0_address0,
        C_0_ce0 => grp_IDWT_fu_192_C_0_ce0,
        C_0_we0 => grp_IDWT_fu_192_C_0_we0,
        C_0_d0 => grp_IDWT_fu_192_C_0_d0,
        C_0_q0 => C_buffer_0_q0,
        C_1_address0 => grp_IDWT_fu_192_C_1_address0,
        C_1_ce0 => grp_IDWT_fu_192_C_1_ce0,
        C_1_we0 => grp_IDWT_fu_192_C_1_we0,
        C_1_d0 => grp_IDWT_fu_192_C_1_d0,
        C_1_q0 => C_buffer_1_q0,
        C_2_address0 => grp_IDWT_fu_192_C_2_address0,
        C_2_ce0 => grp_IDWT_fu_192_C_2_ce0,
        C_2_we0 => grp_IDWT_fu_192_C_2_we0,
        C_2_d0 => grp_IDWT_fu_192_C_2_d0,
        C_2_q0 => C_buffer_2_q0,
        C_3_address0 => grp_IDWT_fu_192_C_3_address0,
        C_3_ce0 => grp_IDWT_fu_192_C_3_ce0,
        C_3_we0 => grp_IDWT_fu_192_C_3_we0,
        C_3_d0 => grp_IDWT_fu_192_C_3_d0,
        C_3_q0 => C_buffer_3_q0,
        C_4_address0 => grp_IDWT_fu_192_C_4_address0,
        C_4_ce0 => grp_IDWT_fu_192_C_4_ce0,
        C_4_we0 => grp_IDWT_fu_192_C_4_we0,
        C_4_d0 => grp_IDWT_fu_192_C_4_d0,
        C_4_q0 => C_buffer_4_q0,
        C_5_address0 => grp_IDWT_fu_192_C_5_address0,
        C_5_ce0 => grp_IDWT_fu_192_C_5_ce0,
        C_5_we0 => grp_IDWT_fu_192_C_5_we0,
        C_5_d0 => grp_IDWT_fu_192_C_5_d0,
        C_5_q0 => C_buffer_5_q0,
        C_6_address0 => grp_IDWT_fu_192_C_6_address0,
        C_6_ce0 => grp_IDWT_fu_192_C_6_ce0,
        C_6_we0 => grp_IDWT_fu_192_C_6_we0,
        C_6_d0 => grp_IDWT_fu_192_C_6_d0,
        C_6_q0 => C_buffer_6_q0,
        C_7_address0 => grp_IDWT_fu_192_C_7_address0,
        C_7_ce0 => grp_IDWT_fu_192_C_7_ce0,
        C_7_we0 => grp_IDWT_fu_192_C_7_we0,
        C_7_d0 => grp_IDWT_fu_192_C_7_d0,
        C_7_q0 => C_buffer_7_q0);

    grp_DWT_color_fu_204 : component DWT_color
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_DWT_color_fu_204_ap_start,
        ap_done => grp_DWT_color_fu_204_ap_done,
        ap_idle => grp_DWT_color_fu_204_ap_idle,
        ap_ready => grp_DWT_color_fu_204_ap_ready,
        A_0_address0 => grp_DWT_color_fu_204_A_0_address0,
        A_0_ce0 => grp_DWT_color_fu_204_A_0_ce0,
        A_0_we0 => grp_DWT_color_fu_204_A_0_we0,
        A_0_d0 => grp_DWT_color_fu_204_A_0_d0,
        A_0_q0 => A_buffer_0_q0,
        A_1_address0 => grp_DWT_color_fu_204_A_1_address0,
        A_1_ce0 => grp_DWT_color_fu_204_A_1_ce0,
        A_1_we0 => grp_DWT_color_fu_204_A_1_we0,
        A_1_d0 => grp_DWT_color_fu_204_A_1_d0,
        A_1_q0 => A_buffer_1_q0,
        A_2_address0 => grp_DWT_color_fu_204_A_2_address0,
        A_2_ce0 => grp_DWT_color_fu_204_A_2_ce0,
        A_2_we0 => grp_DWT_color_fu_204_A_2_we0,
        A_2_d0 => grp_DWT_color_fu_204_A_2_d0,
        A_2_q0 => A_buffer_2_q0,
        A_3_address0 => grp_DWT_color_fu_204_A_3_address0,
        A_3_ce0 => grp_DWT_color_fu_204_A_3_ce0,
        A_3_we0 => grp_DWT_color_fu_204_A_3_we0,
        A_3_d0 => grp_DWT_color_fu_204_A_3_d0,
        A_3_q0 => A_buffer_3_q0,
        A_4_address0 => grp_DWT_color_fu_204_A_4_address0,
        A_4_ce0 => grp_DWT_color_fu_204_A_4_ce0,
        A_4_we0 => grp_DWT_color_fu_204_A_4_we0,
        A_4_d0 => grp_DWT_color_fu_204_A_4_d0,
        A_4_q0 => A_buffer_4_q0,
        A_5_address0 => grp_DWT_color_fu_204_A_5_address0,
        A_5_ce0 => grp_DWT_color_fu_204_A_5_ce0,
        A_5_we0 => grp_DWT_color_fu_204_A_5_we0,
        A_5_d0 => grp_DWT_color_fu_204_A_5_d0,
        A_5_q0 => A_buffer_5_q0,
        A_6_address0 => grp_DWT_color_fu_204_A_6_address0,
        A_6_ce0 => grp_DWT_color_fu_204_A_6_ce0,
        A_6_we0 => grp_DWT_color_fu_204_A_6_we0,
        A_6_d0 => grp_DWT_color_fu_204_A_6_d0,
        A_6_q0 => A_buffer_6_q0,
        A_7_address0 => grp_DWT_color_fu_204_A_7_address0,
        A_7_ce0 => grp_DWT_color_fu_204_A_7_ce0,
        A_7_we0 => grp_DWT_color_fu_204_A_7_we0,
        A_7_d0 => grp_DWT_color_fu_204_A_7_d0,
        A_7_q0 => A_buffer_7_q0);

    grp_DWT_IR_fu_216 : component DWT_IR
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_DWT_IR_fu_216_ap_start,
        ap_done => grp_DWT_IR_fu_216_ap_done,
        ap_idle => grp_DWT_IR_fu_216_ap_idle,
        ap_ready => grp_DWT_IR_fu_216_ap_ready,
        B_0_address0 => grp_DWT_IR_fu_216_B_0_address0,
        B_0_ce0 => grp_DWT_IR_fu_216_B_0_ce0,
        B_0_we0 => grp_DWT_IR_fu_216_B_0_we0,
        B_0_d0 => grp_DWT_IR_fu_216_B_0_d0,
        B_0_q0 => B_buffer_0_q0,
        B_1_address0 => grp_DWT_IR_fu_216_B_1_address0,
        B_1_ce0 => grp_DWT_IR_fu_216_B_1_ce0,
        B_1_we0 => grp_DWT_IR_fu_216_B_1_we0,
        B_1_d0 => grp_DWT_IR_fu_216_B_1_d0,
        B_1_q0 => B_buffer_1_q0,
        B_2_address0 => grp_DWT_IR_fu_216_B_2_address0,
        B_2_ce0 => grp_DWT_IR_fu_216_B_2_ce0,
        B_2_we0 => grp_DWT_IR_fu_216_B_2_we0,
        B_2_d0 => grp_DWT_IR_fu_216_B_2_d0,
        B_2_q0 => B_buffer_2_q0,
        B_3_address0 => grp_DWT_IR_fu_216_B_3_address0,
        B_3_ce0 => grp_DWT_IR_fu_216_B_3_ce0,
        B_3_we0 => grp_DWT_IR_fu_216_B_3_we0,
        B_3_d0 => grp_DWT_IR_fu_216_B_3_d0,
        B_3_q0 => B_buffer_3_q0,
        B_4_address0 => grp_DWT_IR_fu_216_B_4_address0,
        B_4_ce0 => grp_DWT_IR_fu_216_B_4_ce0,
        B_4_we0 => grp_DWT_IR_fu_216_B_4_we0,
        B_4_d0 => grp_DWT_IR_fu_216_B_4_d0,
        B_4_q0 => B_buffer_4_q0,
        B_5_address0 => grp_DWT_IR_fu_216_B_5_address0,
        B_5_ce0 => grp_DWT_IR_fu_216_B_5_ce0,
        B_5_we0 => grp_DWT_IR_fu_216_B_5_we0,
        B_5_d0 => grp_DWT_IR_fu_216_B_5_d0,
        B_5_q0 => B_buffer_5_q0,
        B_6_address0 => grp_DWT_IR_fu_216_B_6_address0,
        B_6_ce0 => grp_DWT_IR_fu_216_B_6_ce0,
        B_6_we0 => grp_DWT_IR_fu_216_B_6_we0,
        B_6_d0 => grp_DWT_IR_fu_216_B_6_d0,
        B_6_q0 => B_buffer_6_q0,
        B_7_address0 => grp_DWT_IR_fu_216_B_7_address0,
        B_7_ce0 => grp_DWT_IR_fu_216_B_7_ce0,
        B_7_we0 => grp_DWT_IR_fu_216_B_7_we0,
        B_7_d0 => grp_DWT_IR_fu_216_B_7_d0,
        B_7_q0 => B_buffer_7_q0);

    grp_Filter_fu_228 : component Filter
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_Filter_fu_228_ap_start,
        ap_done => grp_Filter_fu_228_ap_done,
        ap_idle => grp_Filter_fu_228_ap_idle,
        ap_ready => grp_Filter_fu_228_ap_ready,
        A_0_address0 => grp_Filter_fu_228_A_0_address0,
        A_0_ce0 => grp_Filter_fu_228_A_0_ce0,
        A_0_q0 => A_buffer_0_q0,
        A_1_address0 => grp_Filter_fu_228_A_1_address0,
        A_1_ce0 => grp_Filter_fu_228_A_1_ce0,
        A_1_q0 => A_buffer_1_q0,
        A_2_address0 => grp_Filter_fu_228_A_2_address0,
        A_2_ce0 => grp_Filter_fu_228_A_2_ce0,
        A_2_q0 => A_buffer_2_q0,
        A_3_address0 => grp_Filter_fu_228_A_3_address0,
        A_3_ce0 => grp_Filter_fu_228_A_3_ce0,
        A_3_q0 => A_buffer_3_q0,
        A_4_address0 => grp_Filter_fu_228_A_4_address0,
        A_4_ce0 => grp_Filter_fu_228_A_4_ce0,
        A_4_q0 => A_buffer_4_q0,
        A_5_address0 => grp_Filter_fu_228_A_5_address0,
        A_5_ce0 => grp_Filter_fu_228_A_5_ce0,
        A_5_q0 => A_buffer_5_q0,
        A_6_address0 => grp_Filter_fu_228_A_6_address0,
        A_6_ce0 => grp_Filter_fu_228_A_6_ce0,
        A_6_q0 => A_buffer_6_q0,
        A_7_address0 => grp_Filter_fu_228_A_7_address0,
        A_7_ce0 => grp_Filter_fu_228_A_7_ce0,
        A_7_q0 => A_buffer_7_q0,
        B_0_address0 => grp_Filter_fu_228_B_0_address0,
        B_0_ce0 => grp_Filter_fu_228_B_0_ce0,
        B_0_q0 => B_buffer_0_q0,
        B_1_address0 => grp_Filter_fu_228_B_1_address0,
        B_1_ce0 => grp_Filter_fu_228_B_1_ce0,
        B_1_q0 => B_buffer_1_q0,
        B_2_address0 => grp_Filter_fu_228_B_2_address0,
        B_2_ce0 => grp_Filter_fu_228_B_2_ce0,
        B_2_q0 => B_buffer_2_q0,
        B_3_address0 => grp_Filter_fu_228_B_3_address0,
        B_3_ce0 => grp_Filter_fu_228_B_3_ce0,
        B_3_q0 => B_buffer_3_q0,
        B_4_address0 => grp_Filter_fu_228_B_4_address0,
        B_4_ce0 => grp_Filter_fu_228_B_4_ce0,
        B_4_q0 => B_buffer_4_q0,
        B_5_address0 => grp_Filter_fu_228_B_5_address0,
        B_5_ce0 => grp_Filter_fu_228_B_5_ce0,
        B_5_q0 => B_buffer_5_q0,
        B_6_address0 => grp_Filter_fu_228_B_6_address0,
        B_6_ce0 => grp_Filter_fu_228_B_6_ce0,
        B_6_q0 => B_buffer_6_q0,
        B_7_address0 => grp_Filter_fu_228_B_7_address0,
        B_7_ce0 => grp_Filter_fu_228_B_7_ce0,
        B_7_q0 => B_buffer_7_q0,
        C_0_address0 => grp_Filter_fu_228_C_0_address0,
        C_0_ce0 => grp_Filter_fu_228_C_0_ce0,
        C_0_we0 => grp_Filter_fu_228_C_0_we0,
        C_0_d0 => grp_Filter_fu_228_C_0_d0,
        C_1_address0 => grp_Filter_fu_228_C_1_address0,
        C_1_ce0 => grp_Filter_fu_228_C_1_ce0,
        C_1_we0 => grp_Filter_fu_228_C_1_we0,
        C_1_d0 => grp_Filter_fu_228_C_1_d0,
        C_2_address0 => grp_Filter_fu_228_C_2_address0,
        C_2_ce0 => grp_Filter_fu_228_C_2_ce0,
        C_2_we0 => grp_Filter_fu_228_C_2_we0,
        C_2_d0 => grp_Filter_fu_228_C_2_d0,
        C_3_address0 => grp_Filter_fu_228_C_3_address0,
        C_3_ce0 => grp_Filter_fu_228_C_3_ce0,
        C_3_we0 => grp_Filter_fu_228_C_3_we0,
        C_3_d0 => grp_Filter_fu_228_C_3_d0,
        C_4_address0 => grp_Filter_fu_228_C_4_address0,
        C_4_ce0 => grp_Filter_fu_228_C_4_ce0,
        C_4_we0 => grp_Filter_fu_228_C_4_we0,
        C_4_d0 => grp_Filter_fu_228_C_4_d0,
        C_5_address0 => grp_Filter_fu_228_C_5_address0,
        C_5_ce0 => grp_Filter_fu_228_C_5_ce0,
        C_5_we0 => grp_Filter_fu_228_C_5_we0,
        C_5_d0 => grp_Filter_fu_228_C_5_d0,
        C_6_address0 => grp_Filter_fu_228_C_6_address0,
        C_6_ce0 => grp_Filter_fu_228_C_6_ce0,
        C_6_we0 => grp_Filter_fu_228_C_6_we0,
        C_6_d0 => grp_Filter_fu_228_C_6_d0,
        C_7_address0 => grp_Filter_fu_228_C_7_address0,
        C_7_ce0 => grp_Filter_fu_228_C_7_ce0,
        C_7_we0 => grp_Filter_fu_228_C_7_we0,
        C_7_d0 => grp_Filter_fu_228_C_7_d0);

    grp_write_image_fu_256 : component write_image
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_write_image_fu_256_ap_start,
        ap_done => grp_write_image_fu_256_ap_done,
        ap_idle => grp_write_image_fu_256_ap_idle,
        ap_ready => grp_write_image_fu_256_ap_ready,
        C_buffer_0_address0 => grp_write_image_fu_256_C_buffer_0_address0,
        C_buffer_0_ce0 => grp_write_image_fu_256_C_buffer_0_ce0,
        C_buffer_0_q0 => C_buffer_0_q0,
        C_buffer_1_address0 => grp_write_image_fu_256_C_buffer_1_address0,
        C_buffer_1_ce0 => grp_write_image_fu_256_C_buffer_1_ce0,
        C_buffer_1_q0 => C_buffer_1_q0,
        C_buffer_2_address0 => grp_write_image_fu_256_C_buffer_2_address0,
        C_buffer_2_ce0 => grp_write_image_fu_256_C_buffer_2_ce0,
        C_buffer_2_q0 => C_buffer_2_q0,
        C_buffer_3_address0 => grp_write_image_fu_256_C_buffer_3_address0,
        C_buffer_3_ce0 => grp_write_image_fu_256_C_buffer_3_ce0,
        C_buffer_3_q0 => C_buffer_3_q0,
        C_buffer_4_address0 => grp_write_image_fu_256_C_buffer_4_address0,
        C_buffer_4_ce0 => grp_write_image_fu_256_C_buffer_4_ce0,
        C_buffer_4_q0 => C_buffer_4_q0,
        C_buffer_5_address0 => grp_write_image_fu_256_C_buffer_5_address0,
        C_buffer_5_ce0 => grp_write_image_fu_256_C_buffer_5_ce0,
        C_buffer_5_q0 => C_buffer_5_q0,
        C_buffer_6_address0 => grp_write_image_fu_256_C_buffer_6_address0,
        C_buffer_6_ce0 => grp_write_image_fu_256_C_buffer_6_ce0,
        C_buffer_6_q0 => C_buffer_6_q0,
        C_buffer_7_address0 => grp_write_image_fu_256_C_buffer_7_address0,
        C_buffer_7_ce0 => grp_write_image_fu_256_C_buffer_7_ce0,
        C_buffer_7_q0 => C_buffer_7_q0,
        m_axi_c_AWVALID => grp_write_image_fu_256_m_axi_c_AWVALID,
        m_axi_c_AWREADY => DATA_C_AWREADY,
        m_axi_c_AWADDR => grp_write_image_fu_256_m_axi_c_AWADDR,
        m_axi_c_AWID => grp_write_image_fu_256_m_axi_c_AWID,
        m_axi_c_AWLEN => grp_write_image_fu_256_m_axi_c_AWLEN,
        m_axi_c_AWSIZE => grp_write_image_fu_256_m_axi_c_AWSIZE,
        m_axi_c_AWBURST => grp_write_image_fu_256_m_axi_c_AWBURST,
        m_axi_c_AWLOCK => grp_write_image_fu_256_m_axi_c_AWLOCK,
        m_axi_c_AWCACHE => grp_write_image_fu_256_m_axi_c_AWCACHE,
        m_axi_c_AWPROT => grp_write_image_fu_256_m_axi_c_AWPROT,
        m_axi_c_AWQOS => grp_write_image_fu_256_m_axi_c_AWQOS,
        m_axi_c_AWREGION => grp_write_image_fu_256_m_axi_c_AWREGION,
        m_axi_c_AWUSER => grp_write_image_fu_256_m_axi_c_AWUSER,
        m_axi_c_WVALID => grp_write_image_fu_256_m_axi_c_WVALID,
        m_axi_c_WREADY => DATA_C_WREADY,
        m_axi_c_WDATA => grp_write_image_fu_256_m_axi_c_WDATA,
        m_axi_c_WSTRB => grp_write_image_fu_256_m_axi_c_WSTRB,
        m_axi_c_WLAST => grp_write_image_fu_256_m_axi_c_WLAST,
        m_axi_c_WID => grp_write_image_fu_256_m_axi_c_WID,
        m_axi_c_WUSER => grp_write_image_fu_256_m_axi_c_WUSER,
        m_axi_c_ARVALID => grp_write_image_fu_256_m_axi_c_ARVALID,
        m_axi_c_ARREADY => ap_const_logic_0,
        m_axi_c_ARADDR => grp_write_image_fu_256_m_axi_c_ARADDR,
        m_axi_c_ARID => grp_write_image_fu_256_m_axi_c_ARID,
        m_axi_c_ARLEN => grp_write_image_fu_256_m_axi_c_ARLEN,
        m_axi_c_ARSIZE => grp_write_image_fu_256_m_axi_c_ARSIZE,
        m_axi_c_ARBURST => grp_write_image_fu_256_m_axi_c_ARBURST,
        m_axi_c_ARLOCK => grp_write_image_fu_256_m_axi_c_ARLOCK,
        m_axi_c_ARCACHE => grp_write_image_fu_256_m_axi_c_ARCACHE,
        m_axi_c_ARPROT => grp_write_image_fu_256_m_axi_c_ARPROT,
        m_axi_c_ARQOS => grp_write_image_fu_256_m_axi_c_ARQOS,
        m_axi_c_ARREGION => grp_write_image_fu_256_m_axi_c_ARREGION,
        m_axi_c_ARUSER => grp_write_image_fu_256_m_axi_c_ARUSER,
        m_axi_c_RVALID => ap_const_logic_0,
        m_axi_c_RREADY => grp_write_image_fu_256_m_axi_c_RREADY,
        m_axi_c_RDATA => ap_const_lv16_0,
        m_axi_c_RLAST => ap_const_logic_0,
        m_axi_c_RID => ap_const_lv1_0,
        m_axi_c_RUSER => ap_const_lv1_0,
        m_axi_c_RRESP => ap_const_lv2_0,
        m_axi_c_BVALID => DATA_C_BVALID,
        m_axi_c_BREADY => grp_write_image_fu_256_m_axi_c_BREADY,
        m_axi_c_BRESP => DATA_C_BRESP,
        m_axi_c_BID => DATA_C_BID,
        m_axi_c_BUSER => DATA_C_BUSER,
        c_offset => c5_reg_349);

    grp_read_color_fu_271 : component read_color
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_read_color_fu_271_ap_start,
        ap_done => grp_read_color_fu_271_ap_done,
        ap_idle => grp_read_color_fu_271_ap_idle,
        ap_ready => grp_read_color_fu_271_ap_ready,
        m_axi_a_AWVALID => grp_read_color_fu_271_m_axi_a_AWVALID,
        m_axi_a_AWREADY => ap_const_logic_0,
        m_axi_a_AWADDR => grp_read_color_fu_271_m_axi_a_AWADDR,
        m_axi_a_AWID => grp_read_color_fu_271_m_axi_a_AWID,
        m_axi_a_AWLEN => grp_read_color_fu_271_m_axi_a_AWLEN,
        m_axi_a_AWSIZE => grp_read_color_fu_271_m_axi_a_AWSIZE,
        m_axi_a_AWBURST => grp_read_color_fu_271_m_axi_a_AWBURST,
        m_axi_a_AWLOCK => grp_read_color_fu_271_m_axi_a_AWLOCK,
        m_axi_a_AWCACHE => grp_read_color_fu_271_m_axi_a_AWCACHE,
        m_axi_a_AWPROT => grp_read_color_fu_271_m_axi_a_AWPROT,
        m_axi_a_AWQOS => grp_read_color_fu_271_m_axi_a_AWQOS,
        m_axi_a_AWREGION => grp_read_color_fu_271_m_axi_a_AWREGION,
        m_axi_a_AWUSER => grp_read_color_fu_271_m_axi_a_AWUSER,
        m_axi_a_WVALID => grp_read_color_fu_271_m_axi_a_WVALID,
        m_axi_a_WREADY => ap_const_logic_0,
        m_axi_a_WDATA => grp_read_color_fu_271_m_axi_a_WDATA,
        m_axi_a_WSTRB => grp_read_color_fu_271_m_axi_a_WSTRB,
        m_axi_a_WLAST => grp_read_color_fu_271_m_axi_a_WLAST,
        m_axi_a_WID => grp_read_color_fu_271_m_axi_a_WID,
        m_axi_a_WUSER => grp_read_color_fu_271_m_axi_a_WUSER,
        m_axi_a_ARVALID => grp_read_color_fu_271_m_axi_a_ARVALID,
        m_axi_a_ARREADY => DATA_A_ARREADY,
        m_axi_a_ARADDR => grp_read_color_fu_271_m_axi_a_ARADDR,
        m_axi_a_ARID => grp_read_color_fu_271_m_axi_a_ARID,
        m_axi_a_ARLEN => grp_read_color_fu_271_m_axi_a_ARLEN,
        m_axi_a_ARSIZE => grp_read_color_fu_271_m_axi_a_ARSIZE,
        m_axi_a_ARBURST => grp_read_color_fu_271_m_axi_a_ARBURST,
        m_axi_a_ARLOCK => grp_read_color_fu_271_m_axi_a_ARLOCK,
        m_axi_a_ARCACHE => grp_read_color_fu_271_m_axi_a_ARCACHE,
        m_axi_a_ARPROT => grp_read_color_fu_271_m_axi_a_ARPROT,
        m_axi_a_ARQOS => grp_read_color_fu_271_m_axi_a_ARQOS,
        m_axi_a_ARREGION => grp_read_color_fu_271_m_axi_a_ARREGION,
        m_axi_a_ARUSER => grp_read_color_fu_271_m_axi_a_ARUSER,
        m_axi_a_RVALID => DATA_A_RVALID,
        m_axi_a_RREADY => grp_read_color_fu_271_m_axi_a_RREADY,
        m_axi_a_RDATA => DATA_A_RDATA,
        m_axi_a_RLAST => DATA_A_RLAST,
        m_axi_a_RID => DATA_A_RID,
        m_axi_a_RUSER => DATA_A_RUSER,
        m_axi_a_RRESP => DATA_A_RRESP,
        m_axi_a_BVALID => ap_const_logic_0,
        m_axi_a_BREADY => grp_read_color_fu_271_m_axi_a_BREADY,
        m_axi_a_BRESP => ap_const_lv2_0,
        m_axi_a_BID => ap_const_lv1_0,
        m_axi_a_BUSER => ap_const_lv1_0,
        a_offset => a1_reg_359,
        A_buffer_0_address0 => grp_read_color_fu_271_A_buffer_0_address0,
        A_buffer_0_ce0 => grp_read_color_fu_271_A_buffer_0_ce0,
        A_buffer_0_we0 => grp_read_color_fu_271_A_buffer_0_we0,
        A_buffer_0_d0 => grp_read_color_fu_271_A_buffer_0_d0,
        A_buffer_1_address0 => grp_read_color_fu_271_A_buffer_1_address0,
        A_buffer_1_ce0 => grp_read_color_fu_271_A_buffer_1_ce0,
        A_buffer_1_we0 => grp_read_color_fu_271_A_buffer_1_we0,
        A_buffer_1_d0 => grp_read_color_fu_271_A_buffer_1_d0,
        A_buffer_2_address0 => grp_read_color_fu_271_A_buffer_2_address0,
        A_buffer_2_ce0 => grp_read_color_fu_271_A_buffer_2_ce0,
        A_buffer_2_we0 => grp_read_color_fu_271_A_buffer_2_we0,
        A_buffer_2_d0 => grp_read_color_fu_271_A_buffer_2_d0,
        A_buffer_3_address0 => grp_read_color_fu_271_A_buffer_3_address0,
        A_buffer_3_ce0 => grp_read_color_fu_271_A_buffer_3_ce0,
        A_buffer_3_we0 => grp_read_color_fu_271_A_buffer_3_we0,
        A_buffer_3_d0 => grp_read_color_fu_271_A_buffer_3_d0,
        A_buffer_4_address0 => grp_read_color_fu_271_A_buffer_4_address0,
        A_buffer_4_ce0 => grp_read_color_fu_271_A_buffer_4_ce0,
        A_buffer_4_we0 => grp_read_color_fu_271_A_buffer_4_we0,
        A_buffer_4_d0 => grp_read_color_fu_271_A_buffer_4_d0,
        A_buffer_5_address0 => grp_read_color_fu_271_A_buffer_5_address0,
        A_buffer_5_ce0 => grp_read_color_fu_271_A_buffer_5_ce0,
        A_buffer_5_we0 => grp_read_color_fu_271_A_buffer_5_we0,
        A_buffer_5_d0 => grp_read_color_fu_271_A_buffer_5_d0,
        A_buffer_6_address0 => grp_read_color_fu_271_A_buffer_6_address0,
        A_buffer_6_ce0 => grp_read_color_fu_271_A_buffer_6_ce0,
        A_buffer_6_we0 => grp_read_color_fu_271_A_buffer_6_we0,
        A_buffer_6_d0 => grp_read_color_fu_271_A_buffer_6_d0,
        A_buffer_7_address0 => grp_read_color_fu_271_A_buffer_7_address0,
        A_buffer_7_ce0 => grp_read_color_fu_271_A_buffer_7_ce0,
        A_buffer_7_we0 => grp_read_color_fu_271_A_buffer_7_we0,
        A_buffer_7_d0 => grp_read_color_fu_271_A_buffer_7_d0);

    grp_read_IR_fu_294 : component read_IR
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_read_IR_fu_294_ap_start,
        ap_done => grp_read_IR_fu_294_ap_done,
        ap_idle => grp_read_IR_fu_294_ap_idle,
        ap_ready => grp_read_IR_fu_294_ap_ready,
        m_axi_b_AWVALID => grp_read_IR_fu_294_m_axi_b_AWVALID,
        m_axi_b_AWREADY => ap_const_logic_0,
        m_axi_b_AWADDR => grp_read_IR_fu_294_m_axi_b_AWADDR,
        m_axi_b_AWID => grp_read_IR_fu_294_m_axi_b_AWID,
        m_axi_b_AWLEN => grp_read_IR_fu_294_m_axi_b_AWLEN,
        m_axi_b_AWSIZE => grp_read_IR_fu_294_m_axi_b_AWSIZE,
        m_axi_b_AWBURST => grp_read_IR_fu_294_m_axi_b_AWBURST,
        m_axi_b_AWLOCK => grp_read_IR_fu_294_m_axi_b_AWLOCK,
        m_axi_b_AWCACHE => grp_read_IR_fu_294_m_axi_b_AWCACHE,
        m_axi_b_AWPROT => grp_read_IR_fu_294_m_axi_b_AWPROT,
        m_axi_b_AWQOS => grp_read_IR_fu_294_m_axi_b_AWQOS,
        m_axi_b_AWREGION => grp_read_IR_fu_294_m_axi_b_AWREGION,
        m_axi_b_AWUSER => grp_read_IR_fu_294_m_axi_b_AWUSER,
        m_axi_b_WVALID => grp_read_IR_fu_294_m_axi_b_WVALID,
        m_axi_b_WREADY => ap_const_logic_0,
        m_axi_b_WDATA => grp_read_IR_fu_294_m_axi_b_WDATA,
        m_axi_b_WSTRB => grp_read_IR_fu_294_m_axi_b_WSTRB,
        m_axi_b_WLAST => grp_read_IR_fu_294_m_axi_b_WLAST,
        m_axi_b_WID => grp_read_IR_fu_294_m_axi_b_WID,
        m_axi_b_WUSER => grp_read_IR_fu_294_m_axi_b_WUSER,
        m_axi_b_ARVALID => grp_read_IR_fu_294_m_axi_b_ARVALID,
        m_axi_b_ARREADY => DATA_B_ARREADY,
        m_axi_b_ARADDR => grp_read_IR_fu_294_m_axi_b_ARADDR,
        m_axi_b_ARID => grp_read_IR_fu_294_m_axi_b_ARID,
        m_axi_b_ARLEN => grp_read_IR_fu_294_m_axi_b_ARLEN,
        m_axi_b_ARSIZE => grp_read_IR_fu_294_m_axi_b_ARSIZE,
        m_axi_b_ARBURST => grp_read_IR_fu_294_m_axi_b_ARBURST,
        m_axi_b_ARLOCK => grp_read_IR_fu_294_m_axi_b_ARLOCK,
        m_axi_b_ARCACHE => grp_read_IR_fu_294_m_axi_b_ARCACHE,
        m_axi_b_ARPROT => grp_read_IR_fu_294_m_axi_b_ARPROT,
        m_axi_b_ARQOS => grp_read_IR_fu_294_m_axi_b_ARQOS,
        m_axi_b_ARREGION => grp_read_IR_fu_294_m_axi_b_ARREGION,
        m_axi_b_ARUSER => grp_read_IR_fu_294_m_axi_b_ARUSER,
        m_axi_b_RVALID => DATA_B_RVALID,
        m_axi_b_RREADY => grp_read_IR_fu_294_m_axi_b_RREADY,
        m_axi_b_RDATA => DATA_B_RDATA,
        m_axi_b_RLAST => DATA_B_RLAST,
        m_axi_b_RID => DATA_B_RID,
        m_axi_b_RUSER => DATA_B_RUSER,
        m_axi_b_RRESP => DATA_B_RRESP,
        m_axi_b_BVALID => ap_const_logic_0,
        m_axi_b_BREADY => grp_read_IR_fu_294_m_axi_b_BREADY,
        m_axi_b_BRESP => ap_const_lv2_0,
        m_axi_b_BID => ap_const_lv1_0,
        m_axi_b_BUSER => ap_const_lv1_0,
        b_offset => b3_reg_354,
        B_buffer_0_address0 => grp_read_IR_fu_294_B_buffer_0_address0,
        B_buffer_0_ce0 => grp_read_IR_fu_294_B_buffer_0_ce0,
        B_buffer_0_we0 => grp_read_IR_fu_294_B_buffer_0_we0,
        B_buffer_0_d0 => grp_read_IR_fu_294_B_buffer_0_d0,
        B_buffer_1_address0 => grp_read_IR_fu_294_B_buffer_1_address0,
        B_buffer_1_ce0 => grp_read_IR_fu_294_B_buffer_1_ce0,
        B_buffer_1_we0 => grp_read_IR_fu_294_B_buffer_1_we0,
        B_buffer_1_d0 => grp_read_IR_fu_294_B_buffer_1_d0,
        B_buffer_2_address0 => grp_read_IR_fu_294_B_buffer_2_address0,
        B_buffer_2_ce0 => grp_read_IR_fu_294_B_buffer_2_ce0,
        B_buffer_2_we0 => grp_read_IR_fu_294_B_buffer_2_we0,
        B_buffer_2_d0 => grp_read_IR_fu_294_B_buffer_2_d0,
        B_buffer_3_address0 => grp_read_IR_fu_294_B_buffer_3_address0,
        B_buffer_3_ce0 => grp_read_IR_fu_294_B_buffer_3_ce0,
        B_buffer_3_we0 => grp_read_IR_fu_294_B_buffer_3_we0,
        B_buffer_3_d0 => grp_read_IR_fu_294_B_buffer_3_d0,
        B_buffer_4_address0 => grp_read_IR_fu_294_B_buffer_4_address0,
        B_buffer_4_ce0 => grp_read_IR_fu_294_B_buffer_4_ce0,
        B_buffer_4_we0 => grp_read_IR_fu_294_B_buffer_4_we0,
        B_buffer_4_d0 => grp_read_IR_fu_294_B_buffer_4_d0,
        B_buffer_5_address0 => grp_read_IR_fu_294_B_buffer_5_address0,
        B_buffer_5_ce0 => grp_read_IR_fu_294_B_buffer_5_ce0,
        B_buffer_5_we0 => grp_read_IR_fu_294_B_buffer_5_we0,
        B_buffer_5_d0 => grp_read_IR_fu_294_B_buffer_5_d0,
        B_buffer_6_address0 => grp_read_IR_fu_294_B_buffer_6_address0,
        B_buffer_6_ce0 => grp_read_IR_fu_294_B_buffer_6_ce0,
        B_buffer_6_we0 => grp_read_IR_fu_294_B_buffer_6_we0,
        B_buffer_6_d0 => grp_read_IR_fu_294_B_buffer_6_d0,
        B_buffer_7_address0 => grp_read_IR_fu_294_B_buffer_7_address0,
        B_buffer_7_ce0 => grp_read_IR_fu_294_B_buffer_7_ce0,
        B_buffer_7_we0 => grp_read_IR_fu_294_B_buffer_7_we0,
        B_buffer_7_d0 => grp_read_IR_fu_294_B_buffer_7_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_DWT_IR_fu_216_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_DWT_IR_fu_216_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_DWT_IR_fu_216_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_DWT_IR_fu_216_ap_ready = ap_const_logic_1)) then 
                    grp_DWT_IR_fu_216_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_DWT_color_fu_204_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_DWT_color_fu_204_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_DWT_color_fu_204_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_DWT_color_fu_204_ap_ready = ap_const_logic_1)) then 
                    grp_DWT_color_fu_204_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Filter_fu_228_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_Filter_fu_228_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_Filter_fu_228_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Filter_fu_228_ap_ready = ap_const_logic_1)) then 
                    grp_Filter_fu_228_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_IDWT_fu_192_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_IDWT_fu_192_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_IDWT_fu_192_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_IDWT_fu_192_ap_ready = ap_const_logic_1)) then 
                    grp_IDWT_fu_192_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_read_IR_fu_294_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_read_IR_fu_294_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_read_IR_fu_294_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_read_IR_fu_294_ap_ready = ap_const_logic_1)) then 
                    grp_read_IR_fu_294_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_read_color_fu_271_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_read_color_fu_271_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_read_color_fu_271_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_read_color_fu_271_ap_ready = ap_const_logic_1)) then 
                    grp_read_color_fu_271_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_write_image_fu_256_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_write_image_fu_256_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_write_image_fu_256_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_write_image_fu_256_ap_ready = ap_const_logic_1)) then 
                    grp_write_image_fu_256_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                a1_reg_359 <= a(31 downto 1);
                b3_reg_354 <= b(31 downto 1);
                c5_reg_349 <= c(31 downto 1);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_IDWT_fu_192_ap_done, grp_Filter_fu_228_ap_done, grp_write_image_fu_256_ap_done, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state2, ap_block_state2_on_subcall_done, ap_block_state4_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_Filter_fu_228_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_IDWT_fu_192_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_write_image_fu_256_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;

    A_buffer_0_address0_assign_proc : process(grp_DWT_color_fu_204_A_0_address0, grp_Filter_fu_228_A_0_address0, grp_read_color_fu_271_A_buffer_0_address0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_buffer_0_address0 <= grp_read_color_fu_271_A_buffer_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_buffer_0_address0 <= grp_Filter_fu_228_A_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_buffer_0_address0 <= grp_DWT_color_fu_204_A_0_address0;
        else 
            A_buffer_0_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    A_buffer_0_ce0_assign_proc : process(grp_DWT_color_fu_204_A_0_ce0, grp_Filter_fu_228_A_0_ce0, grp_read_color_fu_271_A_buffer_0_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_buffer_0_ce0 <= grp_read_color_fu_271_A_buffer_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_buffer_0_ce0 <= grp_Filter_fu_228_A_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_buffer_0_ce0 <= grp_DWT_color_fu_204_A_0_ce0;
        else 
            A_buffer_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_buffer_0_d0_assign_proc : process(grp_DWT_color_fu_204_A_0_d0, grp_read_color_fu_271_A_buffer_0_d0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_buffer_0_d0 <= grp_read_color_fu_271_A_buffer_0_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_buffer_0_d0 <= grp_DWT_color_fu_204_A_0_d0;
        else 
            A_buffer_0_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    A_buffer_0_we0_assign_proc : process(grp_DWT_color_fu_204_A_0_we0, grp_read_color_fu_271_A_buffer_0_we0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_buffer_0_we0 <= grp_read_color_fu_271_A_buffer_0_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_buffer_0_we0 <= grp_DWT_color_fu_204_A_0_we0;
        else 
            A_buffer_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_buffer_1_address0_assign_proc : process(grp_DWT_color_fu_204_A_1_address0, grp_Filter_fu_228_A_1_address0, grp_read_color_fu_271_A_buffer_1_address0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_buffer_1_address0 <= grp_read_color_fu_271_A_buffer_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_buffer_1_address0 <= grp_Filter_fu_228_A_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_buffer_1_address0 <= grp_DWT_color_fu_204_A_1_address0;
        else 
            A_buffer_1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    A_buffer_1_ce0_assign_proc : process(grp_DWT_color_fu_204_A_1_ce0, grp_Filter_fu_228_A_1_ce0, grp_read_color_fu_271_A_buffer_1_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_buffer_1_ce0 <= grp_read_color_fu_271_A_buffer_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_buffer_1_ce0 <= grp_Filter_fu_228_A_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_buffer_1_ce0 <= grp_DWT_color_fu_204_A_1_ce0;
        else 
            A_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_buffer_1_d0_assign_proc : process(grp_DWT_color_fu_204_A_1_d0, grp_read_color_fu_271_A_buffer_1_d0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_buffer_1_d0 <= grp_read_color_fu_271_A_buffer_1_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_buffer_1_d0 <= grp_DWT_color_fu_204_A_1_d0;
        else 
            A_buffer_1_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    A_buffer_1_we0_assign_proc : process(grp_DWT_color_fu_204_A_1_we0, grp_read_color_fu_271_A_buffer_1_we0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_buffer_1_we0 <= grp_read_color_fu_271_A_buffer_1_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_buffer_1_we0 <= grp_DWT_color_fu_204_A_1_we0;
        else 
            A_buffer_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_buffer_2_address0_assign_proc : process(grp_DWT_color_fu_204_A_2_address0, grp_Filter_fu_228_A_2_address0, grp_read_color_fu_271_A_buffer_2_address0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_buffer_2_address0 <= grp_read_color_fu_271_A_buffer_2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_buffer_2_address0 <= grp_Filter_fu_228_A_2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_buffer_2_address0 <= grp_DWT_color_fu_204_A_2_address0;
        else 
            A_buffer_2_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    A_buffer_2_ce0_assign_proc : process(grp_DWT_color_fu_204_A_2_ce0, grp_Filter_fu_228_A_2_ce0, grp_read_color_fu_271_A_buffer_2_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_buffer_2_ce0 <= grp_read_color_fu_271_A_buffer_2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_buffer_2_ce0 <= grp_Filter_fu_228_A_2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_buffer_2_ce0 <= grp_DWT_color_fu_204_A_2_ce0;
        else 
            A_buffer_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_buffer_2_d0_assign_proc : process(grp_DWT_color_fu_204_A_2_d0, grp_read_color_fu_271_A_buffer_2_d0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_buffer_2_d0 <= grp_read_color_fu_271_A_buffer_2_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_buffer_2_d0 <= grp_DWT_color_fu_204_A_2_d0;
        else 
            A_buffer_2_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    A_buffer_2_we0_assign_proc : process(grp_DWT_color_fu_204_A_2_we0, grp_read_color_fu_271_A_buffer_2_we0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_buffer_2_we0 <= grp_read_color_fu_271_A_buffer_2_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_buffer_2_we0 <= grp_DWT_color_fu_204_A_2_we0;
        else 
            A_buffer_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_buffer_3_address0_assign_proc : process(grp_DWT_color_fu_204_A_3_address0, grp_Filter_fu_228_A_3_address0, grp_read_color_fu_271_A_buffer_3_address0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_buffer_3_address0 <= grp_read_color_fu_271_A_buffer_3_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_buffer_3_address0 <= grp_Filter_fu_228_A_3_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_buffer_3_address0 <= grp_DWT_color_fu_204_A_3_address0;
        else 
            A_buffer_3_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    A_buffer_3_ce0_assign_proc : process(grp_DWT_color_fu_204_A_3_ce0, grp_Filter_fu_228_A_3_ce0, grp_read_color_fu_271_A_buffer_3_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_buffer_3_ce0 <= grp_read_color_fu_271_A_buffer_3_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_buffer_3_ce0 <= grp_Filter_fu_228_A_3_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_buffer_3_ce0 <= grp_DWT_color_fu_204_A_3_ce0;
        else 
            A_buffer_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_buffer_3_d0_assign_proc : process(grp_DWT_color_fu_204_A_3_d0, grp_read_color_fu_271_A_buffer_3_d0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_buffer_3_d0 <= grp_read_color_fu_271_A_buffer_3_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_buffer_3_d0 <= grp_DWT_color_fu_204_A_3_d0;
        else 
            A_buffer_3_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    A_buffer_3_we0_assign_proc : process(grp_DWT_color_fu_204_A_3_we0, grp_read_color_fu_271_A_buffer_3_we0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_buffer_3_we0 <= grp_read_color_fu_271_A_buffer_3_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_buffer_3_we0 <= grp_DWT_color_fu_204_A_3_we0;
        else 
            A_buffer_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_buffer_4_address0_assign_proc : process(grp_DWT_color_fu_204_A_4_address0, grp_Filter_fu_228_A_4_address0, grp_read_color_fu_271_A_buffer_4_address0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_buffer_4_address0 <= grp_read_color_fu_271_A_buffer_4_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_buffer_4_address0 <= grp_Filter_fu_228_A_4_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_buffer_4_address0 <= grp_DWT_color_fu_204_A_4_address0;
        else 
            A_buffer_4_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    A_buffer_4_ce0_assign_proc : process(grp_DWT_color_fu_204_A_4_ce0, grp_Filter_fu_228_A_4_ce0, grp_read_color_fu_271_A_buffer_4_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_buffer_4_ce0 <= grp_read_color_fu_271_A_buffer_4_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_buffer_4_ce0 <= grp_Filter_fu_228_A_4_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_buffer_4_ce0 <= grp_DWT_color_fu_204_A_4_ce0;
        else 
            A_buffer_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_buffer_4_d0_assign_proc : process(grp_DWT_color_fu_204_A_4_d0, grp_read_color_fu_271_A_buffer_4_d0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_buffer_4_d0 <= grp_read_color_fu_271_A_buffer_4_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_buffer_4_d0 <= grp_DWT_color_fu_204_A_4_d0;
        else 
            A_buffer_4_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    A_buffer_4_we0_assign_proc : process(grp_DWT_color_fu_204_A_4_we0, grp_read_color_fu_271_A_buffer_4_we0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_buffer_4_we0 <= grp_read_color_fu_271_A_buffer_4_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_buffer_4_we0 <= grp_DWT_color_fu_204_A_4_we0;
        else 
            A_buffer_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_buffer_5_address0_assign_proc : process(grp_DWT_color_fu_204_A_5_address0, grp_Filter_fu_228_A_5_address0, grp_read_color_fu_271_A_buffer_5_address0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_buffer_5_address0 <= grp_read_color_fu_271_A_buffer_5_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_buffer_5_address0 <= grp_Filter_fu_228_A_5_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_buffer_5_address0 <= grp_DWT_color_fu_204_A_5_address0;
        else 
            A_buffer_5_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    A_buffer_5_ce0_assign_proc : process(grp_DWT_color_fu_204_A_5_ce0, grp_Filter_fu_228_A_5_ce0, grp_read_color_fu_271_A_buffer_5_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_buffer_5_ce0 <= grp_read_color_fu_271_A_buffer_5_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_buffer_5_ce0 <= grp_Filter_fu_228_A_5_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_buffer_5_ce0 <= grp_DWT_color_fu_204_A_5_ce0;
        else 
            A_buffer_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_buffer_5_d0_assign_proc : process(grp_DWT_color_fu_204_A_5_d0, grp_read_color_fu_271_A_buffer_5_d0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_buffer_5_d0 <= grp_read_color_fu_271_A_buffer_5_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_buffer_5_d0 <= grp_DWT_color_fu_204_A_5_d0;
        else 
            A_buffer_5_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    A_buffer_5_we0_assign_proc : process(grp_DWT_color_fu_204_A_5_we0, grp_read_color_fu_271_A_buffer_5_we0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_buffer_5_we0 <= grp_read_color_fu_271_A_buffer_5_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_buffer_5_we0 <= grp_DWT_color_fu_204_A_5_we0;
        else 
            A_buffer_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_buffer_6_address0_assign_proc : process(grp_DWT_color_fu_204_A_6_address0, grp_Filter_fu_228_A_6_address0, grp_read_color_fu_271_A_buffer_6_address0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_buffer_6_address0 <= grp_read_color_fu_271_A_buffer_6_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_buffer_6_address0 <= grp_Filter_fu_228_A_6_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_buffer_6_address0 <= grp_DWT_color_fu_204_A_6_address0;
        else 
            A_buffer_6_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    A_buffer_6_ce0_assign_proc : process(grp_DWT_color_fu_204_A_6_ce0, grp_Filter_fu_228_A_6_ce0, grp_read_color_fu_271_A_buffer_6_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_buffer_6_ce0 <= grp_read_color_fu_271_A_buffer_6_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_buffer_6_ce0 <= grp_Filter_fu_228_A_6_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_buffer_6_ce0 <= grp_DWT_color_fu_204_A_6_ce0;
        else 
            A_buffer_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_buffer_6_d0_assign_proc : process(grp_DWT_color_fu_204_A_6_d0, grp_read_color_fu_271_A_buffer_6_d0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_buffer_6_d0 <= grp_read_color_fu_271_A_buffer_6_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_buffer_6_d0 <= grp_DWT_color_fu_204_A_6_d0;
        else 
            A_buffer_6_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    A_buffer_6_we0_assign_proc : process(grp_DWT_color_fu_204_A_6_we0, grp_read_color_fu_271_A_buffer_6_we0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_buffer_6_we0 <= grp_read_color_fu_271_A_buffer_6_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_buffer_6_we0 <= grp_DWT_color_fu_204_A_6_we0;
        else 
            A_buffer_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_buffer_7_address0_assign_proc : process(grp_DWT_color_fu_204_A_7_address0, grp_Filter_fu_228_A_7_address0, grp_read_color_fu_271_A_buffer_7_address0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_buffer_7_address0 <= grp_read_color_fu_271_A_buffer_7_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_buffer_7_address0 <= grp_Filter_fu_228_A_7_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_buffer_7_address0 <= grp_DWT_color_fu_204_A_7_address0;
        else 
            A_buffer_7_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    A_buffer_7_ce0_assign_proc : process(grp_DWT_color_fu_204_A_7_ce0, grp_Filter_fu_228_A_7_ce0, grp_read_color_fu_271_A_buffer_7_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_buffer_7_ce0 <= grp_read_color_fu_271_A_buffer_7_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_buffer_7_ce0 <= grp_Filter_fu_228_A_7_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_buffer_7_ce0 <= grp_DWT_color_fu_204_A_7_ce0;
        else 
            A_buffer_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_buffer_7_d0_assign_proc : process(grp_DWT_color_fu_204_A_7_d0, grp_read_color_fu_271_A_buffer_7_d0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_buffer_7_d0 <= grp_read_color_fu_271_A_buffer_7_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_buffer_7_d0 <= grp_DWT_color_fu_204_A_7_d0;
        else 
            A_buffer_7_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    A_buffer_7_we0_assign_proc : process(grp_DWT_color_fu_204_A_7_we0, grp_read_color_fu_271_A_buffer_7_we0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_buffer_7_we0 <= grp_read_color_fu_271_A_buffer_7_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_buffer_7_we0 <= grp_DWT_color_fu_204_A_7_we0;
        else 
            A_buffer_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_buffer_0_address0_assign_proc : process(grp_DWT_IR_fu_216_B_0_address0, grp_Filter_fu_228_B_0_address0, grp_read_IR_fu_294_B_buffer_0_address0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_buffer_0_address0 <= grp_read_IR_fu_294_B_buffer_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_buffer_0_address0 <= grp_Filter_fu_228_B_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_buffer_0_address0 <= grp_DWT_IR_fu_216_B_0_address0;
        else 
            B_buffer_0_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    B_buffer_0_ce0_assign_proc : process(grp_DWT_IR_fu_216_B_0_ce0, grp_Filter_fu_228_B_0_ce0, grp_read_IR_fu_294_B_buffer_0_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_buffer_0_ce0 <= grp_read_IR_fu_294_B_buffer_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_buffer_0_ce0 <= grp_Filter_fu_228_B_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_buffer_0_ce0 <= grp_DWT_IR_fu_216_B_0_ce0;
        else 
            B_buffer_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_buffer_0_d0_assign_proc : process(grp_DWT_IR_fu_216_B_0_d0, grp_read_IR_fu_294_B_buffer_0_d0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_buffer_0_d0 <= grp_read_IR_fu_294_B_buffer_0_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_buffer_0_d0 <= grp_DWT_IR_fu_216_B_0_d0;
        else 
            B_buffer_0_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    B_buffer_0_we0_assign_proc : process(grp_DWT_IR_fu_216_B_0_we0, grp_read_IR_fu_294_B_buffer_0_we0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_buffer_0_we0 <= grp_read_IR_fu_294_B_buffer_0_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_buffer_0_we0 <= grp_DWT_IR_fu_216_B_0_we0;
        else 
            B_buffer_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_buffer_1_address0_assign_proc : process(grp_DWT_IR_fu_216_B_1_address0, grp_Filter_fu_228_B_1_address0, grp_read_IR_fu_294_B_buffer_1_address0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_buffer_1_address0 <= grp_read_IR_fu_294_B_buffer_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_buffer_1_address0 <= grp_Filter_fu_228_B_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_buffer_1_address0 <= grp_DWT_IR_fu_216_B_1_address0;
        else 
            B_buffer_1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    B_buffer_1_ce0_assign_proc : process(grp_DWT_IR_fu_216_B_1_ce0, grp_Filter_fu_228_B_1_ce0, grp_read_IR_fu_294_B_buffer_1_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_buffer_1_ce0 <= grp_read_IR_fu_294_B_buffer_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_buffer_1_ce0 <= grp_Filter_fu_228_B_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_buffer_1_ce0 <= grp_DWT_IR_fu_216_B_1_ce0;
        else 
            B_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_buffer_1_d0_assign_proc : process(grp_DWT_IR_fu_216_B_1_d0, grp_read_IR_fu_294_B_buffer_1_d0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_buffer_1_d0 <= grp_read_IR_fu_294_B_buffer_1_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_buffer_1_d0 <= grp_DWT_IR_fu_216_B_1_d0;
        else 
            B_buffer_1_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    B_buffer_1_we0_assign_proc : process(grp_DWT_IR_fu_216_B_1_we0, grp_read_IR_fu_294_B_buffer_1_we0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_buffer_1_we0 <= grp_read_IR_fu_294_B_buffer_1_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_buffer_1_we0 <= grp_DWT_IR_fu_216_B_1_we0;
        else 
            B_buffer_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_buffer_2_address0_assign_proc : process(grp_DWT_IR_fu_216_B_2_address0, grp_Filter_fu_228_B_2_address0, grp_read_IR_fu_294_B_buffer_2_address0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_buffer_2_address0 <= grp_read_IR_fu_294_B_buffer_2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_buffer_2_address0 <= grp_Filter_fu_228_B_2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_buffer_2_address0 <= grp_DWT_IR_fu_216_B_2_address0;
        else 
            B_buffer_2_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    B_buffer_2_ce0_assign_proc : process(grp_DWT_IR_fu_216_B_2_ce0, grp_Filter_fu_228_B_2_ce0, grp_read_IR_fu_294_B_buffer_2_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_buffer_2_ce0 <= grp_read_IR_fu_294_B_buffer_2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_buffer_2_ce0 <= grp_Filter_fu_228_B_2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_buffer_2_ce0 <= grp_DWT_IR_fu_216_B_2_ce0;
        else 
            B_buffer_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_buffer_2_d0_assign_proc : process(grp_DWT_IR_fu_216_B_2_d0, grp_read_IR_fu_294_B_buffer_2_d0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_buffer_2_d0 <= grp_read_IR_fu_294_B_buffer_2_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_buffer_2_d0 <= grp_DWT_IR_fu_216_B_2_d0;
        else 
            B_buffer_2_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    B_buffer_2_we0_assign_proc : process(grp_DWT_IR_fu_216_B_2_we0, grp_read_IR_fu_294_B_buffer_2_we0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_buffer_2_we0 <= grp_read_IR_fu_294_B_buffer_2_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_buffer_2_we0 <= grp_DWT_IR_fu_216_B_2_we0;
        else 
            B_buffer_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_buffer_3_address0_assign_proc : process(grp_DWT_IR_fu_216_B_3_address0, grp_Filter_fu_228_B_3_address0, grp_read_IR_fu_294_B_buffer_3_address0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_buffer_3_address0 <= grp_read_IR_fu_294_B_buffer_3_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_buffer_3_address0 <= grp_Filter_fu_228_B_3_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_buffer_3_address0 <= grp_DWT_IR_fu_216_B_3_address0;
        else 
            B_buffer_3_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    B_buffer_3_ce0_assign_proc : process(grp_DWT_IR_fu_216_B_3_ce0, grp_Filter_fu_228_B_3_ce0, grp_read_IR_fu_294_B_buffer_3_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_buffer_3_ce0 <= grp_read_IR_fu_294_B_buffer_3_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_buffer_3_ce0 <= grp_Filter_fu_228_B_3_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_buffer_3_ce0 <= grp_DWT_IR_fu_216_B_3_ce0;
        else 
            B_buffer_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_buffer_3_d0_assign_proc : process(grp_DWT_IR_fu_216_B_3_d0, grp_read_IR_fu_294_B_buffer_3_d0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_buffer_3_d0 <= grp_read_IR_fu_294_B_buffer_3_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_buffer_3_d0 <= grp_DWT_IR_fu_216_B_3_d0;
        else 
            B_buffer_3_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    B_buffer_3_we0_assign_proc : process(grp_DWT_IR_fu_216_B_3_we0, grp_read_IR_fu_294_B_buffer_3_we0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_buffer_3_we0 <= grp_read_IR_fu_294_B_buffer_3_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_buffer_3_we0 <= grp_DWT_IR_fu_216_B_3_we0;
        else 
            B_buffer_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_buffer_4_address0_assign_proc : process(grp_DWT_IR_fu_216_B_4_address0, grp_Filter_fu_228_B_4_address0, grp_read_IR_fu_294_B_buffer_4_address0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_buffer_4_address0 <= grp_read_IR_fu_294_B_buffer_4_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_buffer_4_address0 <= grp_Filter_fu_228_B_4_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_buffer_4_address0 <= grp_DWT_IR_fu_216_B_4_address0;
        else 
            B_buffer_4_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    B_buffer_4_ce0_assign_proc : process(grp_DWT_IR_fu_216_B_4_ce0, grp_Filter_fu_228_B_4_ce0, grp_read_IR_fu_294_B_buffer_4_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_buffer_4_ce0 <= grp_read_IR_fu_294_B_buffer_4_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_buffer_4_ce0 <= grp_Filter_fu_228_B_4_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_buffer_4_ce0 <= grp_DWT_IR_fu_216_B_4_ce0;
        else 
            B_buffer_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_buffer_4_d0_assign_proc : process(grp_DWT_IR_fu_216_B_4_d0, grp_read_IR_fu_294_B_buffer_4_d0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_buffer_4_d0 <= grp_read_IR_fu_294_B_buffer_4_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_buffer_4_d0 <= grp_DWT_IR_fu_216_B_4_d0;
        else 
            B_buffer_4_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    B_buffer_4_we0_assign_proc : process(grp_DWT_IR_fu_216_B_4_we0, grp_read_IR_fu_294_B_buffer_4_we0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_buffer_4_we0 <= grp_read_IR_fu_294_B_buffer_4_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_buffer_4_we0 <= grp_DWT_IR_fu_216_B_4_we0;
        else 
            B_buffer_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_buffer_5_address0_assign_proc : process(grp_DWT_IR_fu_216_B_5_address0, grp_Filter_fu_228_B_5_address0, grp_read_IR_fu_294_B_buffer_5_address0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_buffer_5_address0 <= grp_read_IR_fu_294_B_buffer_5_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_buffer_5_address0 <= grp_Filter_fu_228_B_5_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_buffer_5_address0 <= grp_DWT_IR_fu_216_B_5_address0;
        else 
            B_buffer_5_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    B_buffer_5_ce0_assign_proc : process(grp_DWT_IR_fu_216_B_5_ce0, grp_Filter_fu_228_B_5_ce0, grp_read_IR_fu_294_B_buffer_5_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_buffer_5_ce0 <= grp_read_IR_fu_294_B_buffer_5_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_buffer_5_ce0 <= grp_Filter_fu_228_B_5_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_buffer_5_ce0 <= grp_DWT_IR_fu_216_B_5_ce0;
        else 
            B_buffer_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_buffer_5_d0_assign_proc : process(grp_DWT_IR_fu_216_B_5_d0, grp_read_IR_fu_294_B_buffer_5_d0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_buffer_5_d0 <= grp_read_IR_fu_294_B_buffer_5_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_buffer_5_d0 <= grp_DWT_IR_fu_216_B_5_d0;
        else 
            B_buffer_5_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    B_buffer_5_we0_assign_proc : process(grp_DWT_IR_fu_216_B_5_we0, grp_read_IR_fu_294_B_buffer_5_we0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_buffer_5_we0 <= grp_read_IR_fu_294_B_buffer_5_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_buffer_5_we0 <= grp_DWT_IR_fu_216_B_5_we0;
        else 
            B_buffer_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_buffer_6_address0_assign_proc : process(grp_DWT_IR_fu_216_B_6_address0, grp_Filter_fu_228_B_6_address0, grp_read_IR_fu_294_B_buffer_6_address0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_buffer_6_address0 <= grp_read_IR_fu_294_B_buffer_6_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_buffer_6_address0 <= grp_Filter_fu_228_B_6_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_buffer_6_address0 <= grp_DWT_IR_fu_216_B_6_address0;
        else 
            B_buffer_6_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    B_buffer_6_ce0_assign_proc : process(grp_DWT_IR_fu_216_B_6_ce0, grp_Filter_fu_228_B_6_ce0, grp_read_IR_fu_294_B_buffer_6_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_buffer_6_ce0 <= grp_read_IR_fu_294_B_buffer_6_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_buffer_6_ce0 <= grp_Filter_fu_228_B_6_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_buffer_6_ce0 <= grp_DWT_IR_fu_216_B_6_ce0;
        else 
            B_buffer_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_buffer_6_d0_assign_proc : process(grp_DWT_IR_fu_216_B_6_d0, grp_read_IR_fu_294_B_buffer_6_d0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_buffer_6_d0 <= grp_read_IR_fu_294_B_buffer_6_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_buffer_6_d0 <= grp_DWT_IR_fu_216_B_6_d0;
        else 
            B_buffer_6_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    B_buffer_6_we0_assign_proc : process(grp_DWT_IR_fu_216_B_6_we0, grp_read_IR_fu_294_B_buffer_6_we0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_buffer_6_we0 <= grp_read_IR_fu_294_B_buffer_6_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_buffer_6_we0 <= grp_DWT_IR_fu_216_B_6_we0;
        else 
            B_buffer_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_buffer_7_address0_assign_proc : process(grp_DWT_IR_fu_216_B_7_address0, grp_Filter_fu_228_B_7_address0, grp_read_IR_fu_294_B_buffer_7_address0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_buffer_7_address0 <= grp_read_IR_fu_294_B_buffer_7_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_buffer_7_address0 <= grp_Filter_fu_228_B_7_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_buffer_7_address0 <= grp_DWT_IR_fu_216_B_7_address0;
        else 
            B_buffer_7_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    B_buffer_7_ce0_assign_proc : process(grp_DWT_IR_fu_216_B_7_ce0, grp_Filter_fu_228_B_7_ce0, grp_read_IR_fu_294_B_buffer_7_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_buffer_7_ce0 <= grp_read_IR_fu_294_B_buffer_7_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_buffer_7_ce0 <= grp_Filter_fu_228_B_7_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_buffer_7_ce0 <= grp_DWT_IR_fu_216_B_7_ce0;
        else 
            B_buffer_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_buffer_7_d0_assign_proc : process(grp_DWT_IR_fu_216_B_7_d0, grp_read_IR_fu_294_B_buffer_7_d0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_buffer_7_d0 <= grp_read_IR_fu_294_B_buffer_7_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_buffer_7_d0 <= grp_DWT_IR_fu_216_B_7_d0;
        else 
            B_buffer_7_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    B_buffer_7_we0_assign_proc : process(grp_DWT_IR_fu_216_B_7_we0, grp_read_IR_fu_294_B_buffer_7_we0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_buffer_7_we0 <= grp_read_IR_fu_294_B_buffer_7_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_buffer_7_we0 <= grp_DWT_IR_fu_216_B_7_we0;
        else 
            B_buffer_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    C_buffer_0_address0_assign_proc : process(grp_IDWT_fu_192_C_0_address0, grp_Filter_fu_228_C_0_address0, grp_write_image_fu_256_C_buffer_0_address0, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            C_buffer_0_address0 <= grp_write_image_fu_256_C_buffer_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_buffer_0_address0 <= grp_Filter_fu_228_C_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_buffer_0_address0 <= grp_IDWT_fu_192_C_0_address0;
        else 
            C_buffer_0_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    C_buffer_0_ce0_assign_proc : process(grp_IDWT_fu_192_C_0_ce0, grp_Filter_fu_228_C_0_ce0, grp_write_image_fu_256_C_buffer_0_ce0, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            C_buffer_0_ce0 <= grp_write_image_fu_256_C_buffer_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_buffer_0_ce0 <= grp_Filter_fu_228_C_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_buffer_0_ce0 <= grp_IDWT_fu_192_C_0_ce0;
        else 
            C_buffer_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_buffer_0_d0_assign_proc : process(grp_IDWT_fu_192_C_0_d0, grp_Filter_fu_228_C_0_d0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_buffer_0_d0 <= grp_Filter_fu_228_C_0_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_buffer_0_d0 <= grp_IDWT_fu_192_C_0_d0;
        else 
            C_buffer_0_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    C_buffer_0_we0_assign_proc : process(grp_IDWT_fu_192_C_0_we0, grp_Filter_fu_228_C_0_we0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_buffer_0_we0 <= grp_Filter_fu_228_C_0_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_buffer_0_we0 <= grp_IDWT_fu_192_C_0_we0;
        else 
            C_buffer_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    C_buffer_1_address0_assign_proc : process(grp_IDWT_fu_192_C_1_address0, grp_Filter_fu_228_C_1_address0, grp_write_image_fu_256_C_buffer_1_address0, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            C_buffer_1_address0 <= grp_write_image_fu_256_C_buffer_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_buffer_1_address0 <= grp_Filter_fu_228_C_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_buffer_1_address0 <= grp_IDWT_fu_192_C_1_address0;
        else 
            C_buffer_1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    C_buffer_1_ce0_assign_proc : process(grp_IDWT_fu_192_C_1_ce0, grp_Filter_fu_228_C_1_ce0, grp_write_image_fu_256_C_buffer_1_ce0, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            C_buffer_1_ce0 <= grp_write_image_fu_256_C_buffer_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_buffer_1_ce0 <= grp_Filter_fu_228_C_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_buffer_1_ce0 <= grp_IDWT_fu_192_C_1_ce0;
        else 
            C_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_buffer_1_d0_assign_proc : process(grp_IDWT_fu_192_C_1_d0, grp_Filter_fu_228_C_1_d0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_buffer_1_d0 <= grp_Filter_fu_228_C_1_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_buffer_1_d0 <= grp_IDWT_fu_192_C_1_d0;
        else 
            C_buffer_1_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    C_buffer_1_we0_assign_proc : process(grp_IDWT_fu_192_C_1_we0, grp_Filter_fu_228_C_1_we0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_buffer_1_we0 <= grp_Filter_fu_228_C_1_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_buffer_1_we0 <= grp_IDWT_fu_192_C_1_we0;
        else 
            C_buffer_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    C_buffer_2_address0_assign_proc : process(grp_IDWT_fu_192_C_2_address0, grp_Filter_fu_228_C_2_address0, grp_write_image_fu_256_C_buffer_2_address0, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            C_buffer_2_address0 <= grp_write_image_fu_256_C_buffer_2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_buffer_2_address0 <= grp_Filter_fu_228_C_2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_buffer_2_address0 <= grp_IDWT_fu_192_C_2_address0;
        else 
            C_buffer_2_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    C_buffer_2_ce0_assign_proc : process(grp_IDWT_fu_192_C_2_ce0, grp_Filter_fu_228_C_2_ce0, grp_write_image_fu_256_C_buffer_2_ce0, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            C_buffer_2_ce0 <= grp_write_image_fu_256_C_buffer_2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_buffer_2_ce0 <= grp_Filter_fu_228_C_2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_buffer_2_ce0 <= grp_IDWT_fu_192_C_2_ce0;
        else 
            C_buffer_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_buffer_2_d0_assign_proc : process(grp_IDWT_fu_192_C_2_d0, grp_Filter_fu_228_C_2_d0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_buffer_2_d0 <= grp_Filter_fu_228_C_2_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_buffer_2_d0 <= grp_IDWT_fu_192_C_2_d0;
        else 
            C_buffer_2_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    C_buffer_2_we0_assign_proc : process(grp_IDWT_fu_192_C_2_we0, grp_Filter_fu_228_C_2_we0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_buffer_2_we0 <= grp_Filter_fu_228_C_2_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_buffer_2_we0 <= grp_IDWT_fu_192_C_2_we0;
        else 
            C_buffer_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    C_buffer_3_address0_assign_proc : process(grp_IDWT_fu_192_C_3_address0, grp_Filter_fu_228_C_3_address0, grp_write_image_fu_256_C_buffer_3_address0, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            C_buffer_3_address0 <= grp_write_image_fu_256_C_buffer_3_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_buffer_3_address0 <= grp_Filter_fu_228_C_3_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_buffer_3_address0 <= grp_IDWT_fu_192_C_3_address0;
        else 
            C_buffer_3_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    C_buffer_3_ce0_assign_proc : process(grp_IDWT_fu_192_C_3_ce0, grp_Filter_fu_228_C_3_ce0, grp_write_image_fu_256_C_buffer_3_ce0, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            C_buffer_3_ce0 <= grp_write_image_fu_256_C_buffer_3_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_buffer_3_ce0 <= grp_Filter_fu_228_C_3_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_buffer_3_ce0 <= grp_IDWT_fu_192_C_3_ce0;
        else 
            C_buffer_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_buffer_3_d0_assign_proc : process(grp_IDWT_fu_192_C_3_d0, grp_Filter_fu_228_C_3_d0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_buffer_3_d0 <= grp_Filter_fu_228_C_3_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_buffer_3_d0 <= grp_IDWT_fu_192_C_3_d0;
        else 
            C_buffer_3_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    C_buffer_3_we0_assign_proc : process(grp_IDWT_fu_192_C_3_we0, grp_Filter_fu_228_C_3_we0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_buffer_3_we0 <= grp_Filter_fu_228_C_3_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_buffer_3_we0 <= grp_IDWT_fu_192_C_3_we0;
        else 
            C_buffer_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    C_buffer_4_address0_assign_proc : process(grp_IDWT_fu_192_C_4_address0, grp_Filter_fu_228_C_4_address0, grp_write_image_fu_256_C_buffer_4_address0, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            C_buffer_4_address0 <= grp_write_image_fu_256_C_buffer_4_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_buffer_4_address0 <= grp_Filter_fu_228_C_4_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_buffer_4_address0 <= grp_IDWT_fu_192_C_4_address0;
        else 
            C_buffer_4_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    C_buffer_4_ce0_assign_proc : process(grp_IDWT_fu_192_C_4_ce0, grp_Filter_fu_228_C_4_ce0, grp_write_image_fu_256_C_buffer_4_ce0, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            C_buffer_4_ce0 <= grp_write_image_fu_256_C_buffer_4_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_buffer_4_ce0 <= grp_Filter_fu_228_C_4_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_buffer_4_ce0 <= grp_IDWT_fu_192_C_4_ce0;
        else 
            C_buffer_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_buffer_4_d0_assign_proc : process(grp_IDWT_fu_192_C_4_d0, grp_Filter_fu_228_C_4_d0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_buffer_4_d0 <= grp_Filter_fu_228_C_4_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_buffer_4_d0 <= grp_IDWT_fu_192_C_4_d0;
        else 
            C_buffer_4_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    C_buffer_4_we0_assign_proc : process(grp_IDWT_fu_192_C_4_we0, grp_Filter_fu_228_C_4_we0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_buffer_4_we0 <= grp_Filter_fu_228_C_4_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_buffer_4_we0 <= grp_IDWT_fu_192_C_4_we0;
        else 
            C_buffer_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    C_buffer_5_address0_assign_proc : process(grp_IDWT_fu_192_C_5_address0, grp_Filter_fu_228_C_5_address0, grp_write_image_fu_256_C_buffer_5_address0, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            C_buffer_5_address0 <= grp_write_image_fu_256_C_buffer_5_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_buffer_5_address0 <= grp_Filter_fu_228_C_5_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_buffer_5_address0 <= grp_IDWT_fu_192_C_5_address0;
        else 
            C_buffer_5_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    C_buffer_5_ce0_assign_proc : process(grp_IDWT_fu_192_C_5_ce0, grp_Filter_fu_228_C_5_ce0, grp_write_image_fu_256_C_buffer_5_ce0, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            C_buffer_5_ce0 <= grp_write_image_fu_256_C_buffer_5_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_buffer_5_ce0 <= grp_Filter_fu_228_C_5_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_buffer_5_ce0 <= grp_IDWT_fu_192_C_5_ce0;
        else 
            C_buffer_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_buffer_5_d0_assign_proc : process(grp_IDWT_fu_192_C_5_d0, grp_Filter_fu_228_C_5_d0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_buffer_5_d0 <= grp_Filter_fu_228_C_5_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_buffer_5_d0 <= grp_IDWT_fu_192_C_5_d0;
        else 
            C_buffer_5_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    C_buffer_5_we0_assign_proc : process(grp_IDWT_fu_192_C_5_we0, grp_Filter_fu_228_C_5_we0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_buffer_5_we0 <= grp_Filter_fu_228_C_5_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_buffer_5_we0 <= grp_IDWT_fu_192_C_5_we0;
        else 
            C_buffer_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    C_buffer_6_address0_assign_proc : process(grp_IDWT_fu_192_C_6_address0, grp_Filter_fu_228_C_6_address0, grp_write_image_fu_256_C_buffer_6_address0, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            C_buffer_6_address0 <= grp_write_image_fu_256_C_buffer_6_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_buffer_6_address0 <= grp_Filter_fu_228_C_6_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_buffer_6_address0 <= grp_IDWT_fu_192_C_6_address0;
        else 
            C_buffer_6_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    C_buffer_6_ce0_assign_proc : process(grp_IDWT_fu_192_C_6_ce0, grp_Filter_fu_228_C_6_ce0, grp_write_image_fu_256_C_buffer_6_ce0, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            C_buffer_6_ce0 <= grp_write_image_fu_256_C_buffer_6_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_buffer_6_ce0 <= grp_Filter_fu_228_C_6_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_buffer_6_ce0 <= grp_IDWT_fu_192_C_6_ce0;
        else 
            C_buffer_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_buffer_6_d0_assign_proc : process(grp_IDWT_fu_192_C_6_d0, grp_Filter_fu_228_C_6_d0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_buffer_6_d0 <= grp_Filter_fu_228_C_6_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_buffer_6_d0 <= grp_IDWT_fu_192_C_6_d0;
        else 
            C_buffer_6_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    C_buffer_6_we0_assign_proc : process(grp_IDWT_fu_192_C_6_we0, grp_Filter_fu_228_C_6_we0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_buffer_6_we0 <= grp_Filter_fu_228_C_6_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_buffer_6_we0 <= grp_IDWT_fu_192_C_6_we0;
        else 
            C_buffer_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    C_buffer_7_address0_assign_proc : process(grp_IDWT_fu_192_C_7_address0, grp_Filter_fu_228_C_7_address0, grp_write_image_fu_256_C_buffer_7_address0, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            C_buffer_7_address0 <= grp_write_image_fu_256_C_buffer_7_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_buffer_7_address0 <= grp_Filter_fu_228_C_7_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_buffer_7_address0 <= grp_IDWT_fu_192_C_7_address0;
        else 
            C_buffer_7_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    C_buffer_7_ce0_assign_proc : process(grp_IDWT_fu_192_C_7_ce0, grp_Filter_fu_228_C_7_ce0, grp_write_image_fu_256_C_buffer_7_ce0, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            C_buffer_7_ce0 <= grp_write_image_fu_256_C_buffer_7_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_buffer_7_ce0 <= grp_Filter_fu_228_C_7_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_buffer_7_ce0 <= grp_IDWT_fu_192_C_7_ce0;
        else 
            C_buffer_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_buffer_7_d0_assign_proc : process(grp_IDWT_fu_192_C_7_d0, grp_Filter_fu_228_C_7_d0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_buffer_7_d0 <= grp_Filter_fu_228_C_7_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_buffer_7_d0 <= grp_IDWT_fu_192_C_7_d0;
        else 
            C_buffer_7_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    C_buffer_7_we0_assign_proc : process(grp_IDWT_fu_192_C_7_we0, grp_Filter_fu_228_C_7_we0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_buffer_7_we0 <= grp_Filter_fu_228_C_7_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_buffer_7_we0 <= grp_IDWT_fu_192_C_7_we0;
        else 
            C_buffer_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    DATA_A_ARVALID_assign_proc : process(ap_CS_fsm_state1, grp_read_color_fu_271_m_axi_a_ARVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_A_ARVALID <= grp_read_color_fu_271_m_axi_a_ARVALID;
        else 
            DATA_A_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_A_RREADY_assign_proc : process(ap_CS_fsm_state1, grp_read_color_fu_271_m_axi_a_RREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_A_RREADY <= grp_read_color_fu_271_m_axi_a_RREADY;
        else 
            DATA_A_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_B_ARVALID_assign_proc : process(ap_CS_fsm_state1, grp_read_IR_fu_294_m_axi_b_ARVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_B_ARVALID <= grp_read_IR_fu_294_m_axi_b_ARVALID;
        else 
            DATA_B_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_B_RREADY_assign_proc : process(ap_CS_fsm_state1, grp_read_IR_fu_294_m_axi_b_RREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_B_RREADY <= grp_read_IR_fu_294_m_axi_b_RREADY;
        else 
            DATA_B_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_C_AWVALID_assign_proc : process(grp_write_image_fu_256_m_axi_c_AWVALID, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            DATA_C_AWVALID <= grp_write_image_fu_256_m_axi_c_AWVALID;
        else 
            DATA_C_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_C_BREADY_assign_proc : process(grp_write_image_fu_256_m_axi_c_BREADY, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            DATA_C_BREADY <= grp_write_image_fu_256_m_axi_c_BREADY;
        else 
            DATA_C_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_C_WVALID_assign_proc : process(grp_write_image_fu_256_m_axi_c_WVALID, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            DATA_C_WVALID <= grp_write_image_fu_256_m_axi_c_WVALID;
        else 
            DATA_C_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state2_on_subcall_done_assign_proc : process(grp_read_color_fu_271_ap_done, grp_read_IR_fu_294_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((grp_read_color_fu_271_ap_done = ap_const_logic_0) or (grp_read_IR_fu_294_ap_done = ap_const_logic_0));
    end process;


    ap_block_state4_on_subcall_done_assign_proc : process(grp_DWT_color_fu_204_ap_done, grp_DWT_IR_fu_216_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((grp_DWT_IR_fu_216_ap_done = ap_const_logic_0) or (grp_DWT_color_fu_204_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(grp_write_image_fu_256_ap_done, ap_CS_fsm_state10)
    begin
        if (((grp_write_image_fu_256_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_write_image_fu_256_ap_done, ap_CS_fsm_state10)
    begin
        if (((grp_write_image_fu_256_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_DWT_IR_fu_216_ap_start <= grp_DWT_IR_fu_216_ap_start_reg;
    grp_DWT_color_fu_204_ap_start <= grp_DWT_color_fu_204_ap_start_reg;
    grp_Filter_fu_228_ap_start <= grp_Filter_fu_228_ap_start_reg;
    grp_IDWT_fu_192_ap_start <= grp_IDWT_fu_192_ap_start_reg;
    grp_read_IR_fu_294_ap_start <= grp_read_IR_fu_294_ap_start_reg;
    grp_read_color_fu_271_ap_start <= grp_read_color_fu_271_ap_start_reg;
    grp_write_image_fu_256_ap_start <= grp_write_image_fu_256_ap_start_reg;
end behav;
